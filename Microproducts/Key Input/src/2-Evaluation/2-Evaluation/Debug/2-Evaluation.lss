
2-Evaluation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010c  0080010c  00000306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000896  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f5  00000000  00000000  00000c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041a  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d2  00000000  00000000  00001ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  9e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z6keypadv>:
	}
}

char keypad(){
	while(1){
		DDRB = 0b01111111;
  a6:	2f e7       	ldi	r18, 0x7F	; 127
  a8:	24 b9       	out	0x04, r18	; 4
		PORTB = 0b01111000;
  aa:	88 e7       	ldi	r24, 0x78	; 120
  ac:	85 b9       	out	0x05, r24	; 5
	
		key1 = PINB & 0b00000111;     /*get the pressed key*/
  ae:	83 b1       	in	r24, 0x03	; 3
  b0:	87 70       	andi	r24, 0x07	; 7
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <key1+0x1>
  b8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <key1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <_Z6keypadv+0x18>
  c2:	00 00       	nop
		_delay_us(5);
	
		DDRB = 0b01111111;
  c4:	24 b9       	out	0x04, r18	; 4
		PORTB = 0b00000111;
  c6:	87 e0       	ldi	r24, 0x07	; 7
  c8:	85 b9       	out	0x05, r24	; 5
	
		key2 = PINB & 0b01111000;
  ca:	83 b1       	in	r24, 0x03	; 3
  cc:	88 77       	andi	r24, 0x78	; 120
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <key2+0x1>
  d4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <key2>
  d8:	8d e0       	ldi	r24, 0x0D	; 13
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <_Z6keypadv+0x34>
  de:	00 00       	nop
		_delay_us(5);
	
		if (key1 == 0b00000001) { colloc = 2; break; }
  e0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <key1>
  e4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <key1+0x1>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	91 05       	cpc	r25, r1
  ec:	39 f4       	brne	.+14     	; 0xfc <_Z6keypadv+0x56>
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <colloc+0x1>
  f6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <colloc>
  fa:	10 c0       	rjmp	.+32     	; 0x11c <_Z6keypadv+0x76>
		if (key1 == 0b00000010) { colloc = 1; break; }
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	91 05       	cpc	r25, r1
 100:	39 f4       	brne	.+14     	; 0x110 <_Z6keypadv+0x6a>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <colloc+0x1>
 10a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <colloc>
 10e:	06 c0       	rjmp	.+12     	; 0x11c <_Z6keypadv+0x76>
		if (key1 == 0b00000100) { colloc = 0; break; }
 110:	04 97       	sbiw	r24, 0x04	; 4
 112:	49 f6       	brne	.-110    	; 0xa6 <_Z6keypadv>
 114:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <colloc+0x1>
 118:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <colloc>
	}
	
	if (key2 == 0b00001000)  return(keys[0][colloc]); 
 11c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <key2>
 120:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <key2+0x1>
 124:	88 30       	cpi	r24, 0x08	; 8
 126:	91 05       	cpc	r25, r1
 128:	41 f4       	brne	.+16     	; 0x13a <_Z6keypadv+0x94>
 12a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <colloc>
 12e:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <colloc+0x1>
 132:	e0 50       	subi	r30, 0x00	; 0
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	80 81       	ld	r24, Z
 138:	08 95       	ret
	else if (key2 == 0b00010000)  return(keys[1][colloc]); 
 13a:	80 31       	cpi	r24, 0x10	; 16
 13c:	91 05       	cpc	r25, r1
 13e:	41 f4       	brne	.+16     	; 0x150 <_Z6keypadv+0xaa>
 140:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <colloc>
 144:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <colloc+0x1>
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	83 81       	ldd	r24, Z+3	; 0x03
 14e:	08 95       	ret
	else if (key2 == 0b00100000)  return(keys[2][colloc]); 
 150:	80 32       	cpi	r24, 0x20	; 32
 152:	91 05       	cpc	r25, r1
 154:	41 f4       	brne	.+16     	; 0x166 <_Z6keypadv+0xc0>
 156:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <colloc>
 15a:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <colloc+0x1>
 15e:	e0 50       	subi	r30, 0x00	; 0
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	86 81       	ldd	r24, Z+6	; 0x06
 164:	08 95       	ret
	else if (key2 == 0b01000000)  return(keys[3][colloc]);
 166:	80 34       	cpi	r24, 0x40	; 64
 168:	91 05       	cpc	r25, r1
 16a:	41 f4       	brne	.+16     	; 0x17c <_Z6keypadv+0xd6>
 16c:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <colloc>
 170:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <colloc+0x1>
 174:	e0 50       	subi	r30, 0x00	; 0
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	81 85       	ldd	r24, Z+9	; 0x09
 17a:	08 95       	ret
	else return(0);
 17c:	80 e0       	ldi	r24, 0x00	; 0
		
}
 17e:	08 95       	ret

00000180 <main>:

int main(void)
{
	while (1)
	{
		DDRD = 0b011111111;   /* Make all pins of PORTD as output pins */
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	8a b9       	out	0x0a, r24	; 10
		key = keypad();
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z6keypadv>
 188:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		if (key == '1') { PORTD = 0b00100010; }
 18c:	81 33       	cpi	r24, 0x31	; 49
 18e:	11 f4       	brne	.+4      	; 0x194 <main+0x14>
 190:	82 e2       	ldi	r24, 0x22	; 34
 192:	8b b9       	out	0x0b, r24	; 11
		if (key == '2') { PORTD = 0b00011111; }
 194:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 198:	82 33       	cpi	r24, 0x32	; 50
 19a:	11 f4       	brne	.+4      	; 0x1a0 <main+0x20>
 19c:	8f e1       	ldi	r24, 0x1F	; 31
 19e:	8b b9       	out	0x0b, r24	; 11
		if (key == '3') { PORTD = 0b00110111; }
 1a0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1a4:	83 33       	cpi	r24, 0x33	; 51
 1a6:	11 f4       	brne	.+4      	; 0x1ac <main+0x2c>
 1a8:	87 e3       	ldi	r24, 0x37	; 55
 1aa:	8b b9       	out	0x0b, r24	; 11
		if (key == '4') { PORTD = 0b01100110; }
 1ac:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1b0:	84 33       	cpi	r24, 0x34	; 52
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <main+0x38>
 1b4:	86 e6       	ldi	r24, 0x66	; 102
 1b6:	8b b9       	out	0x0b, r24	; 11
		if (key == '5') { PORTD = 0b01110101; }
 1b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1bc:	85 33       	cpi	r24, 0x35	; 53
 1be:	11 f4       	brne	.+4      	; 0x1c4 <main+0x44>
 1c0:	85 e7       	ldi	r24, 0x75	; 117
 1c2:	8b b9       	out	0x0b, r24	; 11
		if (key == '6') { PORTD = 0b01111101; }
 1c4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1c8:	86 33       	cpi	r24, 0x36	; 54
 1ca:	11 f4       	brne	.+4      	; 0x1d0 <main+0x50>
 1cc:	8d e7       	ldi	r24, 0x7D	; 125
 1ce:	8b b9       	out	0x0b, r24	; 11
		if (key == '7') { PORTD = 0b00100011; }
 1d0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1d4:	87 33       	cpi	r24, 0x37	; 55
 1d6:	11 f4       	brne	.+4      	; 0x1dc <main+0x5c>
 1d8:	83 e2       	ldi	r24, 0x23	; 35
 1da:	8b b9       	out	0x0b, r24	; 11
		if (key == '8') { PORTD = 0b01111111; }
 1dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1e0:	88 33       	cpi	r24, 0x38	; 56
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <main+0x68>
 1e4:	8f e7       	ldi	r24, 0x7F	; 127
 1e6:	8b b9       	out	0x0b, r24	; 11
		if (key == '9') { PORTD = 0b01100111; }
 1e8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1ec:	89 33       	cpi	r24, 0x39	; 57
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <main+0x74>
 1f0:	87 e6       	ldi	r24, 0x67	; 103
 1f2:	8b b9       	out	0x0b, r24	; 11
		if (key == '*' || key =='#'){
 1f4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1f8:	8a 32       	cpi	r24, 0x2A	; 42
 1fa:	11 f0       	breq	.+4      	; 0x200 <main+0x80>
 1fc:	83 32       	cpi	r24, 0x23	; 35
 1fe:	49 f5       	brne	.+82     	; 0x252 <main+0xd2>
			PORTD = 0b00000000;
 200:	1b b8       	out	0x0b, r1	; 11
			for(i=0;i<7;i++){
 202:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <i+0x1>
 206:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <i>
 20a:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <i>
 20e:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <i+0x1>
 212:	27 30       	cpi	r18, 0x07	; 7
 214:	31 05       	cpc	r19, r1
 216:	ec f4       	brge	.+58     	; 0x252 <main+0xd2>
			PORTD |= (1<<i);
 218:	3b b1       	in	r19, 0x0b	; 11
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <main+0xa4>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	2a 95       	dec	r18
 226:	e2 f7       	brpl	.-8      	; 0x220 <main+0xa0>
 228:	83 2b       	or	r24, r19
 22a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	80 e7       	ldi	r24, 0x70	; 112
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0xb2>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0xbc>
 23c:	00 00       	nop
		if (key == '7') { PORTD = 0b00100011; }
		if (key == '8') { PORTD = 0b01111111; }
		if (key == '9') { PORTD = 0b01100111; }
		if (key == '*' || key =='#'){
			PORTD = 0b00000000;
			for(i=0;i<7;i++){
 23e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <i>
 242:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <i+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <i+0x1>
 24c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <i>
 250:	dc cf       	rjmp	.-72     	; 0x20a <main+0x8a>
			PORTD |= (1<<i);
			_delay_ms(100);}
		}
		if (key == '0') { PORTD = 0b01111011; }
 252:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 256:	80 33       	cpi	r24, 0x30	; 48
 258:	09 f0       	breq	.+2      	; 0x25c <main+0xdc>
 25a:	92 cf       	rjmp	.-220    	; 0x180 <main>
 25c:	8b e7       	ldi	r24, 0x7B	; 123
 25e:	8b b9       	out	0x0b, r24	; 11
 260:	8f cf       	rjmp	.-226    	; 0x180 <main>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
