
Alarm Clock AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  000029c8  00002a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  008001cc  008001cc  00002b28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034b4  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000123e  00000000  00000000  0000627c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001683  00000000  00000000  000074ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000062c  00000000  00000000  00008b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c74  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002207  00000000  00000000  00009de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000bfe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__ctors_end>
       4:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
       8:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_2>
       c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      10:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      14:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      18:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      1c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      20:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      24:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      28:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      2c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      30:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      34:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      38:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      3c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      40:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      44:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      48:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      4c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      50:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      54:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      58:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      5c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      60:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      64:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	52 00       	.word	0x0052	; ????
      6a:	08 00       	.word	0x0008	; ????
      6c:	52 00       	.word	0x0052	; ????
      6e:	08 00       	.word	0x0008	; ????
      70:	a5 00       	.word	0x00a5	; ????
      72:	08 00       	.word	0x0008	; ????
      74:	52 00       	.word	0x0052	; ????
      76:	08 00       	.word	0x0008	; ????
      78:	52 00       	.word	0x0052	; ????
      7a:	08 00       	.word	0x0008	; ????
      7c:	93 00       	.word	0x0093	; ????
      7e:	08 00       	.word	0x0008	; ????
      80:	52 00       	.word	0x0052	; ????
      82:	08 00       	.word	0x0008	; ????
      84:	52 00       	.word	0x0052	; ????
      86:	08 00       	.word	0x0008	; ????
      88:	83 00       	.word	0x0083	; ????
      8a:	08 00       	.word	0x0008	; ????
      8c:	52 00       	.word	0x0052	; ????
      8e:	08 00       	.word	0x0008	; ????
      90:	52 00       	.word	0x0052	; ????
      92:	08 00       	.word	0x0008	; ????
      94:	75 00       	.word	0x0075	; ????
      96:	08 00       	.word	0x0008	; ????
      98:	52 00       	.word	0x0052	; ????
      9a:	08 00       	.word	0x0008	; ????
      9c:	52 00       	.word	0x0052	; ????
      9e:	08 00       	.word	0x0008	; ????
      a0:	7b 00       	.word	0x007b	; ????
      a2:	08 00       	.word	0x0008	; ????
      a4:	83 00       	.word	0x0083	; ????
      a6:	08 00       	.word	0x0008	; ????
      a8:	52 00       	.word	0x0052	; ????
      aa:	08 00       	.word	0x0008	; ????
      ac:	52 00       	.word	0x0052	; ????
      ae:	08 00       	.word	0x0008	; ????
      b0:	a5 00       	.word	0x00a5	; ????
      b2:	08 00       	.word	0x0008	; ????
      b4:	52 00       	.word	0x0052	; ????
      b6:	08 00       	.word	0x0008	; ????
      b8:	52 00       	.word	0x0052	; ????
      ba:	08 00       	.word	0x0008	; ????
      bc:	93 00       	.word	0x0093	; ????
      be:	08 00       	.word	0x0008	; ????
      c0:	52 00       	.word	0x0052	; ????
      c2:	08 00       	.word	0x0008	; ????
      c4:	52 00       	.word	0x0052	; ????
      c6:	08 00       	.word	0x0008	; ????
      c8:	83 00       	.word	0x0083	; ????
      ca:	08 00       	.word	0x0008	; ????
      cc:	52 00       	.word	0x0052	; ????
      ce:	08 00       	.word	0x0008	; ????
      d0:	52 00       	.word	0x0052	; ????
      d2:	08 00       	.word	0x0008	; ????
      d4:	75 00       	.word	0x0075	; ????
      d6:	fe ff       	.word	0xfffe	; ????
      d8:	52 00       	.word	0x0052	; ????
      da:	08 00       	.word	0x0008	; ????
      dc:	52 00       	.word	0x0052	; ????
      de:	08 00       	.word	0x0008	; ????
      e0:	a5 00       	.word	0x00a5	; ????
      e2:	08 00       	.word	0x0008	; ????
      e4:	52 00       	.word	0x0052	; ????
      e6:	08 00       	.word	0x0008	; ????
      e8:	52 00       	.word	0x0052	; ????
      ea:	08 00       	.word	0x0008	; ????
      ec:	93 00       	.word	0x0093	; ????
      ee:	08 00       	.word	0x0008	; ????
      f0:	52 00       	.word	0x0052	; ????
      f2:	08 00       	.word	0x0008	; ????
      f4:	52 00       	.word	0x0052	; ????
      f6:	08 00       	.word	0x0008	; ????
      f8:	83 00       	.word	0x0083	; ????
      fa:	08 00       	.word	0x0008	; ????
      fc:	52 00       	.word	0x0052	; ????
      fe:	08 00       	.word	0x0008	; ????
     100:	52 00       	.word	0x0052	; ????
     102:	08 00       	.word	0x0008	; ????
     104:	75 00       	.word	0x0075	; ????
     106:	08 00       	.word	0x0008	; ????
     108:	52 00       	.word	0x0052	; ????
     10a:	08 00       	.word	0x0008	; ????
     10c:	52 00       	.word	0x0052	; ????
     10e:	08 00       	.word	0x0008	; ????
     110:	7b 00       	.word	0x007b	; ????
     112:	08 00       	.word	0x0008	; ????
     114:	83 00       	.word	0x0083	; ????
     116:	08 00       	.word	0x0008	; ????
     118:	52 00       	.word	0x0052	; ????
     11a:	08 00       	.word	0x0008	; ????
     11c:	52 00       	.word	0x0052	; ????
     11e:	08 00       	.word	0x0008	; ????
     120:	a5 00       	.word	0x00a5	; ????
     122:	08 00       	.word	0x0008	; ????
     124:	52 00       	.word	0x0052	; ????
     126:	08 00       	.word	0x0008	; ????
     128:	52 00       	.word	0x0052	; ????
     12a:	08 00       	.word	0x0008	; ????
     12c:	93 00       	.word	0x0093	; ????
     12e:	08 00       	.word	0x0008	; ????
     130:	52 00       	.word	0x0052	; ????
     132:	08 00       	.word	0x0008	; ????
     134:	52 00       	.word	0x0052	; ????
     136:	08 00       	.word	0x0008	; ????
     138:	83 00       	.word	0x0083	; ????
     13a:	08 00       	.word	0x0008	; ????
     13c:	52 00       	.word	0x0052	; ????
     13e:	08 00       	.word	0x0008	; ????
     140:	52 00       	.word	0x0052	; ????
     142:	08 00       	.word	0x0008	; ????
     144:	75 00       	.word	0x0075	; ????
     146:	fe ff       	.word	0xfffe	; ????
     148:	52 00       	.word	0x0052	; ????
     14a:	08 00       	.word	0x0008	; ????
     14c:	52 00       	.word	0x0052	; ????
     14e:	08 00       	.word	0x0008	; ????
     150:	a5 00       	.word	0x00a5	; ????
     152:	08 00       	.word	0x0008	; ????
     154:	52 00       	.word	0x0052	; ????
     156:	08 00       	.word	0x0008	; ????
     158:	52 00       	.word	0x0052	; ????
     15a:	08 00       	.word	0x0008	; ????
     15c:	93 00       	.word	0x0093	; ????
     15e:	08 00       	.word	0x0008	; ????
     160:	52 00       	.word	0x0052	; ????
     162:	08 00       	.word	0x0008	; ????
     164:	52 00       	.word	0x0052	; ????
     166:	08 00       	.word	0x0008	; ????
     168:	83 00       	.word	0x0083	; ????
     16a:	08 00       	.word	0x0008	; ????
     16c:	52 00       	.word	0x0052	; ????
     16e:	08 00       	.word	0x0008	; ????
     170:	52 00       	.word	0x0052	; ????
     172:	08 00       	.word	0x0008	; ????
     174:	75 00       	.word	0x0075	; ????
     176:	08 00       	.word	0x0008	; ????
     178:	52 00       	.word	0x0052	; ????
     17a:	08 00       	.word	0x0008	; ????
     17c:	52 00       	.word	0x0052	; ????
     17e:	08 00       	.word	0x0008	; ????
     180:	7b 00       	.word	0x007b	; ????
     182:	08 00       	.word	0x0008	; ????
     184:	83 00       	.word	0x0083	; ????
     186:	08 00       	.word	0x0008	; ????
     188:	52 00       	.word	0x0052	; ????
     18a:	08 00       	.word	0x0008	; ????
     18c:	52 00       	.word	0x0052	; ????
     18e:	08 00       	.word	0x0008	; ????
     190:	a5 00       	.word	0x00a5	; ????
     192:	08 00       	.word	0x0008	; ????
     194:	52 00       	.word	0x0052	; ????
     196:	08 00       	.word	0x0008	; ????
     198:	52 00       	.word	0x0052	; ????
     19a:	08 00       	.word	0x0008	; ????
     19c:	93 00       	.word	0x0093	; ????
     19e:	08 00       	.word	0x0008	; ????
     1a0:	52 00       	.word	0x0052	; ????
     1a2:	08 00       	.word	0x0008	; ????
     1a4:	52 00       	.word	0x0052	; ????
     1a6:	08 00       	.word	0x0008	; ????
     1a8:	83 00       	.word	0x0083	; ????
     1aa:	08 00       	.word	0x0008	; ????
     1ac:	52 00       	.word	0x0052	; ????
     1ae:	08 00       	.word	0x0008	; ????
     1b0:	52 00       	.word	0x0052	; ????
     1b2:	08 00       	.word	0x0008	; ????
     1b4:	75 00       	.word	0x0075	; ????
     1b6:	fe ff       	.word	0xfffe	; ????
     1b8:	52 00       	.word	0x0052	; ????
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	52 00       	.word	0x0052	; ????
     1be:	08 00       	.word	0x0008	; ????
     1c0:	a5 00       	.word	0x00a5	; ????
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	52 00       	.word	0x0052	; ????
     1c6:	08 00       	.word	0x0008	; ????
     1c8:	52 00       	.word	0x0052	; ????
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	93 00       	.word	0x0093	; ????
     1ce:	08 00       	.word	0x0008	; ????
     1d0:	52 00       	.word	0x0052	; ????
     1d2:	08 00       	.word	0x0008	; ????
     1d4:	52 00       	.word	0x0052	; ????
     1d6:	08 00       	.word	0x0008	; ????
     1d8:	83 00       	.word	0x0083	; ????
     1da:	08 00       	.word	0x0008	; ????
     1dc:	52 00       	.word	0x0052	; ????
     1de:	08 00       	.word	0x0008	; ????
     1e0:	52 00       	.word	0x0052	; ????
     1e2:	08 00       	.word	0x0008	; ????
     1e4:	75 00       	.word	0x0075	; ????
     1e6:	08 00       	.word	0x0008	; ????
     1e8:	52 00       	.word	0x0052	; ????
     1ea:	08 00       	.word	0x0008	; ????
     1ec:	52 00       	.word	0x0052	; ????
     1ee:	08 00       	.word	0x0008	; ????
     1f0:	7b 00       	.word	0x007b	; ????
     1f2:	08 00       	.word	0x0008	; ????
     1f4:	83 00       	.word	0x0083	; ????
     1f6:	08 00       	.word	0x0008	; ????
     1f8:	52 00       	.word	0x0052	; ????
     1fa:	08 00       	.word	0x0008	; ????
     1fc:	52 00       	.word	0x0052	; ????
     1fe:	08 00       	.word	0x0008	; ????
     200:	a5 00       	.word	0x00a5	; ????
     202:	08 00       	.word	0x0008	; ????
     204:	52 00       	.word	0x0052	; ????
     206:	08 00       	.word	0x0008	; ????
     208:	52 00       	.word	0x0052	; ????
     20a:	08 00       	.word	0x0008	; ????
     20c:	93 00       	.word	0x0093	; ????
     20e:	08 00       	.word	0x0008	; ????
     210:	52 00       	.word	0x0052	; ????
     212:	08 00       	.word	0x0008	; ????
     214:	52 00       	.word	0x0052	; ????
     216:	08 00       	.word	0x0008	; ????
     218:	b9 00       	.word	0x00b9	; ????
     21a:	f0 ff       	sbrs	r31, 0
     21c:	93 00       	.word	0x0093	; ????
     21e:	f0 ff       	sbrs	r31, 0
     220:	7b 00       	.word	0x007b	; ????
     222:	f0 ff       	sbrs	r31, 0
     224:	dc 00       	.word	0x00dc	; ????
     226:	f0 ff       	sbrs	r31, 0
     228:	b9 00       	.word	0x00b9	; ????
     22a:	f0 ff       	sbrs	r31, 0
     22c:	7b 00       	.word	0x007b	; ????
     22e:	f0 ff       	sbrs	r31, 0
     230:	93 00       	.word	0x0093	; ????
     232:	f0 ff       	sbrs	r31, 0
     234:	b9 00       	.word	0x00b9	; ????
     236:	f0 ff       	sbrs	r31, 0
     238:	dc 00       	.word	0x00dc	; ????
     23a:	f0 ff       	sbrs	r31, 0
     23c:	b9 00       	.word	0x00b9	; ????
     23e:	f0 ff       	sbrs	r31, 0
     240:	93 00       	.word	0x0093	; ????
     242:	f0 ff       	sbrs	r31, 0
     244:	7b 00       	.word	0x007b	; ????
     246:	f0 ff       	sbrs	r31, 0
	...
     388:	b8 01       	movw	r22, r16
     38a:	04 00       	.word	0x0004	; ????
     38c:	b8 01       	movw	r22, r16
     38e:	04 00       	.word	0x0004	; ????
     390:	b8 01       	movw	r22, r16
     392:	04 00       	.word	0x0004	; ????
     394:	5d 01       	movw	r10, r26
     396:	f8 ff       	.word	0xfff8	; ????
     398:	0b 02       	muls	r16, r27
     39a:	10 00       	.word	0x0010	; ????
     39c:	b8 01       	movw	r22, r16
     39e:	04 00       	.word	0x0004	; ????
     3a0:	5d 01       	movw	r10, r26
     3a2:	f8 ff       	.word	0xfff8	; ????
     3a4:	0b 02       	muls	r16, r27
     3a6:	10 00       	.word	0x0010	; ????
     3a8:	b8 01       	movw	r22, r16
     3aa:	02 00       	.word	0x0002	; ????
     3ac:	93 02       	muls	r25, r19
     3ae:	04 00       	.word	0x0004	; ????
     3b0:	93 02       	muls	r25, r19
     3b2:	04 00       	.word	0x0004	; ????
     3b4:	93 02       	muls	r25, r19
     3b6:	04 00       	.word	0x0004	; ????
     3b8:	ba 02       	muls	r27, r26
     3ba:	f8 ff       	.word	0xfff8	; ????
     3bc:	0b 02       	muls	r16, r27
     3be:	10 00       	.word	0x0010	; ????
     3c0:	b8 01       	movw	r22, r16
     3c2:	04 00       	.word	0x0004	; ????
     3c4:	5d 01       	movw	r10, r26
     3c6:	f8 ff       	.word	0xfff8	; ????
     3c8:	0b 02       	muls	r16, r27
     3ca:	10 00       	.word	0x0010	; ????
     3cc:	b8 01       	movw	r22, r16
     3ce:	02 00       	.word	0x0002	; ????
     3d0:	70 03       	mulsu	r23, r16
     3d2:	04 00       	.word	0x0004	; ????
     3d4:	b8 01       	movw	r22, r16
     3d6:	f8 ff       	.word	0xfff8	; ????
     3d8:	b8 01       	movw	r22, r16
     3da:	10 00       	.word	0x0010	; ????
     3dc:	70 03       	mulsu	r23, r16
     3de:	04 00       	.word	0x0004	; ????
     3e0:	3f 03       	fmul	r19, r23
     3e2:	f8 ff       	.word	0xfff8	; ????
     3e4:	10 03       	mulsu	r17, r16
     3e6:	10 00       	.word	0x0010	; ????
     3e8:	6e 02       	muls	r22, r30
     3ea:	10 00       	.word	0x0010	; ????
     3ec:	4b 02       	muls	r20, r27
     3ee:	10 00       	.word	0x0010	; ????
     3f0:	6e 02       	muls	r22, r30
     3f2:	08 00       	.word	0x0008	; ????
     3f4:	00 00       	nop
     3f6:	08 00       	.word	0x0008	; ????
     3f8:	b8 01       	movw	r22, r16
     3fa:	08 00       	.word	0x0008	; ????
     3fc:	6e 02       	muls	r22, r30
     3fe:	04 00       	.word	0x0004	; ????
     400:	4b 02       	muls	r20, r27
     402:	f8 ff       	.word	0xfff8	; ????
     404:	2a 02       	muls	r18, r26
     406:	10 00       	.word	0x0010	; ????
     408:	0b 02       	muls	r16, r27
     40a:	10 00       	.word	0x0010	; ????
     40c:	ee 01       	movw	r28, r28
     40e:	10 00       	.word	0x0010	; ????
     410:	0b 02       	muls	r16, r27
     412:	10 00       	.word	0x0010	; ????
     414:	00 00       	nop
     416:	08 00       	.word	0x0008	; ????
     418:	5d 01       	movw	r10, r26
     41a:	08 00       	.word	0x0008	; ????
     41c:	9f 01       	movw	r18, r30
     41e:	04 00       	.word	0x0004	; ????
     420:	5d 01       	movw	r10, r26
     422:	f8 ff       	.word	0xfff8	; ????
     424:	b8 01       	movw	r22, r16
     426:	f0 ff       	sbrs	r31, 0
     428:	0b 02       	muls	r16, r27
     42a:	04 00       	.word	0x0004	; ????
     42c:	b8 01       	movw	r22, r16
     42e:	f8 ff       	.word	0xfff8	; ????
     430:	0b 02       	muls	r16, r27
     432:	10 00       	.word	0x0010	; ????
     434:	93 02       	muls	r25, r19
     436:	02 00       	.word	0x0002	; ????
     438:	70 03       	mulsu	r23, r16
     43a:	04 00       	.word	0x0004	; ????
     43c:	b8 01       	movw	r22, r16
     43e:	f8 ff       	.word	0xfff8	; ????
     440:	b8 01       	movw	r22, r16
     442:	10 00       	.word	0x0010	; ????
     444:	70 03       	mulsu	r23, r16
     446:	04 00       	.word	0x0004	; ????
     448:	3f 03       	fmul	r19, r23
     44a:	f8 ff       	.word	0xfff8	; ????
     44c:	10 03       	mulsu	r17, r16
     44e:	10 00       	.word	0x0010	; ????
     450:	6e 02       	muls	r22, r30
     452:	10 00       	.word	0x0010	; ????
     454:	4b 02       	muls	r20, r27
     456:	10 00       	.word	0x0010	; ????
     458:	6e 02       	muls	r22, r30
     45a:	08 00       	.word	0x0008	; ????
     45c:	00 00       	nop
     45e:	08 00       	.word	0x0008	; ????
     460:	b8 01       	movw	r22, r16
     462:	08 00       	.word	0x0008	; ????
     464:	6e 02       	muls	r22, r30
     466:	04 00       	.word	0x0004	; ????
     468:	4b 02       	muls	r20, r27
     46a:	f8 ff       	.word	0xfff8	; ????
     46c:	2a 02       	muls	r18, r26
     46e:	10 00       	.word	0x0010	; ????
     470:	0b 02       	muls	r16, r27
     472:	10 00       	.word	0x0010	; ????
     474:	ee 01       	movw	r28, r28
     476:	10 00       	.word	0x0010	; ????
     478:	0b 02       	muls	r16, r27
     47a:	10 00       	.word	0x0010	; ????
     47c:	00 00       	nop
     47e:	08 00       	.word	0x0008	; ????
     480:	5d 01       	movw	r10, r26
     482:	08 00       	.word	0x0008	; ????
     484:	9f 01       	movw	r18, r30
     486:	04 00       	.word	0x0004	; ????
     488:	5d 01       	movw	r10, r26
     48a:	f8 ff       	.word	0xfff8	; ????
     48c:	b8 01       	movw	r22, r16
     48e:	f0 ff       	sbrs	r31, 0
     490:	b8 01       	movw	r22, r16
     492:	04 00       	.word	0x0004	; ????
     494:	5d 01       	movw	r10, r26
     496:	f8 ff       	.word	0xfff8	; ????
     498:	0b 02       	muls	r16, r27
     49a:	10 00       	.word	0x0010	; ????
     49c:	b8 01       	movw	r22, r16
     49e:	02 00       	.word	0x0002	; ????
	...
     6a8:	88 01       	movw	r16, r16
     6aa:	08 00       	.word	0x0008	; ????
     6ac:	06 01       	movw	r0, r12
     6ae:	08 00       	.word	0x0008	; ????
     6b0:	37 01       	movw	r6, r14
     6b2:	10 00       	.word	0x0010	; ????
     6b4:	5d 01       	movw	r10, r26
     6b6:	10 00       	.word	0x0010	; ????
     6b8:	88 01       	movw	r16, r16
     6ba:	08 00       	.word	0x0008	; ????
     6bc:	06 01       	movw	r0, r12
     6be:	08 00       	.word	0x0008	; ????
     6c0:	37 01       	movw	r6, r14
     6c2:	10 00       	.word	0x0010	; ????
     6c4:	5d 01       	movw	r10, r26
     6c6:	10 00       	.word	0x0010	; ????
     6c8:	88 01       	movw	r16, r16
     6ca:	08 00       	.word	0x0008	; ????
     6cc:	06 01       	movw	r0, r12
     6ce:	08 00       	.word	0x0008	; ????
     6d0:	37 01       	movw	r6, r14
     6d2:	10 00       	.word	0x0010	; ????
     6d4:	5d 01       	movw	r10, r26
     6d6:	10 00       	.word	0x0010	; ????
     6d8:	88 01       	movw	r16, r16
     6da:	08 00       	.word	0x0008	; ????
     6dc:	06 01       	movw	r0, r12
     6de:	08 00       	.word	0x0008	; ????
     6e0:	37 01       	movw	r6, r14
     6e2:	10 00       	.word	0x0010	; ????
     6e4:	5d 01       	movw	r10, r26
     6e6:	10 00       	.word	0x0010	; ????
     6e8:	88 01       	movw	r16, r16
     6ea:	08 00       	.word	0x0008	; ????
     6ec:	06 01       	movw	r0, r12
     6ee:	08 00       	.word	0x0008	; ????
     6f0:	4a 01       	movw	r8, r20
     6f2:	10 00       	.word	0x0010	; ????
     6f4:	5d 01       	movw	r10, r26
     6f6:	10 00       	.word	0x0010	; ????
     6f8:	88 01       	movw	r16, r16
     6fa:	08 00       	.word	0x0008	; ????
     6fc:	06 01       	movw	r0, r12
     6fe:	08 00       	.word	0x0008	; ????
     700:	4a 01       	movw	r8, r20
     702:	10 00       	.word	0x0010	; ????
     704:	5d 01       	movw	r10, r26
     706:	10 00       	.word	0x0010	; ????
     708:	88 01       	movw	r16, r16
     70a:	08 00       	.word	0x0008	; ????
     70c:	06 01       	movw	r0, r12
     70e:	08 00       	.word	0x0008	; ????
     710:	4a 01       	movw	r8, r20
     712:	10 00       	.word	0x0010	; ????
     714:	5d 01       	movw	r10, r26
     716:	10 00       	.word	0x0010	; ????
     718:	88 01       	movw	r16, r16
     71a:	08 00       	.word	0x0008	; ????
     71c:	06 01       	movw	r0, r12
     71e:	08 00       	.word	0x0008	; ????
     720:	4a 01       	movw	r8, r20
     722:	10 00       	.word	0x0010	; ????
     724:	5d 01       	movw	r10, r26
     726:	10 00       	.word	0x0010	; ????
     728:	88 01       	movw	r16, r16
     72a:	fc ff       	.word	0xfffc	; ????
     72c:	06 01       	movw	r0, r12
     72e:	fc ff       	.word	0xfffc	; ????
     730:	37 01       	movw	r6, r14
     732:	10 00       	.word	0x0010	; ????
     734:	5d 01       	movw	r10, r26
     736:	10 00       	.word	0x0010	; ????
     738:	88 01       	movw	r16, r16
     73a:	04 00       	.word	0x0004	; ????
     73c:	06 01       	movw	r0, r12
     73e:	04 00       	.word	0x0004	; ????
     740:	37 01       	movw	r6, r14
     742:	10 00       	.word	0x0010	; ????
     744:	5d 01       	movw	r10, r26
     746:	10 00       	.word	0x0010	; ????
     748:	26 01       	movw	r4, r12
     74a:	ff ff       	.word	0xffff	; ????
     74c:	5d 01       	movw	r10, r26
     74e:	fc ff       	.word	0xfffc	; ????
     750:	e9 00       	.word	0x00e9	; ????
     752:	fc ff       	.word	0xfffc	; ????
     754:	37 01       	movw	r6, r14
     756:	10 00       	.word	0x0010	; ????
     758:	26 01       	movw	r4, r12
     75a:	10 00       	.word	0x0010	; ????
     75c:	5d 01       	movw	r10, r26
     75e:	04 00       	.word	0x0004	; ????
     760:	e9 00       	.word	0x00e9	; ????
     762:	fc ff       	.word	0xfffc	; ????
     764:	37 01       	movw	r6, r14
     766:	10 00       	.word	0x0010	; ????
     768:	26 01       	movw	r4, r12
     76a:	10 00       	.word	0x0010	; ????
     76c:	06 01       	movw	r0, r12
     76e:	ff ff       	.word	0xffff	; ????
     770:	88 01       	movw	r16, r16
     772:	fc ff       	.word	0xfffc	; ????
     774:	06 01       	movw	r0, r12
     776:	fc ff       	.word	0xfffc	; ????
     778:	37 01       	movw	r6, r14
     77a:	10 00       	.word	0x0010	; ????
     77c:	5d 01       	movw	r10, r26
     77e:	10 00       	.word	0x0010	; ????
     780:	88 01       	movw	r16, r16
     782:	04 00       	.word	0x0004	; ????
     784:	06 01       	movw	r0, r12
     786:	04 00       	.word	0x0004	; ????
     788:	37 01       	movw	r6, r14
     78a:	10 00       	.word	0x0010	; ????
     78c:	5d 01       	movw	r10, r26
     78e:	10 00       	.word	0x0010	; ????
     790:	26 01       	movw	r4, r12
     792:	ff ff       	.word	0xffff	; ????
     794:	5d 01       	movw	r10, r26
     796:	fc ff       	.word	0xfffc	; ????
     798:	e9 00       	.word	0x00e9	; ????
     79a:	fc ff       	.word	0xfffc	; ????
     79c:	37 01       	movw	r6, r14
     79e:	10 00       	.word	0x0010	; ????
     7a0:	26 01       	movw	r4, r12
     7a2:	10 00       	.word	0x0010	; ????
     7a4:	5d 01       	movw	r10, r26
     7a6:	04 00       	.word	0x0004	; ????
     7a8:	e9 00       	.word	0x00e9	; ????
     7aa:	fc ff       	.word	0xfffc	; ????
     7ac:	37 01       	movw	r6, r14
     7ae:	10 00       	.word	0x0010	; ????
     7b0:	26 01       	movw	r4, r12
     7b2:	10 00       	.word	0x0010	; ????
     7b4:	06 01       	movw	r0, r12
     7b6:	ff ff       	.word	0xffff	; ????
     7b8:	88 01       	movw	r16, r16
     7ba:	fc ff       	.word	0xfffc	; ????
     7bc:	06 01       	movw	r0, r12
     7be:	fc ff       	.word	0xfffc	; ????
     7c0:	37 01       	movw	r6, r14
     7c2:	10 00       	.word	0x0010	; ????
     7c4:	5d 01       	movw	r10, r26
     7c6:	10 00       	.word	0x0010	; ????
     7c8:	88 01       	movw	r16, r16
     7ca:	04 00       	.word	0x0004	; ????
     7cc:	06 01       	movw	r0, r12
     7ce:	04 00       	.word	0x0004	; ????
     7d0:	37 01       	movw	r6, r14
     7d2:	10 00       	.word	0x0010	; ????
     7d4:	5d 01       	movw	r10, r26
     7d6:	10 00       	.word	0x0010	; ????
     7d8:	26 01       	movw	r4, r12
     7da:	fe ff       	.word	0xfffe	; ????
     7dc:	5d 01       	movw	r10, r26
     7de:	fc ff       	.word	0xfffc	; ????
     7e0:	e9 00       	.word	0x00e9	; ????
     7e2:	fc ff       	.word	0xfffc	; ????
     7e4:	26 01       	movw	r4, r12
     7e6:	f8 ff       	.word	0xfff8	; ????
     7e8:	37 01       	movw	r6, r14
     7ea:	f8 ff       	.word	0xfff8	; ????
     7ec:	26 01       	movw	r4, r12
     7ee:	f8 ff       	.word	0xfff8	; ????
     7f0:	e9 00       	.word	0x00e9	; ????
     7f2:	f8 ff       	.word	0xfff8	; ????
     7f4:	06 01       	movw	r0, r12
     7f6:	ff ff       	.word	0xffff	; ????
     7f8:	0b 02       	muls	r16, r27
     7fa:	fe ff       	.word	0xfffe	; ????
     7fc:	d2 01       	movw	r26, r4
     7fe:	fe ff       	.word	0xfffe	; ????
     800:	06 01       	movw	r0, r12
     802:	fe ff       	.word	0xfffe	; ????
     804:	88 01       	movw	r16, r16
     806:	fe ff       	.word	0xfffe	; ????
     808:	37 01       	movw	r6, r14
     80a:	fe ff       	.word	0xfffe	; ????
     80c:	37 01       	movw	r6, r14
     80e:	fc ff       	.word	0xfffc	; ????
     810:	5d 01       	movw	r10, r26
     812:	fc ff       	.word	0xfffc	; ????
     814:	88 01       	movw	r16, r16
     816:	ff ff       	.word	0xffff	; ????
     818:	0b 02       	muls	r16, r27
     81a:	fe ff       	.word	0xfffe	; ????
     81c:	d2 01       	movw	r26, r4
     81e:	fe ff       	.word	0xfffe	; ????
     820:	06 01       	movw	r0, r12
     822:	fe ff       	.word	0xfffe	; ????
     824:	88 01       	movw	r16, r16
     826:	fe ff       	.word	0xfffe	; ????
     828:	37 01       	movw	r6, r14
     82a:	fe ff       	.word	0xfffe	; ????
     82c:	37 01       	movw	r6, r14
     82e:	fc ff       	.word	0xfffc	; ????
     830:	26 01       	movw	r4, r12
     832:	fc ff       	.word	0xfffc	; ????
     834:	0b 02       	muls	r16, r27
     836:	08 00       	.word	0x0008	; ????
     838:	88 01       	movw	r16, r16
     83a:	08 00       	.word	0x0008	; ????
     83c:	9f 01       	movw	r18, r30
     83e:	10 00       	.word	0x0010	; ????
     840:	d2 01       	movw	r26, r4
     842:	10 00       	.word	0x0010	; ????
     844:	0b 02       	muls	r16, r27
     846:	08 00       	.word	0x0008	; ????
     848:	88 01       	movw	r16, r16
     84a:	08 00       	.word	0x0008	; ????
     84c:	9f 01       	movw	r18, r30
     84e:	10 00       	.word	0x0010	; ????
     850:	d2 01       	movw	r26, r4
     852:	10 00       	.word	0x0010	; ????
     854:	0b 02       	muls	r16, r27
     856:	08 00       	.word	0x0008	; ????
     858:	88 01       	movw	r16, r16
     85a:	08 00       	.word	0x0008	; ????
     85c:	9f 01       	movw	r18, r30
     85e:	10 00       	.word	0x0010	; ????
     860:	d2 01       	movw	r26, r4
     862:	10 00       	.word	0x0010	; ????
     864:	0b 02       	muls	r16, r27
     866:	08 00       	.word	0x0008	; ????
     868:	88 01       	movw	r16, r16
     86a:	08 00       	.word	0x0008	; ????
     86c:	9f 01       	movw	r18, r30
     86e:	10 00       	.word	0x0010	; ????
     870:	d2 01       	movw	r26, r4
     872:	10 00       	.word	0x0010	; ????
     874:	00 00       	nop
     876:	04 00       	.word	0x0004	; ????
     878:	3f 03       	fmul	r19, r23
     87a:	10 00       	.word	0x0010	; ????
     87c:	a4 03       	fmuls	r18, r20
     87e:	10 00       	.word	0x0010	; ????
     880:	17 04       	cpc	r1, r7
     882:	08 00       	.word	0x0008	; ????
     884:	10 03       	mulsu	r17, r16
     886:	08 00       	.word	0x0008	; ????
     888:	3f 03       	fmul	r19, r23
     88a:	10 00       	.word	0x0010	; ????
     88c:	a4 03       	fmuls	r18, r20
     88e:	10 00       	.word	0x0010	; ????
     890:	17 04       	cpc	r1, r7
     892:	08 00       	.word	0x0008	; ????
     894:	10 03       	mulsu	r17, r16
     896:	10 00       	.word	0x0010	; ????
     898:	3f 03       	fmul	r19, r23
     89a:	10 00       	.word	0x0010	; ????
     89c:	a4 03       	fmuls	r18, r20
     89e:	10 00       	.word	0x0010	; ????
     8a0:	17 04       	cpc	r1, r7
     8a2:	08 00       	.word	0x0008	; ????
     8a4:	10 03       	mulsu	r17, r16
     8a6:	08 00       	.word	0x0008	; ????
     8a8:	3f 03       	fmul	r19, r23
     8aa:	10 00       	.word	0x0010	; ????
     8ac:	a4 03       	fmuls	r18, r20
     8ae:	10 00       	.word	0x0010	; ????
	...
     9c8:	4a 01       	movw	r8, r20
     9ca:	fc ff       	.word	0xfffc	; ????
     9cc:	00 00       	nop
     9ce:	08 00       	.word	0x0008	; ????
     9d0:	72 01       	movw	r14, r4
     9d2:	08 00       	.word	0x0008	; ????
     9d4:	88 01       	movw	r16, r16
     9d6:	fc ff       	.word	0xfffc	; ????
     9d8:	00 00       	nop
     9da:	08 00       	.word	0x0008	; ????
     9dc:	37 01       	movw	r6, r14
     9de:	08 00       	.word	0x0008	; ????
     9e0:	4a 01       	movw	r8, r20
     9e2:	f8 ff       	.word	0xfff8	; ????
     9e4:	72 01       	movw	r14, r4
     9e6:	08 00       	.word	0x0008	; ????
     9e8:	88 01       	movw	r16, r16
     9ea:	f8 ff       	.word	0xfff8	; ????
     9ec:	0b 02       	muls	r16, r27
     9ee:	08 00       	.word	0x0008	; ????
     9f0:	ee 01       	movw	r28, r28
     9f2:	f8 ff       	.word	0xfff8	; ????
     9f4:	4a 01       	movw	r8, r20
     9f6:	08 00       	.word	0x0008	; ????
     9f8:	88 01       	movw	r16, r16
     9fa:	f8 ff       	.word	0xfff8	; ????
     9fc:	ee 01       	movw	r28, r28
     9fe:	08 00       	.word	0x0008	; ????
     a00:	d2 01       	movw	r26, r4
     a02:	02 00       	.word	0x0002	; ????
     a04:	b8 01       	movw	r22, r16
     a06:	f0 ff       	sbrs	r31, 0
     a08:	88 01       	movw	r16, r16
     a0a:	f0 ff       	sbrs	r31, 0
     a0c:	4a 01       	movw	r8, r20
     a0e:	f0 ff       	sbrs	r31, 0
     a10:	26 01       	movw	r4, r12
     a12:	f0 ff       	sbrs	r31, 0
     a14:	4a 01       	movw	r8, r20
     a16:	02 00       	.word	0x0002	; ????
     a18:	00 00       	nop
     a1a:	04 00       	.word	0x0004	; ????
     a1c:	00 00       	nop
     a1e:	08 00       	.word	0x0008	; ????
     a20:	37 01       	movw	r6, r14
     a22:	04 00       	.word	0x0004	; ????
     a24:	4a 01       	movw	r8, r20
     a26:	fc ff       	.word	0xfffc	; ????
     a28:	00 00       	nop
     a2a:	08 00       	.word	0x0008	; ????
     a2c:	72 01       	movw	r14, r4
     a2e:	08 00       	.word	0x0008	; ????
     a30:	88 01       	movw	r16, r16
     a32:	fc ff       	.word	0xfffc	; ????
     a34:	00 00       	nop
     a36:	08 00       	.word	0x0008	; ????
     a38:	37 01       	movw	r6, r14
     a3a:	08 00       	.word	0x0008	; ????
     a3c:	4a 01       	movw	r8, r20
     a3e:	f8 ff       	.word	0xfff8	; ????
     a40:	72 01       	movw	r14, r4
     a42:	08 00       	.word	0x0008	; ????
     a44:	88 01       	movw	r16, r16
     a46:	f8 ff       	.word	0xfff8	; ????
     a48:	0b 02       	muls	r16, r27
     a4a:	08 00       	.word	0x0008	; ????
     a4c:	ee 01       	movw	r28, r28
     a4e:	f8 ff       	.word	0xfff8	; ????
     a50:	88 01       	movw	r16, r16
     a52:	08 00       	.word	0x0008	; ????
     a54:	ee 01       	movw	r28, r28
     a56:	f8 ff       	.word	0xfff8	; ????
     a58:	93 02       	muls	r25, r19
     a5a:	08 00       	.word	0x0008	; ????
     a5c:	6e 02       	muls	r22, r30
     a5e:	01 00       	.word	0x0001	; ????
     a60:	4b 02       	muls	r20, r27
     a62:	02 00       	.word	0x0002	; ????
     a64:	00 00       	nop
     a66:	04 00       	.word	0x0004	; ????
     a68:	00 00       	nop
     a6a:	08 00       	.word	0x0008	; ????
     a6c:	37 01       	movw	r6, r14
     a6e:	08 00       	.word	0x0008	; ????
     a70:	4a 01       	movw	r8, r20
     a72:	fc ff       	.word	0xfffc	; ????
     a74:	00 00       	nop
     a76:	08 00       	.word	0x0008	; ????
     a78:	72 01       	movw	r14, r4
     a7a:	08 00       	.word	0x0008	; ????
     a7c:	88 01       	movw	r16, r16
     a7e:	fc ff       	.word	0xfffc	; ????
     a80:	00 00       	nop
     a82:	08 00       	.word	0x0008	; ????
     a84:	37 01       	movw	r6, r14
     a86:	08 00       	.word	0x0008	; ????
     a88:	4a 01       	movw	r8, r20
     a8a:	f8 ff       	.word	0xfff8	; ????
     a8c:	72 01       	movw	r14, r4
     a8e:	08 00       	.word	0x0008	; ????
     a90:	88 01       	movw	r16, r16
     a92:	f8 ff       	.word	0xfff8	; ????
     a94:	0b 02       	muls	r16, r27
     a96:	08 00       	.word	0x0008	; ????
     a98:	ee 01       	movw	r28, r28
     a9a:	f8 ff       	.word	0xfff8	; ????
     a9c:	4a 01       	movw	r8, r20
     a9e:	08 00       	.word	0x0008	; ????
     aa0:	88 01       	movw	r16, r16
     aa2:	f8 ff       	.word	0xfff8	; ????
     aa4:	ee 01       	movw	r28, r28
     aa6:	08 00       	.word	0x0008	; ????
     aa8:	d2 01       	movw	r26, r4
     aaa:	02 00       	.word	0x0002	; ????
     aac:	b8 01       	movw	r22, r16
     aae:	f0 ff       	sbrs	r31, 0
     ab0:	88 01       	movw	r16, r16
     ab2:	f0 ff       	sbrs	r31, 0
     ab4:	4a 01       	movw	r8, r20
     ab6:	f0 ff       	sbrs	r31, 0
     ab8:	26 01       	movw	r4, r12
     aba:	f0 ff       	sbrs	r31, 0
     abc:	4a 01       	movw	r8, r20
     abe:	fc ff       	.word	0xfffc	; ????
     ac0:	00 00       	nop
     ac2:	04 00       	.word	0x0004	; ????
     ac4:	00 00       	nop
     ac6:	04 00       	.word	0x0004	; ????
     ac8:	93 02       	muls	r25, r19
     aca:	f8 ff       	.word	0xfff8	; ????
     acc:	4b 02       	muls	r20, r27
     ace:	08 00       	.word	0x0008	; ????
     ad0:	ee 01       	movw	r28, r28
     ad2:	f8 ff       	.word	0xfff8	; ????
     ad4:	b8 01       	movw	r22, r16
     ad6:	08 00       	.word	0x0008	; ????
     ad8:	88 01       	movw	r16, r16
     ada:	f8 ff       	.word	0xfff8	; ????
     adc:	4a 01       	movw	r8, r20
     ade:	f8 ff       	.word	0xfff8	; ????
     ae0:	d2 01       	movw	r26, r4
     ae2:	10 00       	.word	0x0010	; ????
     ae4:	b8 01       	movw	r22, r16
     ae6:	f8 ff       	.word	0xfff8	; ????
     ae8:	d2 01       	movw	r26, r4
     aea:	10 00       	.word	0x0010	; ????
     aec:	b8 01       	movw	r22, r16
     aee:	f8 ff       	.word	0xfff8	; ????
     af0:	d2 01       	movw	r26, r4
     af2:	10 00       	.word	0x0010	; ????
     af4:	b8 01       	movw	r22, r16
     af6:	f8 ff       	.word	0xfff8	; ????
     af8:	d2 01       	movw	r26, r4
     afa:	10 00       	.word	0x0010	; ????
     afc:	b8 01       	movw	r22, r16
     afe:	f8 ff       	.word	0xfff8	; ????
     b00:	88 01       	movw	r16, r16
     b02:	f0 ff       	sbrs	r31, 0
     b04:	4a 01       	movw	r8, r20
     b06:	f0 ff       	sbrs	r31, 0
     b08:	26 01       	movw	r4, r12
     b0a:	f0 ff       	sbrs	r31, 0
     b0c:	4a 01       	movw	r8, r20
     b0e:	10 00       	.word	0x0010	; ????
     b10:	4a 01       	movw	r8, r20
     b12:	10 00       	.word	0x0010	; ????
     b14:	4a 01       	movw	r8, r20
     b16:	02 00       	.word	0x0002	; ????
	...
     ce8:	00 00       	nop
     cea:	04 00       	.word	0x0004	; ????
     cec:	00 00       	nop
     cee:	08 00       	.word	0x0008	; ????
     cf0:	00 00       	nop
     cf2:	08 00       	.word	0x0008	; ????
     cf4:	00 00       	nop
     cf6:	08 00       	.word	0x0008	; ????
     cf8:	4a 01       	movw	r8, r20
     cfa:	08 00       	.word	0x0008	; ????
     cfc:	b8 01       	movw	r22, r16
     cfe:	08 00       	.word	0x0008	; ????
     d00:	0b 02       	muls	r16, r27
     d02:	08 00       	.word	0x0008	; ????
     d04:	ee 01       	movw	r28, r28
     d06:	08 00       	.word	0x0008	; ????
     d08:	b8 01       	movw	r22, r16
     d0a:	08 00       	.word	0x0008	; ????
     d0c:	0b 02       	muls	r16, r27
     d0e:	08 00       	.word	0x0008	; ????
     d10:	b8 01       	movw	r22, r16
     d12:	08 00       	.word	0x0008	; ????
     d14:	ee 01       	movw	r28, r28
     d16:	08 00       	.word	0x0008	; ????
     d18:	b8 01       	movw	r22, r16
     d1a:	08 00       	.word	0x0008	; ????
     d1c:	5d 01       	movw	r10, r26
     d1e:	08 00       	.word	0x0008	; ????
     d20:	88 01       	movw	r16, r16
     d22:	08 00       	.word	0x0008	; ????
     d24:	4a 01       	movw	r8, r20
     d26:	02 00       	.word	0x0002	; ????
     d28:	4a 01       	movw	r8, r20
     d2a:	08 00       	.word	0x0008	; ????
     d2c:	b8 01       	movw	r22, r16
     d2e:	08 00       	.word	0x0008	; ????
     d30:	0b 02       	muls	r16, r27
     d32:	08 00       	.word	0x0008	; ????
     d34:	ee 01       	movw	r28, r28
     d36:	08 00       	.word	0x0008	; ????
     d38:	b8 01       	movw	r22, r16
     d3a:	08 00       	.word	0x0008	; ????
     d3c:	0b 02       	muls	r16, r27
     d3e:	08 00       	.word	0x0008	; ????
     d40:	b8 01       	movw	r22, r16
     d42:	08 00       	.word	0x0008	; ????
     d44:	0b 02       	muls	r16, r27
     d46:	08 00       	.word	0x0008	; ????
     d48:	b8 01       	movw	r22, r16
     d4a:	08 00       	.word	0x0008	; ????
     d4c:	4a 01       	movw	r8, r20
     d4e:	08 00       	.word	0x0008	; ????
     d50:	37 01       	movw	r6, r14
     d52:	08 00       	.word	0x0008	; ????
     d54:	26 01       	movw	r4, r12
     d56:	02 00       	.word	0x0002	; ????
     d58:	26 01       	movw	r4, r12
     d5a:	08 00       	.word	0x0008	; ????
     d5c:	5d 01       	movw	r10, r26
     d5e:	08 00       	.word	0x0008	; ????
     d60:	9f 01       	movw	r18, r30
     d62:	08 00       	.word	0x0008	; ????
     d64:	ee 01       	movw	r28, r28
     d66:	02 00       	.word	0x0002	; ????
     d68:	26 01       	movw	r4, r12
     d6a:	08 00       	.word	0x0008	; ????
     d6c:	5d 01       	movw	r10, r26
     d6e:	08 00       	.word	0x0008	; ????
     d70:	9f 01       	movw	r18, r30
     d72:	08 00       	.word	0x0008	; ????
     d74:	b8 01       	movw	r22, r16
     d76:	02 00       	.word	0x0002	; ????
     d78:	06 01       	movw	r0, r12
     d7a:	08 00       	.word	0x0008	; ????
     d7c:	06 01       	movw	r0, r12
     d7e:	08 00       	.word	0x0008	; ????
     d80:	88 01       	movw	r16, r16
     d82:	08 00       	.word	0x0008	; ????
     d84:	5d 01       	movw	r10, r26
     d86:	08 00       	.word	0x0008	; ????
     d88:	4a 01       	movw	r8, r20
     d8a:	08 00       	.word	0x0008	; ????
     d8c:	88 01       	movw	r16, r16
     d8e:	08 00       	.word	0x0008	; ????
     d90:	5d 01       	movw	r10, r26
     d92:	08 00       	.word	0x0008	; ????
     d94:	5d 01       	movw	r10, r26
     d96:	08 00       	.word	0x0008	; ????
     d98:	4a 01       	movw	r8, r20
     d9a:	08 00       	.word	0x0008	; ????
     d9c:	4a 01       	movw	r8, r20
     d9e:	08 00       	.word	0x0008	; ????
     da0:	9f 01       	movw	r18, r30
     da2:	08 00       	.word	0x0008	; ????
     da4:	b8 01       	movw	r22, r16
     da6:	02 00       	.word	0x0002	; ????
     da8:	00 00       	nop
     daa:	08 00       	.word	0x0008	; ????
     dac:	b8 01       	movw	r22, r16
     dae:	08 00       	.word	0x0008	; ????
     db0:	b8 01       	movw	r22, r16
     db2:	08 00       	.word	0x0008	; ????
     db4:	9f 01       	movw	r18, r30
     db6:	08 00       	.word	0x0008	; ????
     db8:	88 01       	movw	r16, r16
     dba:	02 00       	.word	0x0002	; ????
     dbc:	ee 01       	movw	r28, r28
     dbe:	08 00       	.word	0x0008	; ????
     dc0:	b8 01       	movw	r22, r16
     dc2:	08 00       	.word	0x0008	; ????
     dc4:	5d 01       	movw	r10, r26
     dc6:	08 00       	.word	0x0008	; ????
     dc8:	4a 01       	movw	r8, r20
     dca:	02 00       	.word	0x0002	; ????
     dcc:	4a 01       	movw	r8, r20
     dce:	08 00       	.word	0x0008	; ????
     dd0:	88 01       	movw	r16, r16
     dd2:	08 00       	.word	0x0008	; ????
     dd4:	4a 01       	movw	r8, r20
     dd6:	08 00       	.word	0x0008	; ????
     dd8:	26 01       	movw	r4, r12
     dda:	02 00       	.word	0x0002	; ????
     ddc:	26 01       	movw	r4, r12
     dde:	08 00       	.word	0x0008	; ????
     de0:	26 01       	movw	r4, r12
     de2:	08 00       	.word	0x0008	; ????
     de4:	5d 01       	movw	r10, r26
     de6:	08 00       	.word	0x0008	; ????
     de8:	37 01       	movw	r6, r14
     dea:	08 00       	.word	0x0008	; ????
     dec:	4a 01       	movw	r8, r20
     dee:	02 00       	.word	0x0002	; ????
     df0:	00 00       	nop
     df2:	08 00       	.word	0x0008	; ????
     df4:	4a 01       	movw	r8, r20
     df6:	08 00       	.word	0x0008	; ????
     df8:	b8 01       	movw	r22, r16
     dfa:	08 00       	.word	0x0008	; ????
     dfc:	0b 02       	muls	r16, r27
     dfe:	08 00       	.word	0x0008	; ????
     e00:	ee 01       	movw	r28, r28
     e02:	08 00       	.word	0x0008	; ????
     e04:	b8 01       	movw	r22, r16
     e06:	08 00       	.word	0x0008	; ????
     e08:	0b 02       	muls	r16, r27
     e0a:	08 00       	.word	0x0008	; ????
     e0c:	b8 01       	movw	r22, r16
     e0e:	08 00       	.word	0x0008	; ????
     e10:	ee 01       	movw	r28, r28
     e12:	08 00       	.word	0x0008	; ????
     e14:	b8 01       	movw	r22, r16
     e16:	08 00       	.word	0x0008	; ????
     e18:	5d 01       	movw	r10, r26
     e1a:	08 00       	.word	0x0008	; ????
     e1c:	88 01       	movw	r16, r16
     e1e:	08 00       	.word	0x0008	; ????
     e20:	4a 01       	movw	r8, r20
     e22:	02 00       	.word	0x0002	; ????
     e24:	4a 01       	movw	r8, r20
     e26:	08 00       	.word	0x0008	; ????
     e28:	b8 01       	movw	r22, r16
     e2a:	08 00       	.word	0x0008	; ????
     e2c:	0b 02       	muls	r16, r27
     e2e:	08 00       	.word	0x0008	; ????
     e30:	ee 01       	movw	r28, r28
     e32:	08 00       	.word	0x0008	; ????
     e34:	b8 01       	movw	r22, r16
     e36:	08 00       	.word	0x0008	; ????
     e38:	0b 02       	muls	r16, r27
     e3a:	08 00       	.word	0x0008	; ????
     e3c:	b8 01       	movw	r22, r16
     e3e:	08 00       	.word	0x0008	; ????
     e40:	0b 02       	muls	r16, r27
     e42:	08 00       	.word	0x0008	; ????
     e44:	b8 01       	movw	r22, r16
     e46:	08 00       	.word	0x0008	; ????
     e48:	4a 01       	movw	r8, r20
     e4a:	08 00       	.word	0x0008	; ????
     e4c:	37 01       	movw	r6, r14
     e4e:	08 00       	.word	0x0008	; ????
     e50:	26 01       	movw	r4, r12
     e52:	02 00       	.word	0x0002	; ????
     e54:	26 01       	movw	r4, r12
     e56:	08 00       	.word	0x0008	; ????
     e58:	5d 01       	movw	r10, r26
     e5a:	08 00       	.word	0x0008	; ????
     e5c:	9f 01       	movw	r18, r30
     e5e:	08 00       	.word	0x0008	; ????
     e60:	ee 01       	movw	r28, r28
     e62:	02 00       	.word	0x0002	; ????
     e64:	26 01       	movw	r4, r12
     e66:	08 00       	.word	0x0008	; ????
     e68:	5d 01       	movw	r10, r26
     e6a:	08 00       	.word	0x0008	; ????
     e6c:	9f 01       	movw	r18, r30
     e6e:	08 00       	.word	0x0008	; ????
     e70:	b8 01       	movw	r22, r16
     e72:	02 00       	.word	0x0002	; ????
     e74:	06 01       	movw	r0, r12
     e76:	08 00       	.word	0x0008	; ????
     e78:	06 01       	movw	r0, r12
     e7a:	08 00       	.word	0x0008	; ????
     e7c:	88 01       	movw	r16, r16
     e7e:	08 00       	.word	0x0008	; ????
     e80:	5d 01       	movw	r10, r26
     e82:	08 00       	.word	0x0008	; ????
     e84:	4a 01       	movw	r8, r20
     e86:	08 00       	.word	0x0008	; ????
     e88:	88 01       	movw	r16, r16
     e8a:	08 00       	.word	0x0008	; ????
     e8c:	5d 01       	movw	r10, r26
     e8e:	08 00       	.word	0x0008	; ????
     e90:	5d 01       	movw	r10, r26
     e92:	08 00       	.word	0x0008	; ????
     e94:	4a 01       	movw	r8, r20
     e96:	08 00       	.word	0x0008	; ????
     e98:	4a 01       	movw	r8, r20
     e9a:	08 00       	.word	0x0008	; ????
     e9c:	9f 01       	movw	r18, r30
     e9e:	08 00       	.word	0x0008	; ????
     ea0:	b8 01       	movw	r22, r16
     ea2:	02 00       	.word	0x0002	; ????
     ea4:	00 00       	nop
     ea6:	08 00       	.word	0x0008	; ????
     ea8:	b8 01       	movw	r22, r16
     eaa:	08 00       	.word	0x0008	; ????
     eac:	b8 01       	movw	r22, r16
     eae:	08 00       	.word	0x0008	; ????
     eb0:	9f 01       	movw	r18, r30
     eb2:	08 00       	.word	0x0008	; ????
     eb4:	88 01       	movw	r16, r16
     eb6:	02 00       	.word	0x0002	; ????
     eb8:	ee 01       	movw	r28, r28
     eba:	08 00       	.word	0x0008	; ????
     ebc:	b8 01       	movw	r22, r16
     ebe:	08 00       	.word	0x0008	; ????
     ec0:	5d 01       	movw	r10, r26
     ec2:	08 00       	.word	0x0008	; ????
     ec4:	4a 01       	movw	r8, r20
     ec6:	02 00       	.word	0x0002	; ????
     ec8:	4a 01       	movw	r8, r20
     eca:	08 00       	.word	0x0008	; ????
     ecc:	88 01       	movw	r16, r16
     ece:	08 00       	.word	0x0008	; ????
     ed0:	4a 01       	movw	r8, r20
     ed2:	08 00       	.word	0x0008	; ????
     ed4:	26 01       	movw	r4, r12
     ed6:	02 00       	.word	0x0002	; ????
     ed8:	26 01       	movw	r4, r12
     eda:	08 00       	.word	0x0008	; ????
     edc:	26 01       	movw	r4, r12
     ede:	08 00       	.word	0x0008	; ????
     ee0:	5d 01       	movw	r10, r26
     ee2:	08 00       	.word	0x0008	; ????
     ee4:	37 01       	movw	r6, r14
     ee6:	08 00       	.word	0x0008	; ????
     ee8:	4a 01       	movw	r8, r20
     eea:	02 00       	.word	0x0002	; ????
	...

00001008 <__ctors_end>:
    1008:	11 24       	eor	r1, r1
    100a:	1f be       	out	0x3f, r1	; 63
    100c:	cf ef       	ldi	r28, 0xFF	; 255
    100e:	d8 e0       	ldi	r29, 0x08	; 8
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	cd bf       	out	0x3d, r28	; 61

00001014 <__do_copy_data>:
    1014:	11 e0       	ldi	r17, 0x01	; 1
    1016:	a0 e0       	ldi	r26, 0x00	; 0
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	e8 ec       	ldi	r30, 0xC8	; 200
    101c:	f9 e2       	ldi	r31, 0x29	; 41
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <__do_copy_data+0x10>
    1020:	05 90       	lpm	r0, Z+
    1022:	0d 92       	st	X+, r0
    1024:	ac 3c       	cpi	r26, 0xCC	; 204
    1026:	b1 07       	cpc	r27, r17
    1028:	d9 f7       	brne	.-10     	; 0x1020 <__do_copy_data+0xc>

0000102a <__do_clear_bss>:
    102a:	22 e0       	ldi	r18, 0x02	; 2
    102c:	ac ec       	ldi	r26, 0xCC	; 204
    102e:	b1 e0       	ldi	r27, 0x01	; 1
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <.do_clear_bss_start>

00001032 <.do_clear_bss_loop>:
    1032:	1d 92       	st	X+, r1

00001034 <.do_clear_bss_start>:
    1034:	a5 30       	cpi	r26, 0x05	; 5
    1036:	b2 07       	cpc	r27, r18
    1038:	e1 f7       	brne	.-8      	; 0x1032 <.do_clear_bss_loop>
    103a:	0e 94 43 12 	call	0x2486	; 0x2486 <main>
    103e:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <_exit>

00001042 <__bad_interrupt>:
    1042:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001046 <_Z7powerOfii>:
		return true;
	}
	else{
		return false;
	}
}
    1046:	9c 01       	movw	r18, r24
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	61 15       	cp	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	59 f0       	breq	.+22     	; 0x1068 <_Z7powerOfii+0x22>
    1052:	ac 01       	movw	r20, r24
    1054:	42 9f       	mul	r20, r18
    1056:	c0 01       	movw	r24, r0
    1058:	43 9f       	mul	r20, r19
    105a:	90 0d       	add	r25, r0
    105c:	52 9f       	mul	r21, r18
    105e:	90 0d       	add	r25, r0
    1060:	11 24       	eor	r1, r1
    1062:	61 50       	subi	r22, 0x01	; 1
    1064:	71 09       	sbc	r23, r1
    1066:	f2 cf       	rjmp	.-28     	; 0x104c <_Z7powerOfii+0x6>
    1068:	08 95       	ret

0000106a <_Z9ringAlarmv>:
void ringAlarm(){
	LCD_Clear();
    106a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_Z9LCD_Clearv>
	LCD_String("RING!!");
    106e:	8b e8       	ldi	r24, 0x8B	; 139
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	play(1);				//Trigger buzzer. Can be interrupted by the int1 button.
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 bf 0b 	call	0x177e	; 0x177e <_Z4playi>
    107e:	08 95       	ret

00001080 <_Z8setAlarmi>:
	//_delay_ms(2000);
}
void setAlarm(int alarm_time){
	if (alarm_time<2400){
    1080:	80 36       	cpi	r24, 0x60	; 96
    1082:	29 e0       	ldi	r18, 0x09	; 9
    1084:	92 07       	cpc	r25, r18
    1086:	8c f4       	brge	.+34     	; 0x10aa <_Z8setAlarmi+0x2a>
		alarmArray[numberOfAlarms] = alarm_time;
    1088:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <numberOfAlarms>
    108c:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <numberOfAlarms+0x1>
    1090:	f9 01       	movw	r30, r18
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	ed 52       	subi	r30, 0x2D	; 45
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
		numberOfAlarms++;
    109e:	2f 5f       	subi	r18, 0xFF	; 255
    10a0:	3f 4f       	sbci	r19, 0xFF	; 255
    10a2:	30 93 e8 01 	sts	0x01E8, r19	; 0x8001e8 <numberOfAlarms+0x1>
    10a6:	20 93 e7 01 	sts	0x01E7, r18	; 0x8001e7 <numberOfAlarms>
    10aa:	08 95       	ret

000010ac <_Z16updateAlarmArrayi>:
	}
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <numberOfAlarms>
    10b4:	50 91 e8 01 	lds	r21, 0x01E8	; 0x8001e8 <numberOfAlarms+0x1>
    10b8:	24 17       	cp	r18, r20
    10ba:	35 07       	cpc	r19, r21
    10bc:	ac f4       	brge	.+42     	; 0x10e8 <_Z16updateAlarmArrayi+0x3c>
		if (i<removeAlarm){
    10be:	28 17       	cp	r18, r24
    10c0:	39 07       	cpc	r19, r25
    10c2:	7c f0       	brlt	.+30     	; 0x10e2 <_Z16updateAlarmArrayi+0x36>
			alarmArray[i] = alarmArray[i];
		}
		else{
			alarmArray[i] = alarmArray[i+1];
    10c4:	f9 01       	movw	r30, r18
    10c6:	31 96       	adiw	r30, 0x01	; 1
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	ed 52       	subi	r30, 0x2D	; 45
    10ce:	fe 4f       	sbci	r31, 0xFE	; 254
    10d0:	40 81       	ld	r20, Z
    10d2:	51 81       	ldd	r21, Z+1	; 0x01
    10d4:	f9 01       	movw	r30, r18
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	ed 52       	subi	r30, 0x2D	; 45
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	51 83       	std	Z+1, r21	; 0x01
    10e0:	40 83       	st	Z, r20
		alarmArray[numberOfAlarms] = alarm_time;
		numberOfAlarms++;
	}
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	e4 cf       	rjmp	.-56     	; 0x10b0 <_Z16updateAlarmArrayi+0x4>
    10e8:	08 95       	ret

000010ea <_Z10checkAlarmv>:
		else{
			alarmArray[i] = alarmArray[i+1];
		}
	}
}
void checkAlarm(){
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
	if (numberOfAlarms != 0){
    10fa:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <numberOfAlarms>
    10fe:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <numberOfAlarms+0x1>
    1102:	89 2b       	or	r24, r25
    1104:	09 f4       	brne	.+2      	; 0x1108 <_Z10checkAlarmv+0x1e>
    1106:	4e c0       	rjmp	.+156    	; 0x11a4 <_Z10checkAlarmv+0xba>
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
    1108:	0f 2e       	mov	r0, r31
    110a:	fc ec       	ldi	r31, 0xCC	; 204
    110c:	cf 2e       	mov	r12, r31
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	df 2e       	mov	r13, r31
    1112:	f0 2d       	mov	r31, r0
    1114:	0f 2e       	mov	r0, r31
    1116:	fd ec       	ldi	r31, 0xCD	; 205
    1118:	ef 2e       	mov	r14, r31
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	ff 2e       	mov	r15, r31
    111e:	f0 2d       	mov	r31, r0
    1120:	0e ec       	ldi	r16, 0xCE	; 206
    1122:	11 e0       	ldi	r17, 0x01	; 1
    1124:	2f ec       	ldi	r18, 0xCF	; 207
    1126:	31 e0       	ldi	r19, 0x01	; 1
    1128:	40 ed       	ldi	r20, 0xD0	; 208
    112a:	51 e0       	ldi	r21, 0x01	; 1
    112c:	61 ed       	ldi	r22, 0xD1	; 209
    112e:	71 e0       	ldi	r23, 0x01	; 1
    1130:	82 ed       	ldi	r24, 0xD2	; 210
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 2c 11 	call	0x2258	; 0x2258 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
		for (int i = 0; i <= numberOfAlarms;i++){
    1138:	c0 e0       	ldi	r28, 0x00	; 0
    113a:	d0 e0       	ldi	r29, 0x00	; 0
    113c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <numberOfAlarms>
    1140:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <numberOfAlarms+0x1>
    1144:	8c 17       	cp	r24, r28
    1146:	9d 07       	cpc	r25, r29
    1148:	6c f1       	brlt	.+90     	; 0x11a4 <_Z10checkAlarmv+0xba>
			if (alarmArray[i]/100 == hour && alarmArray[i]%100 == minute){
    114a:	fe 01       	movw	r30, r28
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	ed 52       	subi	r30, 0x2D	; 45
    1152:	fe 4f       	sbci	r31, 0xFE	; 254
    1154:	20 81       	ld	r18, Z
    1156:	31 81       	ldd	r19, Z+1	; 0x01
    1158:	c9 01       	movw	r24, r18
    115a:	64 e6       	ldi	r22, 0x64	; 100
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    1162:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hour>
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	68 17       	cp	r22, r24
    116a:	79 07       	cpc	r23, r25
    116c:	c9 f4       	brne	.+50     	; 0x11a0 <_Z10checkAlarmv+0xb6>
    116e:	c9 01       	movw	r24, r18
    1170:	64 e6       	ldi	r22, 0x64	; 100
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    1178:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <minute>
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	82 17       	cp	r24, r18
    1180:	93 07       	cpc	r25, r19
    1182:	71 f4       	brne	.+28     	; 0x11a0 <_Z10checkAlarmv+0xb6>
				ringAlarm();
    1184:	0e 94 35 08 	call	0x106a	; 0x106a <_Z9ringAlarmv>
				updateAlarmArray(i);
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 56 08 	call	0x10ac	; 0x10ac <_Z16updateAlarmArrayi>
				numberOfAlarms--;
    118e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <numberOfAlarms>
    1192:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <numberOfAlarms+0x1>
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <numberOfAlarms+0x1>
    119c:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <numberOfAlarms>
	}
}
void checkAlarm(){
	if (numberOfAlarms != 0){
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
		for (int i = 0; i <= numberOfAlarms;i++){
    11a0:	21 96       	adiw	r28, 0x01	; 1
    11a2:	cc cf       	rjmp	.-104    	; 0x113c <_Z10checkAlarmv+0x52>
				numberOfAlarms--;
			}
		}
		
	}
}
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	08 95       	ret

000011b6 <_Z6getDayiii>:
	int s = clockTime[5];
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
	int days = 0;
	for (int i = 1;i<=y;i++){
    11bc:	21 e0       	ldi	r18, 0x01	; 1
    11be:	30 e0       	ldi	r19, 0x00	; 0
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
    11c0:	e0 e0       	ldi	r30, 0x00	; 0
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 1;i<=y;i++){
    11c4:	c2 17       	cp	r28, r18
    11c6:	d3 07       	cpc	r29, r19
    11c8:	6c f0       	brlt	.+26     	; 0x11e4 <_Z6getDayiii+0x2e>
		if (i%4 == 0){
    11ca:	c9 01       	movw	r24, r18
    11cc:	83 70       	andi	r24, 0x03	; 3
    11ce:	99 27       	eor	r25, r25
    11d0:	89 2b       	or	r24, r25
    11d2:	19 f4       	brne	.+6      	; 0x11da <_Z6getDayiii+0x24>
			days+= 366;
    11d4:	e2 59       	subi	r30, 0x92	; 146
    11d6:	fe 4f       	sbci	r31, 0xFE	; 254
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <_Z6getDayiii+0x28>
		}
		else{
			days+= 365;
    11da:	e3 59       	subi	r30, 0x93	; 147
    11dc:	fe 4f       	sbci	r31, 0xFE	; 254
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
	for (int i = 1;i<=y;i++){
    11de:	2f 5f       	subi	r18, 0xFF	; 255
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	f0 cf       	rjmp	.-32     	; 0x11c4 <_Z6getDayiii+0xe>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
    11e8:	db 01       	movw	r26, r22
    11ea:	11 97       	sbiw	r26, 0x01	; 1
    11ec:	2a 17       	cp	r18, r26
    11ee:	3b 07       	cpc	r19, r27
    11f0:	3c f5       	brge	.+78     	; 0x1240 <_Z6getDayiii+0x8a>
		if ((y%4==0) & (j == 1)){
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	de 01       	movw	r26, r28
    11f6:	a3 70       	andi	r26, 0x03	; 3
    11f8:	bb 27       	eor	r27, r27
    11fa:	ab 2b       	or	r26, r27
    11fc:	09 f0       	breq	.+2      	; 0x1200 <_Z6getDayiii+0x4a>
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	99 23       	and	r25, r25
    1202:	91 f0       	breq	.+36     	; 0x1228 <_Z6getDayiii+0x72>
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	21 30       	cpi	r18, 0x01	; 1
    1208:	31 05       	cpc	r19, r1
    120a:	09 f0       	breq	.+2      	; 0x120e <_Z6getDayiii+0x58>
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	99 23       	and	r25, r25
    1210:	59 f0       	breq	.+22     	; 0x1228 <_Z6getDayiii+0x72>
			days+=monthsDays[j];
    1212:	d9 01       	movw	r26, r18
    1214:	aa 0f       	add	r26, r26
    1216:	bb 1f       	adc	r27, r27
    1218:	a0 50       	subi	r26, 0x00	; 0
    121a:	bf 4f       	sbci	r27, 0xFF	; 255
    121c:	8d 91       	ld	r24, X+
    121e:	9c 91       	ld	r25, X
    1220:	e8 0f       	add	r30, r24
    1222:	f9 1f       	adc	r31, r25
			days+=1;
    1224:	31 96       	adiw	r30, 0x01	; 1
    1226:	09 c0       	rjmp	.+18     	; 0x123a <_Z6getDayiii+0x84>
		}
		else{
			days +=monthsDays[j];
    1228:	d9 01       	movw	r26, r18
    122a:	aa 0f       	add	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	a0 50       	subi	r26, 0x00	; 0
    1230:	bf 4f       	sbci	r27, 0xFF	; 255
    1232:	8d 91       	ld	r24, X+
    1234:	9c 91       	ld	r25, X
    1236:	e8 0f       	add	r30, r24
    1238:	f9 1f       	adc	r31, r25
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
    123a:	2f 5f       	subi	r18, 0xFF	; 255
    123c:	3f 4f       	sbci	r19, 0xFF	; 255
    123e:	d4 cf       	rjmp	.-88     	; 0x11e8 <_Z6getDayiii+0x32>
		}
		else{
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
    1240:	4e 0f       	add	r20, r30
    1242:	5f 1f       	adc	r21, r31
    1244:	ca 01       	movw	r24, r20
    1246:	05 96       	adiw	r24, 0x05	; 5
    1248:	67 e0       	ldi	r22, 0x07	; 7
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	08 95       	ret

00001256 <_Z12setClockTimePi>:
			}
		}
		
	}
}
void setClockTime(int clockTime[6]){
    1256:	6f 92       	push	r6
    1258:	7f 92       	push	r7
    125a:	8f 92       	push	r8
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
	int y = clockTime[0];
    1274:	88 80       	ld	r8, Y
    1276:	99 80       	ldd	r9, Y+1	; 0x01
	int m = clockTime[1];
    1278:	aa 80       	ldd	r10, Y+2	; 0x02
    127a:	bb 80       	ldd	r11, Y+3	; 0x03
	int d = clockTime[2];
    127c:	6c 80       	ldd	r6, Y+4	; 0x04
    127e:	7d 80       	ldd	r7, Y+5	; 0x05
	int D = getDay(y,m,d);
    1280:	a3 01       	movw	r20, r6
    1282:	b5 01       	movw	r22, r10
    1284:	c4 01       	movw	r24, r8
    1286:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z6getDayiii>
	int h = clockTime[3];
    128a:	0e 81       	ldd	r16, Y+6	; 0x06
    128c:	1f 81       	ldd	r17, Y+7	; 0x07
	int M = clockTime[4];
    128e:	e8 84       	ldd	r14, Y+8	; 0x08
    1290:	f9 84       	ldd	r15, Y+9	; 0x09
	int s = clockTime[5];
    1292:	ca 84       	ldd	r12, Y+10	; 0x0a
    1294:	db 84       	ldd	r13, Y+11	; 0x0b
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
    1296:	94 01       	movw	r18, r8
    1298:	21 50       	subi	r18, 0x01	; 1
    129a:	31 09       	sbc	r19, r1
    129c:	c1 e0       	ldi	r28, 0x01	; 1
    129e:	22 36       	cpi	r18, 0x62	; 98
    12a0:	31 05       	cpc	r19, r1
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <_Z12setClockTimePi+0x50>
    12a4:	c0 e0       	ldi	r28, 0x00	; 0
    12a6:	21 e0       	ldi	r18, 0x01	; 1
    12a8:	1a 14       	cp	r1, r10
    12aa:	1b 04       	cpc	r1, r11
    12ac:	0c f0       	brlt	.+2      	; 0x12b0 <_Z12setClockTimePi+0x5a>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	9d e0       	ldi	r25, 0x0D	; 13
    12b4:	a9 16       	cp	r10, r25
    12b6:	b1 04       	cpc	r11, r1
    12b8:	0c f0       	brlt	.+2      	; 0x12bc <_Z12setClockTimePi+0x66>
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	71 e0       	ldi	r23, 0x01	; 1
    12be:	16 14       	cp	r1, r6
    12c0:	17 04       	cpc	r1, r7
    12c2:	0c f0       	brlt	.+2      	; 0x12c6 <_Z12setClockTimePi+0x70>
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	51 e0       	ldi	r21, 0x01	; 1
    12c8:	90 e2       	ldi	r25, 0x20	; 32
    12ca:	69 16       	cp	r6, r25
    12cc:	71 04       	cpc	r7, r1
    12ce:	0c f0       	brlt	.+2      	; 0x12d2 <_Z12setClockTimePi+0x7c>
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	31 2f       	mov	r19, r17
    12d4:	30 95       	com	r19
    12d6:	33 1f       	adc	r19, r19
    12d8:	33 27       	eor	r19, r19
    12da:	33 1f       	adc	r19, r19
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	08 31       	cpi	r16, 0x18	; 24
    12e0:	11 05       	cpc	r17, r1
    12e2:	0c f0       	brlt	.+2      	; 0x12e6 <_Z12setClockTimePi+0x90>
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	af 2d       	mov	r26, r15
    12e8:	a0 95       	com	r26
    12ea:	aa 1f       	adc	r26, r26
    12ec:	aa 27       	eor	r26, r26
    12ee:	aa 1f       	adc	r26, r26
    12f0:	b1 e0       	ldi	r27, 0x01	; 1
    12f2:	9c e3       	ldi	r25, 0x3C	; 60
    12f4:	e9 16       	cp	r14, r25
    12f6:	f1 04       	cpc	r15, r1
    12f8:	0c f0       	brlt	.+2      	; 0x12fc <_Z12setClockTimePi+0xa6>
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	9d 2d       	mov	r25, r13
    12fe:	90 95       	com	r25
    1300:	e9 2f       	mov	r30, r25
    1302:	ee 1f       	adc	r30, r30
    1304:	ee 27       	eor	r30, r30
    1306:	ee 1f       	adc	r30, r30
    1308:	f1 e0       	ldi	r31, 0x01	; 1
    130a:	9c e3       	ldi	r25, 0x3C	; 60
    130c:	c9 16       	cp	r12, r25
    130e:	d1 04       	cpc	r13, r1
    1310:	0c f0       	brlt	.+2      	; 0x1314 <_Z12setClockTimePi+0xbe>
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	2c 23       	and	r18, r28
    1316:	62 23       	and	r22, r18
    1318:	67 23       	and	r22, r23
    131a:	56 23       	and	r21, r22
    131c:	95 2f       	mov	r25, r21
    131e:	93 23       	and	r25, r19
    1320:	49 23       	and	r20, r25
    1322:	4a 23       	and	r20, r26
    1324:	94 2f       	mov	r25, r20
    1326:	9b 23       	and	r25, r27
    1328:	9e 23       	and	r25, r30
    132a:	41 f0       	breq	.+16     	; 0x133c <_Z12setClockTimePi+0xe6>
    132c:	ff 23       	and	r31, r31
    132e:	31 f0       	breq	.+12     	; 0x133c <_Z12setClockTimePi+0xe6>
		ds1307_setdate(y, m, d, D, h, M, s);
    1330:	28 2f       	mov	r18, r24
    1332:	46 2d       	mov	r20, r6
    1334:	6a 2d       	mov	r22, r10
    1336:	88 2d       	mov	r24, r8
    1338:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_Z14ds1307_setdatehhhhhhh>
	}
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	9f 90       	pop	r9
    1352:	8f 90       	pop	r8
    1354:	7f 90       	pop	r7
    1356:	6f 90       	pop	r6
    1358:	08 95       	ret

0000135a <_Z11displayZeroh>:
		}
	}
	return (days+d+5)%7;
}
void displayZero(uint8_t digit){
	if (digit<10){
    135a:	8a 30       	cpi	r24, 0x0A	; 10
    135c:	20 f4       	brcc	.+8      	; 0x1366 <_Z11displayZeroh+0xc>
		LCD_String("0");
    135e:	86 e9       	ldi	r24, 0x96	; 150
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
    1366:	08 95       	ret

00001368 <_Z11displayTimev>:
	}
}
void displayTime(){
    1368:	cf 92       	push	r12
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	ec 97       	sbiw	r28, 0x3c	; 60
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
	ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
    1388:	0f 2e       	mov	r0, r31
    138a:	fc ec       	ldi	r31, 0xCC	; 204
    138c:	cf 2e       	mov	r12, r31
    138e:	f1 e0       	ldi	r31, 0x01	; 1
    1390:	df 2e       	mov	r13, r31
    1392:	f0 2d       	mov	r31, r0
    1394:	0f 2e       	mov	r0, r31
    1396:	fd ec       	ldi	r31, 0xCD	; 205
    1398:	ef 2e       	mov	r14, r31
    139a:	f1 e0       	ldi	r31, 0x01	; 1
    139c:	ff 2e       	mov	r15, r31
    139e:	f0 2d       	mov	r31, r0
    13a0:	0e ec       	ldi	r16, 0xCE	; 206
    13a2:	11 e0       	ldi	r17, 0x01	; 1
    13a4:	2f ec       	ldi	r18, 0xCF	; 207
    13a6:	31 e0       	ldi	r19, 0x01	; 1
    13a8:	40 ed       	ldi	r20, 0xD0	; 208
    13aa:	51 e0       	ldi	r21, 0x01	; 1
    13ac:	61 ed       	ldi	r22, 0xD1	; 209
    13ae:	71 e0       	ldi	r23, 0x01	; 1
    13b0:	82 ed       	ldi	r24, 0xD2	; 210
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 2c 11 	call	0x2258	; 0x2258 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
	char secondS[10];char minuteS[10];char hourS[10];char yearS[10];char monthS[10];char dayS[10];
	itoa(second,secondS,10);itoa(minute,minuteS,10);itoa(hour,hourS,10);itoa(year,yearS,10);itoa(month,monthS,10);itoa(day,dayS,10);
    13b8:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    13bc:	4a e0       	ldi	r20, 0x0A	; 10
    13be:	be 01       	movw	r22, r28
    13c0:	6f 5f       	subi	r22, 0xFF	; 255
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 ad 14 	call	0x295a	; 0x295a <__itoa_ncheck>
    13ca:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <minute>
    13ce:	4a e0       	ldi	r20, 0x0A	; 10
    13d0:	be 01       	movw	r22, r28
    13d2:	65 5f       	subi	r22, 0xF5	; 245
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 ad 14 	call	0x295a	; 0x295a <__itoa_ncheck>
    13dc:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hour>
    13e0:	4a e0       	ldi	r20, 0x0A	; 10
    13e2:	be 01       	movw	r22, r28
    13e4:	6b 5e       	subi	r22, 0xEB	; 235
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 ad 14 	call	0x295a	; 0x295a <__itoa_ncheck>
    13ee:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <year>
    13f2:	4a e0       	ldi	r20, 0x0A	; 10
    13f4:	be 01       	movw	r22, r28
    13f6:	61 5e       	subi	r22, 0xE1	; 225
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 ad 14 	call	0x295a	; 0x295a <__itoa_ncheck>
    1400:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <month>
    1404:	4a e0       	ldi	r20, 0x0A	; 10
    1406:	be 01       	movw	r22, r28
    1408:	67 5d       	subi	r22, 0xD7	; 215
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 ad 14 	call	0x295a	; 0x295a <__itoa_ncheck>
    1412:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <day>
    1416:	4a e0       	ldi	r20, 0x0A	; 10
    1418:	be 01       	movw	r22, r28
    141a:	6d 5c       	subi	r22, 0xCD	; 205
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 ad 14 	call	0x295a	; 0x295a <__itoa_ncheck>
	LCD_Home(0);LCD_String("   20");
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
    142c:	82 e9       	ldi	r24, 0x92	; 146
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	displayZero(year);LCD_String(yearS);LCD_String("-");
    1434:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <year>
    1438:	0e 94 ad 09 	call	0x135a	; 0x135a <_Z11displayZeroh>
    143c:	ce 01       	movw	r24, r28
    143e:	4f 96       	adiw	r24, 0x1f	; 31
    1440:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
    1444:	88 e9       	ldi	r24, 0x98	; 152
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	displayZero(month);LCD_String(monthS);LCD_String("-");
    144c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <month>
    1450:	0e 94 ad 09 	call	0x135a	; 0x135a <_Z11displayZeroh>
    1454:	ce 01       	movw	r24, r28
    1456:	89 96       	adiw	r24, 0x29	; 41
    1458:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
    145c:	88 e9       	ldi	r24, 0x98	; 152
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	displayZero(day);LCD_String(dayS);
    1464:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <day>
    1468:	0e 94 ad 09 	call	0x135a	; 0x135a <_Z11displayZeroh>
    146c:	ce 01       	movw	r24, r28
    146e:	c3 96       	adiw	r24, 0x33	; 51
    1470:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	LCD_Home(1);LCD_String("    ");
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
    147c:	8a e9       	ldi	r24, 0x9A	; 154
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	displayZero(hour);
    1484:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <hour>
    1488:	0e 94 ad 09 	call	0x135a	; 0x135a <_Z11displayZeroh>
	LCD_String(hourS);
    148c:	ce 01       	movw	r24, r28
    148e:	45 96       	adiw	r24, 0x15	; 21
    1490:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	LCD_String(":");
    1494:	8f e9       	ldi	r24, 0x9F	; 159
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	displayZero(minute);
    149c:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <minute>
    14a0:	0e 94 ad 09 	call	0x135a	; 0x135a <_Z11displayZeroh>
	LCD_String(minuteS);
    14a4:	ce 01       	movw	r24, r28
    14a6:	0b 96       	adiw	r24, 0x0b	; 11
    14a8:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	LCD_String(":");
    14ac:	8f e9       	ldi	r24, 0x9F	; 159
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	displayZero(second);
    14b4:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    14b8:	0e 94 ad 09 	call	0x135a	; 0x135a <_Z11displayZeroh>
	LCD_String(secondS);
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	//_delay_ms(1);

    14c4:	ec 96       	adiw	r28, 0x3c	; 60
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	cf 90       	pop	r12
    14e0:	08 95       	ret

000014e2 <_Z11init_buzzerv>:
 
 volatile int sp = 1;    // This is a reference to stop the alarm with a button press
 
 void init_buzzer(){
	 // pins ports declaration
	 buzzer_DDR |= _BV(buzzer_PIN) ;			// make buzzer pin output
    14e2:	8a b1       	in	r24, 0x0a	; 10
    14e4:	84 60       	ori	r24, 0x04	; 4
    14e6:	8a b9       	out	0x0a, r24	; 10
	 	
	 EICRA |= _BV(ISC11) | _BV(ISC10);		  // set rising edge method
    14e8:	e9 e6       	ldi	r30, 0x69	; 105
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8c 60       	ori	r24, 0x0C	; 12
    14f0:	80 83       	st	Z, r24
	 EIMSK |= _BV(INT1);					 // enable pin PD1 External interrupt
    14f2:	8d b3       	in	r24, 0x1d	; 29
    14f4:	82 60       	ori	r24, 0x02	; 2
    14f6:	8d bb       	out	0x1d, r24	; 29
	 	
	 sei();								   //  this Enables the Global Interrupt Enable (I-bit) in the Status Register (SREG)
    14f8:	78 94       	sei
    14fa:	08 95       	ret

000014fc <_Z9Play_Noteff>:
	 
 }
 
 void Play_Note(float freq,float dur){
    14fc:	4f 92       	push	r4
    14fe:	5f 92       	push	r5
    1500:	6f 92       	push	r6
    1502:	7f 92       	push	r7
    1504:	8f 92       	push	r8
    1506:	9f 92       	push	r9
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	00 d0       	rcall	.+0      	; 0x151a <_Z9Play_Noteff+0x1e>
    151a:	00 d0       	rcall	.+0      	; 0x151c <_Z9Play_Noteff+0x20>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	6b 01       	movw	r12, r22
    1522:	7c 01       	movw	r14, r24
    1524:	49 01       	movw	r8, r18
    1526:	5a 01       	movw	r10, r20
	 // variables
	 long int i,cycles;
	 float half_period,period;
	 
	 if (freq != 0){
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	0e 94 b4 12 	call	0x2568	; 0x2568 <__cmpsf2>
    1532:	88 23       	and	r24, r24
    1534:	09 f4       	brne	.+2      	; 0x1538 <_Z9Play_Noteff+0x3c>
    1536:	ad c0       	rjmp	.+346    	; 0x1692 <_Z9Play_Noteff+0x196>
		 period=(1/freq)*1000;
    1538:	a7 01       	movw	r20, r14
    153a:	96 01       	movw	r18, r12
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	80 e8       	ldi	r24, 0x80	; 128
    1542:	9f e3       	ldi	r25, 0x3F	; 63
    1544:	0e 94 b9 12 	call	0x2572	; 0x2572 <__divsf3>
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	4a e7       	ldi	r20, 0x7A	; 122
    154e:	54 e4       	ldi	r21, 0x44	; 68
    1550:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    1554:	6b 01       	movw	r12, r22
    1556:	7c 01       	movw	r14, r24
		 cycles=dur/period;
    1558:	9b 01       	movw	r18, r22
    155a:	ac 01       	movw	r20, r24
    155c:	c5 01       	movw	r24, r10
    155e:	b4 01       	movw	r22, r8
    1560:	0e 94 b9 12 	call	0x2572	; 0x2572 <__divsf3>
    1564:	0e 94 2b 13 	call	0x2656	; 0x2656 <__fixsfsi>
    1568:	2b 01       	movw	r4, r22
    156a:	3c 01       	movw	r6, r24
		 half_period = period/2;
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	5f e3       	ldi	r21, 0x3F	; 63
    1574:	c7 01       	movw	r24, r14
    1576:	b6 01       	movw	r22, r12
    1578:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    157c:	69 83       	std	Y+1, r22	; 0x01
    157e:	7a 83       	std	Y+2, r23	; 0x02
    1580:	8b 83       	std	Y+3, r24	; 0x03
    1582:	9c 83       	std	Y+4, r25	; 0x04

		 for (i=0;i<cycles;i++)
    1584:	81 2c       	mov	r8, r1
    1586:	91 2c       	mov	r9, r1
    1588:	54 01       	movw	r10, r8
    158a:	84 14       	cp	r8, r4
    158c:	95 04       	cpc	r9, r5
    158e:	a6 04       	cpc	r10, r6
    1590:	b7 04       	cpc	r11, r7
    1592:	0c f0       	brlt	.+2      	; 0x1596 <_Z9Play_Noteff+0x9a>
    1594:	b8 c0       	rjmp	.+368    	; 0x1706 <_Z9Play_Noteff+0x20a>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a e7       	ldi	r20, 0x7A	; 122
    159c:	53 e4       	ldi	r21, 0x43	; 67
    159e:	69 81       	ldd	r22, Y+1	; 0x01
    15a0:	7a 81       	ldd	r23, Y+2	; 0x02
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    15aa:	6b 01       	movw	r12, r22
    15ac:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 e8       	ldi	r20, 0x80	; 128
    15b4:	5f e3       	ldi	r21, 0x3F	; 63
    15b6:	0e 94 b4 12 	call	0x2568	; 0x2568 <__cmpsf2>
    15ba:	88 23       	and	r24, r24
    15bc:	2c f1       	brlt	.+74     	; 0x1608 <_Z9Play_Noteff+0x10c>
		__ticks = 1;
	else if (__tmp > 65535)
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	c7 01       	movw	r24, r14
    15c8:	b6 01       	movw	r22, r12
    15ca:	0e 94 13 14 	call	0x2826	; 0x2826 <__gesf2>
    15ce:	18 16       	cp	r1, r24
    15d0:	b4 f4       	brge	.+44     	; 0x15fe <_Z9Play_Noteff+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e2       	ldi	r20, 0x20	; 32
    15d8:	51 e4       	ldi	r21, 0x41	; 65
    15da:	69 81       	ldd	r22, Y+1	; 0x01
    15dc:	7a 81       	ldd	r23, Y+2	; 0x02
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    15e6:	0e 94 32 13 	call	0x2664	; 0x2664 <__fixunssfsi>
		while(__ticks)
    15ea:	61 15       	cp	r22, r1
    15ec:	71 05       	cpc	r23, r1
    15ee:	89 f0       	breq	.+34     	; 0x1612 <_Z9Play_Noteff+0x116>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    15f0:	89 e1       	ldi	r24, 0x19	; 25
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <_Z9Play_Noteff+0xf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	61 50       	subi	r22, 0x01	; 1
    15fa:	71 09       	sbc	r23, r1
    15fc:	f6 cf       	rjmp	.-20     	; 0x15ea <_Z9Play_Noteff+0xee>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fe:	c7 01       	movw	r24, r14
    1600:	b6 01       	movw	r22, r12
    1602:	0e 94 32 13 	call	0x2664	; 0x2664 <__fixunssfsi>
    1606:	02 c0       	rjmp	.+4      	; 0x160c <_Z9Play_Noteff+0x110>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	cb 01       	movw	r24, r22
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <_Z9Play_Noteff+0x112>
		 {
			 //50% duty cycle
			 _delay_ms(half_period);
			 buzzer_PORT |= _BV(buzzer_PIN);
    1612:	8b b1       	in	r24, 0x0b	; 11
    1614:	84 60       	ori	r24, 0x04	; 4
    1616:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	c7 01       	movw	r24, r14
    1622:	b6 01       	movw	r22, r12
    1624:	0e 94 b4 12 	call	0x2568	; 0x2568 <__cmpsf2>
    1628:	88 23       	and	r24, r24
    162a:	2c f1       	brlt	.+74     	; 0x1676 <_Z9Play_Noteff+0x17a>
		__ticks = 1;
	else if (__tmp > 65535)
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	57 e4       	ldi	r21, 0x47	; 71
    1634:	c7 01       	movw	r24, r14
    1636:	b6 01       	movw	r22, r12
    1638:	0e 94 13 14 	call	0x2826	; 0x2826 <__gesf2>
    163c:	18 16       	cp	r1, r24
    163e:	b4 f4       	brge	.+44     	; 0x166c <_Z9Play_Noteff+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	69 81       	ldd	r22, Y+1	; 0x01
    164a:	7a 81       	ldd	r23, Y+2	; 0x02
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    1654:	0e 94 32 13 	call	0x2664	; 0x2664 <__fixunssfsi>
		while(__ticks)
    1658:	61 15       	cp	r22, r1
    165a:	71 05       	cpc	r23, r1
    165c:	89 f0       	breq	.+34     	; 0x1680 <_Z9Play_Noteff+0x184>
    165e:	89 e1       	ldi	r24, 0x19	; 25
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <_Z9Play_Noteff+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1666:	61 50       	subi	r22, 0x01	; 1
    1668:	71 09       	sbc	r23, r1
    166a:	f6 cf       	rjmp	.-20     	; 0x1658 <_Z9Play_Noteff+0x15c>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166c:	c7 01       	movw	r24, r14
    166e:	b6 01       	movw	r22, r12
    1670:	0e 94 32 13 	call	0x2664	; 0x2664 <__fixunssfsi>
    1674:	02 c0       	rjmp	.+4      	; 0x167a <_Z9Play_Noteff+0x17e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	cb 01       	movw	r24, r22
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <_Z9Play_Noteff+0x180>
			 _delay_ms(half_period);
			 buzzer_PORT &= ~ _BV(buzzer_PIN);
    1680:	8b b1       	in	r24, 0x0b	; 11
    1682:	8b 7f       	andi	r24, 0xFB	; 251
    1684:	8b b9       	out	0x0b, r24	; 11
	 if (freq != 0){
		 period=(1/freq)*1000;
		 cycles=dur/period;
		 half_period = period/2;

		 for (i=0;i<cycles;i++)
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	88 1a       	sub	r8, r24
    168a:	98 0a       	sbc	r9, r24
    168c:	a8 0a       	sbc	r10, r24
    168e:	b8 0a       	sbc	r11, r24
    1690:	7c cf       	rjmp	.-264    	; 0x158a <_Z9Play_Noteff+0x8e>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a e7       	ldi	r20, 0x7A	; 122
    1698:	53 e4       	ldi	r21, 0x43	; 67
    169a:	c5 01       	movw	r24, r10
    169c:	b4 01       	movw	r22, r8
    169e:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    16a2:	6b 01       	movw	r12, r22
    16a4:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 b4 12 	call	0x2568	; 0x2568 <__cmpsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	1c f1       	brlt	.+70     	; 0x16fc <_Z9Play_Noteff+0x200>
		__ticks = 1;
	else if (__tmp > 65535)
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	4f e7       	ldi	r20, 0x7F	; 127
    16bc:	57 e4       	ldi	r21, 0x47	; 71
    16be:	c7 01       	movw	r24, r14
    16c0:	b6 01       	movw	r22, r12
    16c2:	0e 94 13 14 	call	0x2826	; 0x2826 <__gesf2>
    16c6:	18 16       	cp	r1, r24
    16c8:	a4 f4       	brge	.+40     	; 0x16f2 <_Z9Play_Noteff+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	c5 01       	movw	r24, r10
    16d4:	b4 01       	movw	r22, r8
    16d6:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    16da:	0e 94 32 13 	call	0x2664	; 0x2664 <__fixunssfsi>
		while(__ticks)
    16de:	61 15       	cp	r22, r1
    16e0:	71 05       	cpc	r23, r1
    16e2:	89 f0       	breq	.+34     	; 0x1706 <_Z9Play_Noteff+0x20a>
    16e4:	89 e1       	ldi	r24, 0x19	; 25
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <_Z9Play_Noteff+0x1ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ec:	61 50       	subi	r22, 0x01	; 1
    16ee:	71 09       	sbc	r23, r1
    16f0:	f6 cf       	rjmp	.-20     	; 0x16de <_Z9Play_Noteff+0x1e2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	c7 01       	movw	r24, r14
    16f4:	b6 01       	movw	r22, r12
    16f6:	0e 94 32 13 	call	0x2664	; 0x2664 <__fixunssfsi>
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <_Z9Play_Noteff+0x204>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	cb 01       	movw	r24, r22
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <_Z9Play_Noteff+0x206>
	 }
	 else {
		 _delay_ms(dur);   // rest
	 }
	 return;
 }
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	7f 90       	pop	r7
    1724:	6f 90       	pop	r6
    1726:	5f 90       	pop	r5
    1728:	4f 90       	pop	r4
    172a:	08 95       	ret

0000172c <__vector_2>:
 
 /** External interrupt for INT0 (PD2) pin ISR function
 We will use this to stop currently playing melody **/

 ISR (INT1_vect)          //External interrupt Stop button ISR
 {
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	0f 92       	push	r0
    1734:	11 24       	eor	r1, r1
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
	 sp=0;
    173a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <sp+0x1>
    173e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <sp>
    1742:	88 ea       	ldi	r24, 0xA8	; 168
    1744:	91 e6       	ldi	r25, 0x61	; 97
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <__vector_2+0x1a>
	 _delay_ms(100);
 }
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	0f 90       	pop	r0
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	0f 90       	pop	r0
    1754:	1f 90       	pop	r1
    1756:	18 95       	reti

00001758 <_Z11tempochoosei>:

int tempochoose(int number){
	if (number==0){return tempos[0];}
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	41 f0       	breq	.+16     	; 0x176c <_Z11tempochoosei+0x14>
	else if (number==1){return tempos[1];}
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	41 f0       	breq	.+16     	; 0x1772 <_Z11tempochoosei+0x1a>
	else if (number==2){return tempos[2];}
    1762:	02 97       	sbiw	r24, 0x02	; 2
    1764:	49 f4       	brne	.+18     	; 0x1778 <_Z11tempochoosei+0x20>
    1766:	85 e5       	ldi	r24, 0x55	; 85
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	08 95       	ret
	 sp=0;
	 _delay_ms(100);
 }

int tempochoose(int number){
	if (number==0){return tempos[0];}
    176c:	81 ee       	ldi	r24, 0xE1	; 225
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	08 95       	ret
	else if (number==1){return tempos[1];}
    1772:	88 e7       	ldi	r24, 0x78	; 120
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	08 95       	ret
	else if (number==2){return tempos[2];}
	else{return tempos[3];}
    1778:	88 e7       	ldi	r24, 0x78	; 120
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	08 95       	ret

0000177e <_Z4playi>:
		 _delay_ms(dur);   // rest
	 }
	 return;
 }
 
 void play(int number){
    177e:	2f 92       	push	r2
    1780:	3f 92       	push	r3
    1782:	4f 92       	push	r4
    1784:	5f 92       	push	r5
    1786:	6f 92       	push	r6
    1788:	7f 92       	push	r7
    178a:	8f 92       	push	r8
    178c:	9f 92       	push	r9
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <_Z4playi+0x26>
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <_Z4playi+0x28>
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	1c 01       	movw	r2, r24
	 int tempo=tempochoose(number); // choose the right tempo from the list using the function
    17ac:	0e 94 ac 0b 	call	0x1758	; 0x1758 <_Z11tempochoosei>
	 int notes = sizeof(melody0[number])/sizeof(melody0[number][0])/2;
	 int wholenote = (60000 * 2.5) / tempo;
    17b0:	bc 01       	movw	r22, r24
    17b2:	99 0f       	add	r25, r25
    17b4:	88 0b       	sbc	r24, r24
    17b6:	99 0b       	sbc	r25, r25
    17b8:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__floatsisf>
    17bc:	9b 01       	movw	r18, r22
    17be:	ac 01       	movw	r20, r24
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	7c e7       	ldi	r23, 0x7C	; 124
    17c4:	82 e1       	ldi	r24, 0x12	; 18
    17c6:	98 e4       	ldi	r25, 0x48	; 72
    17c8:	0e 94 b9 12 	call	0x2572	; 0x2572 <__divsf3>
    17cc:	0e 94 2b 13 	call	0x2656	; 0x2656 <__fixsfsi>
    17d0:	7a 83       	std	Y+2, r23	; 0x02
    17d2:	69 83       	std	Y+1, r22	; 0x01
	 int divider = 0;
	 int noteDuration = 0;
	 
	 for (int thisNote = 0; thisNote < notes *2 ; thisNote = thisNote + 2) {
    17d4:	1c 82       	std	Y+4, r1	; 0x04
    17d6:	1b 82       	std	Y+3, r1	; 0x03
 void play(int number){
	 int tempo=tempochoose(number); // choose the right tempo from the list using the function
	 int notes = sizeof(melody0[number])/sizeof(melody0[number][0])/2;
	 int wholenote = (60000 * 2.5) / tempo;
	 int divider = 0;
	 int noteDuration = 0;
    17d8:	e1 2c       	mov	r14, r1
    17da:	f1 2c       	mov	r15, r1
	 
	 for (int thisNote = 0; thisNote < notes *2 ; thisNote = thisNote + 2) {
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	80 39       	cpi	r24, 0x90	; 144
    17e2:	91 40       	sbci	r25, 0x01	; 1
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <_Z4playi+0x6a>
    17e6:	ad c0       	rjmp	.+346    	; 0x1942 <_Z4playi+0x1c4>
		 if (sp==1){
    17e8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sp>
    17ec:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <sp+0x1>
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <_Z4playi+0x78>
    17f4:	a2 c0       	rjmp	.+324    	; 0x193a <_Z4playi+0x1bc>
			 divider = pgm_read_word_near(melody0[number]+thisNote + 1);
    17f6:	80 e2       	ldi	r24, 0x20	; 32
    17f8:	93 e0       	ldi	r25, 0x03	; 3
    17fa:	28 9e       	mul	r2, r24
    17fc:	80 01       	movw	r16, r0
    17fe:	29 9e       	mul	r2, r25
    1800:	10 0d       	add	r17, r0
    1802:	38 9e       	mul	r3, r24
    1804:	10 0d       	add	r17, r0
    1806:	11 24       	eor	r1, r1
    1808:	08 59       	subi	r16, 0x98	; 152
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	cb 80       	ldd	r12, Y+3	; 0x03
    180e:	dc 80       	ldd	r13, Y+4	; 0x04
    1810:	f6 01       	movw	r30, r12
    1812:	31 96       	adiw	r30, 0x01	; 1
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	e0 0f       	add	r30, r16
    181a:	f1 1f       	adc	r31, r17
    181c:	65 91       	lpm	r22, Z+
    181e:	74 91       	lpm	r23, Z
			 
			 if (divider > 0) { //positive divider ( positive duration)
    1820:	16 16       	cp	r1, r22
    1822:	17 06       	cpc	r1, r23
    1824:	34 f4       	brge	.+12     	; 0x1832 <_Z4playi+0xb4>
				 // it is a regular note
			 noteDuration = (wholenote) / divider;}
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    182e:	7b 01       	movw	r14, r22
    1830:	1c c0       	rjmp	.+56     	; 0x186a <_Z4playi+0xec>
			 
			 else if (divider<0){
    1832:	77 23       	and	r23, r23
    1834:	bc f4       	brge	.+46     	; 0x1864 <_Z4playi+0xe6>
				 noteDuration=(wholenote)/(divider);// negative durations need to be increased and made positive
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
				 noteDuration=noteDuration*1.5;
    183e:	07 2e       	mov	r0, r23
    1840:	00 0c       	add	r0, r0
    1842:	88 0b       	sbc	r24, r24
    1844:	99 0b       	sbc	r25, r25
    1846:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__floatsisf>
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 ec       	ldi	r20, 0xC0	; 192
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    1856:	0e 94 2b 13 	call	0x2656	; 0x2656 <__fixsfsi>
				 noteDuration=-noteDuration;
    185a:	ee 24       	eor	r14, r14
    185c:	ff 24       	eor	r15, r15
    185e:	e6 1a       	sub	r14, r22
    1860:	f7 0a       	sbc	r15, r23
    1862:	03 c0       	rjmp	.+6      	; 0x186a <_Z4playi+0xec>
			 }
			 else if(divider==0){return;} // this will be used to stop playing
    1864:	67 2b       	or	r22, r23
    1866:	09 f4       	brne	.+2      	; 0x186a <_Z4playi+0xec>
    1868:	6c c0       	rjmp	.+216    	; 0x1942 <_Z4playi+0x1c4>
			 Play_Note((pgm_read_word_near(melody0[number]+thisNote)), noteDuration*0.9 ); // play the selected pitch
    186a:	b7 01       	movw	r22, r14
    186c:	0f 2c       	mov	r0, r15
    186e:	00 0c       	add	r0, r0
    1870:	88 0b       	sbc	r24, r24
    1872:	99 0b       	sbc	r25, r25
    1874:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__floatsisf>
    1878:	2b 01       	movw	r4, r22
    187a:	3c 01       	movw	r6, r24
    187c:	26 e6       	ldi	r18, 0x66	; 102
    187e:	36 e6       	ldi	r19, 0x66	; 102
    1880:	46 e6       	ldi	r20, 0x66	; 102
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    1888:	4b 01       	movw	r8, r22
    188a:	5c 01       	movw	r10, r24
    188c:	f6 01       	movw	r30, r12
    188e:	ee 0f       	add	r30, r30
    1890:	ff 1f       	adc	r31, r31
    1892:	e0 0f       	add	r30, r16
    1894:	f1 1f       	adc	r31, r17
    1896:	65 91       	lpm	r22, Z+
    1898:	74 91       	lpm	r23, Z
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__floatunsisf>
    18a2:	a5 01       	movw	r20, r10
    18a4:	94 01       	movw	r18, r8
    18a6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_Z9Play_Noteff>
			 _delay_ms(noteDuration*0.5);
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	c3 01       	movw	r24, r6
    18b4:	b2 01       	movw	r22, r4
    18b6:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    18ba:	2b 01       	movw	r4, r22
    18bc:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4a e7       	ldi	r20, 0x7A	; 122
    18c4:	53 e4       	ldi	r21, 0x43	; 67
    18c6:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    18ca:	4b 01       	movw	r8, r22
    18cc:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e8       	ldi	r20, 0x80	; 128
    18d4:	5f e3       	ldi	r21, 0x3F	; 63
    18d6:	0e 94 b4 12 	call	0x2568	; 0x2568 <__cmpsf2>
    18da:	88 23       	and	r24, r24
    18dc:	1c f1       	brlt	.+70     	; 0x1924 <_Z4playi+0x1a6>
		__ticks = 1;
	else if (__tmp > 65535)
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	57 e4       	ldi	r21, 0x47	; 71
    18e6:	c5 01       	movw	r24, r10
    18e8:	b4 01       	movw	r22, r8
    18ea:	0e 94 13 14 	call	0x2826	; 0x2826 <__gesf2>
    18ee:	18 16       	cp	r1, r24
    18f0:	a4 f4       	brge	.+40     	; 0x191a <_Z4playi+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e2       	ldi	r20, 0x20	; 32
    18f8:	51 e4       	ldi	r21, 0x41	; 65
    18fa:	c3 01       	movw	r24, r6
    18fc:	b2 01       	movw	r22, r4
    18fe:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
    1902:	0e 94 32 13 	call	0x2664	; 0x2664 <__fixunssfsi>
		while(__ticks)
    1906:	61 15       	cp	r22, r1
    1908:	71 05       	cpc	r23, r1
    190a:	89 f0       	breq	.+34     	; 0x192e <_Z4playi+0x1b0>
    190c:	89 e1       	ldi	r24, 0x19	; 25
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <_Z4playi+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1914:	61 50       	subi	r22, 0x01	; 1
    1916:	71 09       	sbc	r23, r1
    1918:	f6 cf       	rjmp	.-20     	; 0x1906 <_Z4playi+0x188>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191a:	c5 01       	movw	r24, r10
    191c:	b4 01       	movw	r22, r8
    191e:	0e 94 32 13 	call	0x2664	; 0x2664 <__fixunssfsi>
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <_Z4playi+0x1aa>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1924:	61 e0       	ldi	r22, 0x01	; 1
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	cb 01       	movw	r24, r22
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <_Z4playi+0x1ac>
	 int notes = sizeof(melody0[number])/sizeof(melody0[number][0])/2;
	 int wholenote = (60000 * 2.5) / tempo;
	 int divider = 0;
	 int noteDuration = 0;
	 
	 for (int thisNote = 0; thisNote < notes *2 ; thisNote = thisNote + 2) {
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	02 96       	adiw	r24, 0x02	; 2
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	51 cf       	rjmp	.-350    	; 0x17dc <_Z4playi+0x5e>
			 else if(divider==0){return;} // this will be used to stop playing
			 Play_Note((pgm_read_word_near(melody0[number]+thisNote)), noteDuration*0.9 ); // play the selected pitch
			 _delay_ms(noteDuration*0.5);
		 }
		 else{
			 sp=0;
    193a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <sp+0x1>
    193e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <sp>
			 break;
		 }
	 }
 }
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	bf 90       	pop	r11
    195c:	af 90       	pop	r10
    195e:	9f 90       	pop	r9
    1960:	8f 90       	pop	r8
    1962:	7f 90       	pop	r7
    1964:	6f 90       	pop	r6
    1966:	5f 90       	pop	r5
    1968:	4f 90       	pop	r4
    196a:	3f 90       	pop	r3
    196c:	2f 90       	pop	r2
    196e:	08 95       	ret

00001970 <_Z11LCD_Commandh>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
    1970:	9b b1       	in	r25, 0x0b	; 11
    1972:	9f 70       	andi	r25, 0x0F	; 15
    1974:	28 2f       	mov	r18, r24
    1976:	20 7f       	andi	r18, 0xF0	; 240
    1978:	92 2b       	or	r25, r18
    197a:	9b b9       	out	0x0b, r25	; 11
    197c:	9b b1       	in	r25, 0x0b	; 11
    197e:	9e 7f       	andi	r25, 0xFE	; 254
    1980:	9b b9       	out	0x0b, r25	; 11
    1982:	9b b1       	in	r25, 0x0b	; 11
    1984:	92 60       	ori	r25, 0x02	; 2
    1986:	9b b9       	out	0x0b, r25	; 11
    1988:	00 00       	nop
    198a:	9b b1       	in	r25, 0x0b	; 11
    198c:	9d 7f       	andi	r25, 0xFD	; 253
    198e:	9b b9       	out	0x0b, r25	; 11
    1990:	32 e4       	ldi	r19, 0x42	; 66
    1992:	3a 95       	dec	r19
    1994:	f1 f7       	brne	.-4      	; 0x1992 <_Z11LCD_Commandh+0x22>
    1996:	00 c0       	rjmp	.+0      	; 0x1998 <_Z11LCD_Commandh+0x28>
    1998:	2b b1       	in	r18, 0x0b	; 11
    199a:	30 e1       	ldi	r19, 0x10	; 16
    199c:	83 9f       	mul	r24, r19
    199e:	c0 01       	movw	r24, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	92 2f       	mov	r25, r18
    19a4:	9f 70       	andi	r25, 0x0F	; 15
    19a6:	89 2b       	or	r24, r25
    19a8:	8b b9       	out	0x0b, r24	; 11
    19aa:	8b b1       	in	r24, 0x0b	; 11
    19ac:	82 60       	ori	r24, 0x02	; 2
    19ae:	8b b9       	out	0x0b, r24	; 11
    19b0:	00 00       	nop
    19b2:	8b b1       	in	r24, 0x0b	; 11
    19b4:	8d 7f       	andi	r24, 0xFD	; 253
    19b6:	8b b9       	out	0x0b, r24	; 11
    19b8:	83 ef       	ldi	r24, 0xF3	; 243
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <_Z11LCD_Commandh+0x4c>
    19c0:	00 c0       	rjmp	.+0      	; 0x19c2 <_Z11LCD_Commandh+0x52>
    19c2:	00 00       	nop
    19c4:	08 95       	ret

000019c6 <_Z8LCD_Charh>:
    19c6:	9b b1       	in	r25, 0x0b	; 11
    19c8:	9f 70       	andi	r25, 0x0F	; 15
    19ca:	28 2f       	mov	r18, r24
    19cc:	20 7f       	andi	r18, 0xF0	; 240
    19ce:	92 2b       	or	r25, r18
    19d0:	9b b9       	out	0x0b, r25	; 11
    19d2:	9b b1       	in	r25, 0x0b	; 11
    19d4:	91 60       	ori	r25, 0x01	; 1
    19d6:	9b b9       	out	0x0b, r25	; 11
    19d8:	9b b1       	in	r25, 0x0b	; 11
    19da:	92 60       	ori	r25, 0x02	; 2
    19dc:	9b b9       	out	0x0b, r25	; 11
    19de:	00 00       	nop
    19e0:	9b b1       	in	r25, 0x0b	; 11
    19e2:	9d 7f       	andi	r25, 0xFD	; 253
    19e4:	9b b9       	out	0x0b, r25	; 11
    19e6:	32 e4       	ldi	r19, 0x42	; 66
    19e8:	3a 95       	dec	r19
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <_Z8LCD_Charh+0x22>
    19ec:	00 c0       	rjmp	.+0      	; 0x19ee <_Z8LCD_Charh+0x28>
    19ee:	2b b1       	in	r18, 0x0b	; 11
    19f0:	30 e1       	ldi	r19, 0x10	; 16
    19f2:	83 9f       	mul	r24, r19
    19f4:	c0 01       	movw	r24, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	92 2f       	mov	r25, r18
    19fa:	9f 70       	andi	r25, 0x0F	; 15
    19fc:	89 2b       	or	r24, r25
    19fe:	8b b9       	out	0x0b, r24	; 11
    1a00:	8b b1       	in	r24, 0x0b	; 11
    1a02:	82 60       	ori	r24, 0x02	; 2
    1a04:	8b b9       	out	0x0b, r24	; 11
    1a06:	00 00       	nop
    1a08:	8b b1       	in	r24, 0x0b	; 11
    1a0a:	8d 7f       	andi	r24, 0xFD	; 253
    1a0c:	8b b9       	out	0x0b, r24	; 11
    1a0e:	83 ef       	ldi	r24, 0xF3	; 243
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <_Z8LCD_Charh+0x4c>
    1a16:	00 c0       	rjmp	.+0      	; 0x1a18 <_Z8LCD_Charh+0x52>
    1a18:	00 00       	nop
    1a1a:	08 95       	ret

00001a1c <_Z8LCD_Initv>:
    1a1c:	8f ef       	ldi	r24, 0xFF	; 255
    1a1e:	8a b9       	out	0x0a, r24	; 10
    1a20:	87 e8       	ldi	r24, 0x87	; 135
    1a22:	93 e1       	ldi	r25, 0x13	; 19
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <_Z8LCD_Initv+0x8>
    1a28:	00 c0       	rjmp	.+0      	; 0x1a2a <_Z8LCD_Initv+0xe>
    1a2a:	00 00       	nop
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z11LCD_Commandh>
    1a32:	88 e2       	ldi	r24, 0x28	; 40
    1a34:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z11LCD_Commandh>
    1a38:	8c e0       	ldi	r24, 0x0C	; 12
    1a3a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z11LCD_Commandh>
    1a3e:	86 e0       	ldi	r24, 0x06	; 6
    1a40:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z11LCD_Commandh>
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z11LCD_Commandh>
    1a4a:	83 ef       	ldi	r24, 0xF3	; 243
    1a4c:	91 e0       	ldi	r25, 0x01	; 1
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <_Z8LCD_Initv+0x32>
    1a52:	00 c0       	rjmp	.+0      	; 0x1a54 <_Z8LCD_Initv+0x38>
    1a54:	00 00       	nop
    1a56:	08 95       	ret

00001a58 <_Z10LCD_StringPc>:
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	8c 01       	movw	r16, r24
    1a62:	c0 e0       	ldi	r28, 0x00	; 0
    1a64:	d0 e0       	ldi	r29, 0x00	; 0
    1a66:	f8 01       	movw	r30, r16
    1a68:	ec 0f       	add	r30, r28
    1a6a:	fd 1f       	adc	r31, r29
    1a6c:	80 81       	ld	r24, Z
    1a6e:	88 23       	and	r24, r24
    1a70:	21 f0       	breq	.+8      	; 0x1a7a <_Z10LCD_StringPc+0x22>
    1a72:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_Z8LCD_Charh>
    1a76:	21 96       	adiw	r28, 0x01	; 1
    1a78:	f6 cf       	rjmp	.-20     	; 0x1a66 <_Z10LCD_StringPc+0xe>
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	08 95       	ret

00001a84 <_Z9LCD_Clearv>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z11LCD_Commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a8a:	83 ef       	ldi	r24, 0xF3	; 243
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <_Z9LCD_Clearv+0xa>
    1a92:	00 c0       	rjmp	.+0      	; 0x1a94 <_Z9LCD_Clearv+0x10>
    1a94:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    1a96:	80 e8       	ldi	r24, 0x80	; 128
    1a98:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z11LCD_Commandh>
    1a9c:	08 95       	ret

00001a9e <_Z8LCD_Homei>:
}
void LCD_Home(int r){
	if(r==0){
    1a9e:	89 2b       	or	r24, r25
    1aa0:	21 f4       	brne	.+8      	; 0x1aaa <_Z8LCD_Homei+0xc>
		LCD_Command (0x80);
    1aa2:	80 e8       	ldi	r24, 0x80	; 128
    1aa4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z11LCD_Commandh>
    1aa8:	08 95       	ret
	}
	else{
		LCD_Command (0xC0);
    1aaa:	80 ec       	ldi	r24, 0xC0	; 192
    1aac:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_Z11LCD_Commandh>
    1ab0:	08 95       	ret

00001ab2 <_Z9LCD_BlinkPc>:
	}
}
int blink_var=0;
void LCD_Blink(char ch[10]){
	if (blink_var==0){
    1ab2:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <blink_var>
    1ab6:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <blink_var+0x1>
    1aba:	23 2b       	or	r18, r19
    1abc:	79 f4       	brne	.+30     	; 0x1adc <_Z9LCD_BlinkPc+0x2a>
		LCD_String(ch);
    1abe:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
		blink_var=1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <blink_var+0x1>
    1aca:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <blink_var>
    1ace:	87 ea       	ldi	r24, 0xA7	; 167
    1ad0:	91 e6       	ldi	r25, 0x61	; 97
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <_Z9LCD_BlinkPc+0x20>
    1ad6:	00 c0       	rjmp	.+0      	; 0x1ad8 <_Z9LCD_BlinkPc+0x26>
    1ad8:	00 00       	nop
    1ada:	08 95       	ret
		_delay_ms(100);
	}
	else{
		LCD_String(" ");
    1adc:	8d e9       	ldi	r24, 0x9D	; 157
    1ade:	91 e0       	ldi	r25, 0x01	; 1
    1ae0:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
		blink_var=0;
    1ae4:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <blink_var+0x1>
    1ae8:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <blink_var>
    1aec:	87 ea       	ldi	r24, 0xA7	; 167
    1aee:	91 e6       	ldi	r25, 0x61	; 97
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <_Z9LCD_BlinkPc+0x3e>
    1af4:	00 c0       	rjmp	.+0      	; 0x1af6 <_Z9LCD_BlinkPc+0x44>
    1af6:	00 00       	nop
    1af8:	08 95       	ret

00001afa <_Z13displayTypingii>:
		_delay_ms(100);
	}
}
void displayTyping(int val,int pos){
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <_Z13displayTypingii+0xe>
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <_Z13displayTypingii+0x10>
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	8b 01       	movw	r16, r22
	char val0S[2];char val1S[2];
	itoa(val/10,val0S,10);itoa(val%10,val1S,10);
    1b10:	6a e0       	ldi	r22, 0x0A	; 10
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    1b18:	9b 01       	movw	r18, r22
    1b1a:	7c 01       	movw	r14, r24
    1b1c:	4a e0       	ldi	r20, 0x0A	; 10
    1b1e:	be 01       	movw	r22, r28
    1b20:	6f 5f       	subi	r22, 0xFF	; 255
    1b22:	7f 4f       	sbci	r23, 0xFF	; 255
    1b24:	c9 01       	movw	r24, r18
    1b26:	0e 94 ad 14 	call	0x295a	; 0x295a <__itoa_ncheck>
    1b2a:	4a e0       	ldi	r20, 0x0A	; 10
    1b2c:	be 01       	movw	r22, r28
    1b2e:	6d 5f       	subi	r22, 0xFD	; 253
    1b30:	7f 4f       	sbci	r23, 0xFF	; 255
    1b32:	c7 01       	movw	r24, r14
    1b34:	0e 94 ad 14 	call	0x295a	; 0x295a <__itoa_ncheck>
	if (pos==0){
    1b38:	01 15       	cp	r16, r1
    1b3a:	11 05       	cpc	r17, r1
    1b3c:	49 f4       	brne	.+18     	; 0x1b50 <_Z13displayTypingii+0x56>
		LCD_Blink(val0S);
    1b3e:	ce 01       	movw	r24, r28
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_Z9LCD_BlinkPc>
		LCD_String(val1S);
    1b46:	ce 01       	movw	r24, r28
    1b48:	03 96       	adiw	r24, 0x03	; 3
    1b4a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <_Z13displayTypingii+0x7e>
	}
	else if (pos==1){
    1b50:	01 30       	cpi	r16, 0x01	; 1
    1b52:	11 05       	cpc	r17, r1
    1b54:	49 f4       	brne	.+18     	; 0x1b68 <_Z13displayTypingii+0x6e>
		LCD_String(val0S);
    1b56:	ce 01       	movw	r24, r28
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
		LCD_Blink(val1S);
    1b5e:	ce 01       	movw	r24, r28
    1b60:	03 96       	adiw	r24, 0x03	; 3
    1b62:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_Z9LCD_BlinkPc>
    1b66:	08 c0       	rjmp	.+16     	; 0x1b78 <_Z13displayTypingii+0x7e>
	}
	else{
		LCD_String(val0S);LCD_String(val1S);
    1b68:	ce 01       	movw	r24, r28
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
    1b70:	ce 01       	movw	r24, r28
    1b72:	03 96       	adiw	r24, 0x03	; 3
    1b74:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	}
}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	ff 90       	pop	r15
    1b8a:	ef 90       	pop	r14
    1b8c:	08 95       	ret

00001b8e <_Z12LCD_SetAlarmci>:
int clkTime = 0;
int num = 0;
signed int p = 3;
void LCD_SetAlarm(char key,int state){
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	08 2f       	mov	r16, r24
    1b9c:	eb 01       	movw	r28, r22
	LCD_Home(0);
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
	displayTyping(clkTime/100,3-p);
    1ba6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    1baa:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    1bae:	23 e0       	ldi	r18, 0x03	; 3
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	28 1b       	sub	r18, r24
    1bb4:	39 0b       	sbc	r19, r25
    1bb6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <clkTime>
    1bba:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <clkTime+0x1>
    1bbe:	0f 2e       	mov	r0, r31
    1bc0:	f4 e6       	ldi	r31, 0x64	; 100
    1bc2:	ef 2e       	mov	r14, r31
    1bc4:	f1 2c       	mov	r15, r1
    1bc6:	f0 2d       	mov	r31, r0
    1bc8:	b7 01       	movw	r22, r14
    1bca:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    1bce:	cb 01       	movw	r24, r22
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_Z13displayTypingii>
	LCD_String(":");
    1bd6:	8f e9       	ldi	r24, 0x9F	; 159
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	displayTyping(clkTime%100,1-p);
    1bde:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    1be2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    1be6:	21 e0       	ldi	r18, 0x01	; 1
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	28 1b       	sub	r18, r24
    1bec:	39 0b       	sbc	r19, r25
    1bee:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <clkTime>
    1bf2:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <clkTime+0x1>
    1bf6:	b7 01       	movw	r22, r14
    1bf8:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    1bfc:	b9 01       	movw	r22, r18
    1bfe:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_Z13displayTypingii>
	
	//LCD_String("0000");
	if (int(key)>47 & int(key)<58 & state ==2 & p!=-1){
    1c02:	80 ed       	ldi	r24, 0xD0	; 208
    1c04:	80 0f       	add	r24, r16
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	8a 30       	cpi	r24, 0x0A	; 10
    1c0a:	08 f0       	brcs	.+2      	; 0x1c0e <_Z12LCD_SetAlarmci+0x80>
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	c2 30       	cpi	r28, 0x02	; 2
    1c12:	d1 05       	cpc	r29, r1
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <_Z12LCD_SetAlarmci+0x8a>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <p>
    1c1c:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <p+0x1>
    1c20:	21 e0       	ldi	r18, 0x01	; 1
    1c22:	6f 3f       	cpi	r22, 0xFF	; 255
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	73 07       	cpc	r23, r19
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <_Z12LCD_SetAlarmci+0x9e>
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	89 23       	and	r24, r25
    1c2e:	69 f1       	breq	.+90     	; 0x1c8a <_Z12LCD_SetAlarmci+0xfc>
    1c30:	22 23       	and	r18, r18
    1c32:	59 f1       	breq	.+86     	; 0x1c8a <_Z12LCD_SetAlarmci+0xfc>
		clkTime += (int(key)-48)*powerOf(10,p);
    1c34:	10 e0       	ldi	r17, 0x00	; 0
    1c36:	00 53       	subi	r16, 0x30	; 48
    1c38:	11 09       	sbc	r17, r1
    1c3a:	8a e0       	ldi	r24, 0x0A	; 10
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 23 08 	call	0x1046	; 0x1046 <_Z7powerOfii>
    1c42:	9c 01       	movw	r18, r24
    1c44:	02 9f       	mul	r16, r18
    1c46:	c0 01       	movw	r24, r0
    1c48:	03 9f       	mul	r16, r19
    1c4a:	90 0d       	add	r25, r0
    1c4c:	12 9f       	mul	r17, r18
    1c4e:	90 0d       	add	r25, r0
    1c50:	11 24       	eor	r1, r1
    1c52:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <clkTime>
    1c56:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <clkTime+0x1>
    1c5a:	82 0f       	add	r24, r18
    1c5c:	93 1f       	adc	r25, r19
    1c5e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <clkTime+0x1>
    1c62:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <clkTime>
		p--;
    1c66:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    1c6a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <p+0x1>
    1c74:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <p>
    1c78:	3f eb       	ldi	r19, 0xBF	; 191
    1c7a:	84 ed       	ldi	r24, 0xD4	; 212
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	31 50       	subi	r19, 0x01	; 1
    1c80:	80 40       	sbci	r24, 0x00	; 0
    1c82:	90 40       	sbci	r25, 0x00	; 0
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <_Z12LCD_SetAlarmci+0xf0>
    1c86:	00 c0       	rjmp	.+0      	; 0x1c88 <_Z12LCD_SetAlarmci+0xfa>
    1c88:	00 00       	nop
		_delay_ms(600);
	}
	if (state==3){
    1c8a:	23 97       	sbiw	r28, 0x03	; 3
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <_Z12LCD_SetAlarmci+0x102>
    1c8e:	48 c0       	rjmp	.+144    	; 0x1d20 <_Z12LCD_SetAlarmci+0x192>
		setAlarm(clkTime);
    1c90:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <clkTime>
    1c94:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <clkTime+0x1>
    1c98:	0e 94 40 08 	call	0x1080	; 0x1080 <_Z8setAlarmi>
		LCD_Home(0);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
		LCD_String("ALARM IS SET TO");
    1ca4:	81 ea       	ldi	r24, 0xA1	; 161
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
		LCD_Home(1);
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
		displayTyping(clkTime/100,3);LCD_String(":");displayTyping(clkTime%100,3);
    1cb4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <clkTime>
    1cb8:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <clkTime+0x1>
    1cbc:	c4 e6       	ldi	r28, 0x64	; 100
    1cbe:	d0 e0       	ldi	r29, 0x00	; 0
    1cc0:	be 01       	movw	r22, r28
    1cc2:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	63 e0       	ldi	r22, 0x03	; 3
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_Z13displayTypingii>
    1cd0:	8f e9       	ldi	r24, 0x9F	; 159
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
    1cd8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <clkTime>
    1cdc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <clkTime+0x1>
    1ce0:	be 01       	movw	r22, r28
    1ce2:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    1ce6:	63 e0       	ldi	r22, 0x03	; 3
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_Z13displayTypingii>
		clkTime=0;num=0;p=3;
    1cee:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <clkTime+0x1>
    1cf2:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <clkTime>
    1cf6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <num+0x1>
    1cfa:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <num>
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <p+0x1>
    1d06:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <p>
    1d0a:	2f e7       	ldi	r18, 0x7F	; 127
    1d0c:	3a e1       	ldi	r19, 0x1A	; 26
    1d0e:	86 e0       	ldi	r24, 0x06	; 6
    1d10:	21 50       	subi	r18, 0x01	; 1
    1d12:	30 40       	sbci	r19, 0x00	; 0
    1d14:	80 40       	sbci	r24, 0x00	; 0
    1d16:	e1 f7       	brne	.-8      	; 0x1d10 <_Z12LCD_SetAlarmci+0x182>
    1d18:	00 c0       	rjmp	.+0      	; 0x1d1a <_Z12LCD_SetAlarmci+0x18c>
    1d1a:	00 00       	nop
		_delay_ms(2000);
		LCD_Clear();
    1d1c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_Z9LCD_Clearv>
	}


}
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	08 95       	ret

00001d2e <_Z11LCD_SetDateii>:
int clockTime[6];
int ClockState = 0;
int temp = 0;
int data = 0;
char dataS[10];
void LCD_SetDate(int key, int state){
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	8c 01       	movw	r16, r24
    1d3c:	7b 01       	movw	r14, r22
	LCD_Home(0);
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
	LCD_String("   20");
    1d46:	82 e9       	ldi	r24, 0x92	; 146
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	for (int i=0;i<6;i++){
    1d4e:	c0 e0       	ldi	r28, 0x00	; 0
    1d50:	d0 e0       	ldi	r29, 0x00	; 0
    1d52:	c6 30       	cpi	r28, 0x06	; 6
    1d54:	d1 05       	cpc	r29, r1
    1d56:	f4 f5       	brge	.+124    	; 0x1dd4 <_Z11LCD_SetDateii+0xa6>
		if (i==3){
    1d58:	c3 30       	cpi	r28, 0x03	; 3
    1d5a:	d1 05       	cpc	r29, r1
    1d5c:	41 f4       	brne	.+16     	; 0x1d6e <_Z11LCD_SetDateii+0x40>
			LCD_Home(1);
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
			LCD_String("    ");
    1d66:	8a e9       	ldi	r24, 0x9A	; 154
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
		}
		if ((i!=3) & (i!=0)){
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	c3 30       	cpi	r28, 0x03	; 3
    1d72:	d1 05       	cpc	r29, r1
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <_Z11LCD_SetDateii+0x4a>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	88 23       	and	r24, r24
    1d7a:	51 f0       	breq	.+20     	; 0x1d90 <_Z11LCD_SetDateii+0x62>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	20 97       	sbiw	r28, 0x00	; 0
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <_Z11LCD_SetDateii+0x56>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	88 23       	and	r24, r24
    1d86:	21 f0       	breq	.+8      	; 0x1d90 <_Z11LCD_SetDateii+0x62>
			LCD_String(":");
    1d88:	8f e9       	ldi	r24, 0x9F	; 159
    1d8a:	91 e0       	ldi	r25, 0x01	; 1
    1d8c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
		}
		if (i==ClockState){
    1d90:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ClockState>
    1d94:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <ClockState+0x1>
    1d98:	c8 17       	cp	r28, r24
    1d9a:	d9 07       	cpc	r29, r25
    1d9c:	71 f4       	brne	.+28     	; 0x1dba <_Z11LCD_SetDateii+0x8c>
			displayTyping(clockTime[i],temp);
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	ed 50       	subi	r30, 0x0D	; 13
    1da6:	fe 4f       	sbci	r31, 0xFE	; 254
    1da8:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <temp>
    1dac:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <temp+0x1>
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_Z13displayTypingii>
    1db8:	0b c0       	rjmp	.+22     	; 0x1dd0 <_Z11LCD_SetDateii+0xa2>
		}
		else{
			displayTyping(clockTime[i],3);
    1dba:	fe 01       	movw	r30, r28
    1dbc:	ee 0f       	add	r30, r30
    1dbe:	ff 1f       	adc	r31, r31
    1dc0:	ed 50       	subi	r30, 0x0D	; 13
    1dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc4:	63 e0       	ldi	r22, 0x03	; 3
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_Z13displayTypingii>
int data = 0;
char dataS[10];
void LCD_SetDate(int key, int state){
	LCD_Home(0);
	LCD_String("   20");
	for (int i=0;i<6;i++){
    1dd0:	21 96       	adiw	r28, 0x01	; 1
    1dd2:	bf cf       	rjmp	.-130    	; 0x1d52 <_Z11LCD_SetDateii+0x24>
		}
		else{
			displayTyping(clockTime[i],3);
		}
	}
	if (int(key)>47 & int(key)<58 & state ==2){
    1dd4:	21 e0       	ldi	r18, 0x01	; 1
    1dd6:	c8 01       	movw	r24, r16
    1dd8:	c0 97       	sbiw	r24, 0x30	; 48
    1dda:	0a 97       	sbiw	r24, 0x0a	; 10
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <_Z11LCD_SetDateii+0xb2>
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	92 e0       	ldi	r25, 0x02	; 2
    1de4:	e9 16       	cp	r14, r25
    1de6:	f1 04       	cpc	r15, r1
    1de8:	09 f0       	breq	.+2      	; 0x1dec <_Z11LCD_SetDateii+0xbe>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	22 23       	and	r18, r18
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <_Z11LCD_SetDateii+0xc4>
    1df0:	5e c0       	rjmp	.+188    	; 0x1eae <_Z11LCD_SetDateii+0x180>
    1df2:	88 23       	and	r24, r24
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <_Z11LCD_SetDateii+0xca>
    1df6:	5b c0       	rjmp	.+182    	; 0x1eae <_Z11LCD_SetDateii+0x180>
		data+=(int(key)-48);
    1df8:	00 53       	subi	r16, 0x30	; 48
    1dfa:	11 09       	sbc	r17, r1
    1dfc:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <data>
    1e00:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <data+0x1>
    1e04:	08 0f       	add	r16, r24
    1e06:	19 1f       	adc	r17, r25
    1e08:	10 93 ee 01 	sts	0x01EE, r17	; 0x8001ee <data+0x1>
    1e0c:	00 93 ed 01 	sts	0x01ED, r16	; 0x8001ed <data>
    1e10:	2f ef       	ldi	r18, 0xFF	; 255
    1e12:	80 e7       	ldi	r24, 0x70	; 112
    1e14:	92 e0       	ldi	r25, 0x02	; 2
    1e16:	21 50       	subi	r18, 0x01	; 1
    1e18:	80 40       	sbci	r24, 0x00	; 0
    1e1a:	90 40       	sbci	r25, 0x00	; 0
    1e1c:	e1 f7       	brne	.-8      	; 0x1e16 <_Z11LCD_SetDateii+0xe8>
    1e1e:	00 c0       	rjmp	.+0      	; 0x1e20 <_Z11LCD_SetDateii+0xf2>
    1e20:	00 00       	nop
		_delay_ms(800);
		if (temp == 0){
    1e22:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <temp>
    1e26:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <temp+0x1>
    1e2a:	89 2b       	or	r24, r25
    1e2c:	21 f5       	brne	.+72     	; 0x1e76 <_Z11LCD_SetDateii+0x148>
			data*=10;
    1e2e:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <data>
    1e32:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <data+0x1>
    1e36:	c9 01       	movw	r24, r18
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	22 0f       	add	r18, r18
    1e3e:	33 1f       	adc	r19, r19
    1e40:	22 0f       	add	r18, r18
    1e42:	33 1f       	adc	r19, r19
    1e44:	22 0f       	add	r18, r18
    1e46:	33 1f       	adc	r19, r19
    1e48:	82 0f       	add	r24, r18
    1e4a:	93 1f       	adc	r25, r19
    1e4c:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <data+0x1>
    1e50:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <data>
			temp = 1;
    1e54:	21 e0       	ldi	r18, 0x01	; 1
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	30 93 f0 01 	sts	0x01F0, r19	; 0x8001f0 <temp+0x1>
    1e5c:	20 93 ef 01 	sts	0x01EF, r18	; 0x8001ef <temp>
			clockTime[ClockState] = data;
    1e60:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <ClockState>
    1e64:	f0 91 f2 01 	lds	r31, 0x01F2	; 0x8001f2 <ClockState+0x1>
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	ed 50       	subi	r30, 0x0D	; 13
    1e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
    1e74:	1c c0       	rjmp	.+56     	; 0x1eae <_Z11LCD_SetDateii+0x180>
		}
		else{
			clockTime[ClockState] = data;
    1e76:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ClockState>
    1e7a:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <ClockState+0x1>
    1e7e:	fc 01       	movw	r30, r24
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	ed 50       	subi	r30, 0x0D	; 13
    1e86:	fe 4f       	sbci	r31, 0xFE	; 254
    1e88:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <data>
    1e8c:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <data+0x1>
    1e90:	31 83       	std	Z+1, r19	; 0x01
    1e92:	20 83       	st	Z, r18
			ClockState++;
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <ClockState+0x1>
    1e9a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ClockState>
			data=0;
    1e9e:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <data+0x1>
    1ea2:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <data>
			temp = 0;
    1ea6:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <temp+0x1>
    1eaa:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <temp>
		}
	}
	if (ClockState == 6 & state==3){
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <ClockState>
    1eb4:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <ClockState+0x1>
    1eb8:	26 30       	cpi	r18, 0x06	; 6
    1eba:	31 05       	cpc	r19, r1
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <_Z11LCD_SetDateii+0x192>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	88 23       	and	r24, r24
    1ec2:	29 f1       	breq	.+74     	; 0x1f0e <_Z11LCD_SetDateii+0x1e0>
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	23 e0       	ldi	r18, 0x03	; 3
    1ec8:	e2 16       	cp	r14, r18
    1eca:	f1 04       	cpc	r15, r1
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <_Z11LCD_SetDateii+0x1a2>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	88 23       	and	r24, r24
    1ed2:	e9 f0       	breq	.+58     	; 0x1f0e <_Z11LCD_SetDateii+0x1e0>
		setClockTime(clockTime);
    1ed4:	83 ef       	ldi	r24, 0xF3	; 243
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	0e 94 2b 09 	call	0x1256	; 0x1256 <_Z12setClockTimePi>
		ClockState = 0;
    1edc:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <ClockState+0x1>
    1ee0:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <ClockState>
		LCD_Home(0);LCD_Clear();
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
    1eec:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_Z9LCD_Clearv>
		LCD_String("    DONE!");
    1ef0:	81 eb       	ldi	r24, 0xB1	; 177
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
    1ef8:	8f e7       	ldi	r24, 0x7F	; 127
    1efa:	9a e1       	ldi	r25, 0x1A	; 26
    1efc:	26 e0       	ldi	r18, 0x06	; 6
    1efe:	81 50       	subi	r24, 0x01	; 1
    1f00:	90 40       	sbci	r25, 0x00	; 0
    1f02:	20 40       	sbci	r18, 0x00	; 0
    1f04:	e1 f7       	brne	.-8      	; 0x1efe <_Z11LCD_SetDateii+0x1d0>
    1f06:	00 c0       	rjmp	.+0      	; 0x1f08 <_Z11LCD_SetDateii+0x1da>
    1f08:	00 00       	nop
		_delay_ms(2000);
		LCD_Clear();
    1f0a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_Z9LCD_Clearv>
	}
}
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	ff 90       	pop	r15
    1f18:	ef 90       	pop	r14
    1f1a:	08 95       	ret

00001f1c <_Z8LCD_Toneci>:
char tone_List[5][10] = {"GOT      ","STAR WARS","PINK     ","TONE4    ","TONE5    "};
int tone_Var = 0;
void LCD_Tone(char key,int state){
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	18 2f       	mov	r17, r24
    1f24:	eb 01       	movw	r28, r22
	LCD_Home(0);
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
	if (key=='8' & state==2){
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	c2 30       	cpi	r28, 0x02	; 2
    1f32:	d1 05       	cpc	r29, r1
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <_Z8LCD_Toneci+0x1c>
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	18 33       	cpi	r17, 0x38	; 56
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <_Z8LCD_Toneci+0x24>
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	99 23       	and	r25, r25
    1f42:	a9 f0       	breq	.+42     	; 0x1f6e <_Z8LCD_Toneci+0x52>
    1f44:	88 23       	and	r24, r24
    1f46:	99 f0       	breq	.+38     	; 0x1f6e <_Z8LCD_Toneci+0x52>
		tone_Var++;
    1f48:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <tone_Var>
    1f4c:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <tone_Var+0x1>
    1f50:	2f 5f       	subi	r18, 0xFF	; 255
    1f52:	3f 4f       	sbci	r19, 0xFF	; 255
    1f54:	30 93 ec 01 	sts	0x01EC, r19	; 0x8001ec <tone_Var+0x1>
    1f58:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <tone_Var>
    1f5c:	2f ef       	ldi	r18, 0xFF	; 255
    1f5e:	30 e7       	ldi	r19, 0x70	; 112
    1f60:	92 e0       	ldi	r25, 0x02	; 2
    1f62:	21 50       	subi	r18, 0x01	; 1
    1f64:	30 40       	sbci	r19, 0x00	; 0
    1f66:	90 40       	sbci	r25, 0x00	; 0
    1f68:	e1 f7       	brne	.-8      	; 0x1f62 <_Z8LCD_Toneci+0x46>
    1f6a:	00 c0       	rjmp	.+0      	; 0x1f6c <_Z8LCD_Toneci+0x50>
    1f6c:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (key=='2' & state ==2){
    1f6e:	91 e0       	ldi	r25, 0x01	; 1
    1f70:	12 33       	cpi	r17, 0x32	; 50
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <_Z8LCD_Toneci+0x5a>
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	99 23       	and	r25, r25
    1f78:	a1 f0       	breq	.+40     	; 0x1fa2 <_Z8LCD_Toneci+0x86>
    1f7a:	88 23       	and	r24, r24
    1f7c:	91 f0       	breq	.+36     	; 0x1fa2 <_Z8LCD_Toneci+0x86>
		tone_Var--;
    1f7e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <tone_Var>
    1f82:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <tone_Var+0x1>
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <tone_Var+0x1>
    1f8c:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <tone_Var>
    1f90:	2f ef       	ldi	r18, 0xFF	; 255
    1f92:	30 e7       	ldi	r19, 0x70	; 112
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	21 50       	subi	r18, 0x01	; 1
    1f98:	30 40       	sbci	r19, 0x00	; 0
    1f9a:	80 40       	sbci	r24, 0x00	; 0
    1f9c:	e1 f7       	brne	.-8      	; 0x1f96 <_Z8LCD_Toneci+0x7a>
    1f9e:	00 c0       	rjmp	.+0      	; 0x1fa0 <_Z8LCD_Toneci+0x84>
    1fa0:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (tone_Var>4){
    1fa2:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <tone_Var>
    1fa6:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <tone_Var+0x1>
    1faa:	05 97       	sbiw	r24, 0x05	; 5
    1fac:	24 f0       	brlt	.+8      	; 0x1fb6 <_Z8LCD_Toneci+0x9a>
		tone_Var=0;
    1fae:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <tone_Var+0x1>
    1fb2:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <tone_Var>
	}
	if (tone_Var<0){
    1fb6:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <tone_Var>
    1fba:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <tone_Var+0x1>
    1fbe:	99 23       	and	r25, r25
    1fc0:	34 f4       	brge	.+12     	; 0x1fce <_Z8LCD_Toneci+0xb2>
		tone_Var=4;
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <tone_Var+0x1>
    1fca:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <tone_Var>
	}
	if (state==2){
    1fce:	22 97       	sbiw	r28, 0x02	; 2
    1fd0:	f9 f4       	brne	.+62     	; 0x2010 <_Z8LCD_Toneci+0xf4>
		LCD_Home(0);LCD_String(">>");
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
    1fda:	8b eb       	ldi	r24, 0xBB	; 187
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
		LCD_String(tone_List[tone_Var%5]);
    1fe2:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <tone_Var>
    1fe6:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <tone_Var+0x1>
    1fea:	65 e0       	ldi	r22, 0x05	; 5
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    1ff2:	9c 01       	movw	r18, r24
    1ff4:	22 0f       	add	r18, r18
    1ff6:	33 1f       	adc	r19, r19
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	82 0f       	add	r24, r18
    2006:	93 1f       	adc	r25, r19
    2008:	88 5c       	subi	r24, 0xC8	; 200
    200a:	9e 4f       	sbci	r25, 0xFE	; 254
    200c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
		// 	LCD_Home(1);
		// 	LCD_String(menu_List[(menu_Var+1)%3]);
	}

}
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	08 95       	ret

00002018 <_Z8LCD_Menuci>:
char menu_List[3][10] = {"SET ALARM","SET TIME ","SET TONE "};
int menu_Var = 0;
void LCD_Menu(char key,int state){
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	18 2f       	mov	r17, r24
    2022:	eb 01       	movw	r28, r22
	LCD_Home(0);
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
	if (key=='8' & state==1){
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	c1 30       	cpi	r28, 0x01	; 1
    2030:	d1 05       	cpc	r29, r1
    2032:	09 f0       	breq	.+2      	; 0x2036 <_Z8LCD_Menuci+0x1e>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	18 33       	cpi	r17, 0x38	; 56
    203a:	09 f0       	breq	.+2      	; 0x203e <_Z8LCD_Menuci+0x26>
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	99 23       	and	r25, r25
    2040:	a9 f0       	breq	.+42     	; 0x206c <_Z8LCD_Menuci+0x54>
    2042:	88 23       	and	r24, r24
    2044:	99 f0       	breq	.+38     	; 0x206c <_Z8LCD_Menuci+0x54>
		menu_Var++;
    2046:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <menu_Var>
    204a:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <menu_Var+0x1>
    204e:	2f 5f       	subi	r18, 0xFF	; 255
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    2052:	30 93 ea 01 	sts	0x01EA, r19	; 0x8001ea <menu_Var+0x1>
    2056:	20 93 e9 01 	sts	0x01E9, r18	; 0x8001e9 <menu_Var>
    205a:	2f ef       	ldi	r18, 0xFF	; 255
    205c:	30 e7       	ldi	r19, 0x70	; 112
    205e:	92 e0       	ldi	r25, 0x02	; 2
    2060:	21 50       	subi	r18, 0x01	; 1
    2062:	30 40       	sbci	r19, 0x00	; 0
    2064:	90 40       	sbci	r25, 0x00	; 0
    2066:	e1 f7       	brne	.-8      	; 0x2060 <_Z8LCD_Menuci+0x48>
    2068:	00 c0       	rjmp	.+0      	; 0x206a <_Z8LCD_Menuci+0x52>
    206a:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (key=='2' & state ==1){
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	12 33       	cpi	r17, 0x32	; 50
    2070:	09 f0       	breq	.+2      	; 0x2074 <_Z8LCD_Menuci+0x5c>
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	99 23       	and	r25, r25
    2076:	a1 f0       	breq	.+40     	; 0x20a0 <_Z8LCD_Menuci+0x88>
    2078:	88 23       	and	r24, r24
    207a:	91 f0       	breq	.+36     	; 0x20a0 <_Z8LCD_Menuci+0x88>
		menu_Var--;
    207c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <menu_Var>
    2080:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <menu_Var+0x1>
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <menu_Var+0x1>
    208a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <menu_Var>
    208e:	2f ef       	ldi	r18, 0xFF	; 255
    2090:	30 e7       	ldi	r19, 0x70	; 112
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	21 50       	subi	r18, 0x01	; 1
    2096:	30 40       	sbci	r19, 0x00	; 0
    2098:	80 40       	sbci	r24, 0x00	; 0
    209a:	e1 f7       	brne	.-8      	; 0x2094 <_Z8LCD_Menuci+0x7c>
    209c:	00 c0       	rjmp	.+0      	; 0x209e <_Z8LCD_Menuci+0x86>
    209e:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (menu_Var>2){
    20a0:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <menu_Var>
    20a4:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <menu_Var+0x1>
    20a8:	03 97       	sbiw	r24, 0x03	; 3
    20aa:	24 f0       	brlt	.+8      	; 0x20b4 <_Z8LCD_Menuci+0x9c>
		menu_Var=0;
    20ac:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <menu_Var+0x1>
    20b0:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <menu_Var>
	}
	if (menu_Var<0){
    20b4:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <menu_Var>
    20b8:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <menu_Var+0x1>
    20bc:	99 23       	and	r25, r25
    20be:	34 f4       	brge	.+12     	; 0x20cc <_Z8LCD_Menuci+0xb4>
		menu_Var=2;
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <menu_Var+0x1>
    20c8:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <menu_Var>
	}
	if (state==1){
    20cc:	c1 30       	cpi	r28, 0x01	; 1
    20ce:	d1 05       	cpc	r29, r1
    20d0:	f9 f4       	brne	.+62     	; 0x2110 <_Z8LCD_Menuci+0xf8>
		LCD_Home(0);LCD_String(">>");
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z8LCD_Homei>
    20da:	8b eb       	ldi	r24, 0xBB	; 187
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
		LCD_String(menu_List[menu_Var%3]);
    20e2:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <menu_Var>
    20e6:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <menu_Var+0x1>
    20ea:	63 e0       	ldi	r22, 0x03	; 3
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	0e 94 85 14 	call	0x290a	; 0x290a <__divmodhi4>
    20f2:	9c 01       	movw	r18, r24
    20f4:	22 0f       	add	r18, r18
    20f6:	33 1f       	adc	r19, r19
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	82 0f       	add	r24, r18
    2106:	93 1f       	adc	r25, r19
    2108:	86 5e       	subi	r24, 0xE6	; 230
    210a:	9e 4f       	sbci	r25, 0xFE	; 254
    210c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	// 	LCD_Home(1);
	// 	LCD_String(menu_List[(menu_Var+1)%3]);
	}
	if ((state >1) & (menu_Var==0)){
    2110:	01 e0       	ldi	r16, 0x01	; 1
    2112:	c2 30       	cpi	r28, 0x02	; 2
    2114:	d1 05       	cpc	r29, r1
    2116:	0c f4       	brge	.+2      	; 0x211a <_Z8LCD_Menuci+0x102>
    2118:	00 e0       	ldi	r16, 0x00	; 0
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <menu_Var>
    2120:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <menu_Var+0x1>
    2124:	23 2b       	or	r18, r19
    2126:	09 f0       	breq	.+2      	; 0x212a <_Z8LCD_Menuci+0x112>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	88 23       	and	r24, r24
    212c:	31 f0       	breq	.+12     	; 0x213a <_Z8LCD_Menuci+0x122>
    212e:	00 23       	and	r16, r16
    2130:	21 f0       	breq	.+8      	; 0x213a <_Z8LCD_Menuci+0x122>
		LCD_SetAlarm(key,state);
    2132:	be 01       	movw	r22, r28
    2134:	81 2f       	mov	r24, r17
    2136:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <_Z12LCD_SetAlarmci>
	}
	if ((state >1) & (menu_Var==1)){
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <menu_Var>
    2140:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <menu_Var+0x1>
    2144:	21 30       	cpi	r18, 0x01	; 1
    2146:	31 05       	cpc	r19, r1
    2148:	09 f0       	breq	.+2      	; 0x214c <_Z8LCD_Menuci+0x134>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	88 23       	and	r24, r24
    214e:	39 f0       	breq	.+14     	; 0x215e <_Z8LCD_Menuci+0x146>
    2150:	00 23       	and	r16, r16
    2152:	29 f0       	breq	.+10     	; 0x215e <_Z8LCD_Menuci+0x146>
		LCD_SetDate(key,state);
    2154:	be 01       	movw	r22, r28
    2156:	81 2f       	mov	r24, r17
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z11LCD_SetDateii>
	}
	if ((state >1) & (menu_Var==2)){
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <menu_Var>
    2164:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <menu_Var+0x1>
    2168:	22 30       	cpi	r18, 0x02	; 2
    216a:	31 05       	cpc	r19, r1
    216c:	09 f0       	breq	.+2      	; 0x2170 <_Z8LCD_Menuci+0x158>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	88 23       	and	r24, r24
    2172:	31 f0       	breq	.+12     	; 0x2180 <_Z8LCD_Menuci+0x168>
    2174:	00 23       	and	r16, r16
    2176:	21 f0       	breq	.+8      	; 0x2180 <_Z8LCD_Menuci+0x168>
		LCD_Tone(key,state);
    2178:	be 01       	movw	r22, r28
    217a:	81 2f       	mov	r24, r17
    217c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_Z8LCD_Toneci>
	}
}
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	1f 91       	pop	r17
    2186:	0f 91       	pop	r16
    2188:	08 95       	ret

0000218a <_Z14ds1307_dec2bcdh>:
#define F_CPU 1000000UL
#endif


uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
    218a:	9d ec       	ldi	r25, 0xCD	; 205
    218c:	89 9f       	mul	r24, r25
    218e:	91 2d       	mov	r25, r1
    2190:	11 24       	eor	r1, r1
    2192:	96 95       	lsr	r25
    2194:	96 95       	lsr	r25
    2196:	96 95       	lsr	r25
    2198:	29 2f       	mov	r18, r25
    219a:	22 0f       	add	r18, r18
    219c:	92 0f       	add	r25, r18
    219e:	29 2f       	mov	r18, r25
    21a0:	22 0f       	add	r18, r18
}
    21a2:	82 0f       	add	r24, r18
    21a4:	08 95       	ret

000021a6 <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	35 95       	asr	r19
    21ac:	27 95       	ror	r18
    21ae:	35 95       	asr	r19
    21b0:	27 95       	ror	r18
    21b2:	35 95       	asr	r19
    21b4:	27 95       	ror	r18
    21b6:	35 95       	asr	r19
    21b8:	27 95       	ror	r18
    21ba:	92 2f       	mov	r25, r18
    21bc:	99 0f       	add	r25, r25
    21be:	29 0f       	add	r18, r25
    21c0:	92 2f       	mov	r25, r18
    21c2:	99 0f       	add	r25, r25
}
    21c4:	89 1b       	sub	r24, r25
    21c6:	08 95       	ret

000021c8 <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
    21c8:	0e 94 84 11 	call	0x2308	; 0x2308 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	8a 95       	dec	r24
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <_Z11ds1307_initv+0x6>
    21d2:	00 00       	nop
    21d4:	08 95       	ret

000021d6 <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
    21d6:	cf 92       	push	r12
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	c8 2f       	mov	r28, r24
    21e6:	d6 2f       	mov	r29, r22
    21e8:	14 2f       	mov	r17, r20
    21ea:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
    21ec:	80 ed       	ldi	r24, 0xD0	; 208
    21ee:	0e 94 b0 11 	call	0x2360	; 0x2360 <_Z14i2c_start_waith>
	i2c_write(0x00);
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
    21f8:	8c 2d       	mov	r24, r12
    21fa:	0e 94 c5 10 	call	0x218a	; 0x218a <_Z14ds1307_dec2bcdh>
    21fe:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
    2202:	8e 2d       	mov	r24, r14
    2204:	0e 94 c5 10 	call	0x218a	; 0x218a <_Z14ds1307_dec2bcdh>
    2208:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
    220c:	80 2f       	mov	r24, r16
    220e:	0e 94 c5 10 	call	0x218a	; 0x218a <_Z14ds1307_dec2bcdh>
    2212:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
    2216:	8f 2d       	mov	r24, r15
    2218:	0e 94 c5 10 	call	0x218a	; 0x218a <_Z14ds1307_dec2bcdh>
    221c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
    2220:	81 2f       	mov	r24, r17
    2222:	0e 94 c5 10 	call	0x218a	; 0x218a <_Z14ds1307_dec2bcdh>
    2226:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
    222a:	8d 2f       	mov	r24, r29
    222c:	0e 94 c5 10 	call	0x218a	; 0x218a <_Z14ds1307_dec2bcdh>
    2230:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
    2234:	8c 2f       	mov	r24, r28
    2236:	0e 94 c5 10 	call	0x218a	; 0x218a <_Z14ds1307_dec2bcdh>
    223a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_write(0x00);
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_stop();
    2244:	0e 94 da 11 	call	0x23b4	; 0x23b4 <_Z8i2c_stopv>
}
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	cf 90       	pop	r12
    2256:	08 95       	ret

00002258 <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
    2258:	6f 92       	push	r6
    225a:	7f 92       	push	r7
    225c:	8f 92       	push	r8
    225e:	9f 92       	push	r9
    2260:	af 92       	push	r10
    2262:	bf 92       	push	r11
    2264:	cf 92       	push	r12
    2266:	df 92       	push	r13
    2268:	ef 92       	push	r14
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	ec 01       	movw	r28, r24
    2276:	3b 01       	movw	r6, r22
    2278:	5a 01       	movw	r10, r20
    227a:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
    227c:	80 ed       	ldi	r24, 0xD0	; 208
    227e:	0e 94 b0 11 	call	0x2360	; 0x2360 <_Z14i2c_start_waith>
	i2c_write(0x00);
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <_Z9i2c_writeh>
	i2c_stop();
    2288:	0e 94 da 11 	call	0x23b4	; 0x23b4 <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
    228c:	81 ed       	ldi	r24, 0xD1	; 209
    228e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
    2292:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z11i2c_readAckv>
    2296:	8f 77       	andi	r24, 0x7F	; 127
    2298:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_Z14ds1307_bcd2dech>
    229c:	f6 01       	movw	r30, r12
    229e:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
    22a0:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z11i2c_readAckv>
    22a4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_Z14ds1307_bcd2dech>
    22a8:	f7 01       	movw	r30, r14
    22aa:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
    22ac:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z11i2c_readAckv>
    22b0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_Z14ds1307_bcd2dech>
    22b4:	f8 01       	movw	r30, r16
    22b6:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
    22b8:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z11i2c_readAckv>
    22bc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_Z14ds1307_bcd2dech>
    22c0:	f4 01       	movw	r30, r8
    22c2:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
    22c4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z11i2c_readAckv>
    22c8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_Z14ds1307_bcd2dech>
    22cc:	f5 01       	movw	r30, r10
    22ce:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
    22d0:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z11i2c_readAckv>
    22d4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_Z14ds1307_bcd2dech>
    22d8:	f3 01       	movw	r30, r6
    22da:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
    22dc:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_Z11i2c_readNakv>
    22e0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_Z14ds1307_bcd2dech>
    22e4:	88 83       	st	Y, r24
	i2c_stop();
    22e6:	0e 94 da 11 	call	0x23b4	; 0x23b4 <_Z8i2c_stopv>
}
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	df 90       	pop	r13
    22f8:	cf 90       	pop	r12
    22fa:	bf 90       	pop	r11
    22fc:	af 90       	pop	r10
    22fe:	9f 90       	pop	r9
    2300:	8f 90       	pop	r8
    2302:	7f 90       	pop	r7
    2304:	6f 90       	pop	r6
    2306:	08 95       	ret

00002308 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    2308:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    230c:	8d ef       	ldi	r24, 0xFD	; 253
    230e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    2312:	08 95       	ret

00002314 <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2314:	94 ea       	ldi	r25, 0xA4	; 164
    2316:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    231a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    231e:	99 23       	and	r25, r25
    2320:	e4 f7       	brge	.-8      	; 0x231a <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2322:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2326:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2328:	98 30       	cpi	r25, 0x08	; 8
    232a:	11 f0       	breq	.+4      	; 0x2330 <_Z9i2c_starth+0x1c>
    232c:	90 31       	cpi	r25, 0x10	; 16
    232e:	91 f4       	brne	.+36     	; 0x2354 <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
    2330:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    2334:	84 e8       	ldi	r24, 0x84	; 132
    2336:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    233a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    233e:	88 23       	and	r24, r24
    2340:	e4 f7       	brge	.-8      	; 0x233a <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2342:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2346:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2348:	88 31       	cpi	r24, 0x18	; 24
    234a:	31 f0       	breq	.+12     	; 0x2358 <_Z9i2c_starth+0x44>
    234c:	80 34       	cpi	r24, 0x40	; 64
    234e:	31 f4       	brne	.+12     	; 0x235c <_Z9i2c_starth+0x48>

	return 0;
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    235e:	08 95       	ret

00002360 <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2360:	94 ea       	ldi	r25, 0xA4	; 164
    2362:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2366:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    236a:	99 23       	and	r25, r25
    236c:	e4 f7       	brge	.-8      	; 0x2366 <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    236e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2372:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2374:	98 30       	cpi	r25, 0x08	; 8
    2376:	11 f0       	breq	.+4      	; 0x237c <_Z14i2c_start_waith+0x1c>
    2378:	90 31       	cpi	r25, 0x10	; 16
    237a:	91 f7       	brne	.-28     	; 0x2360 <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
    237c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2380:	94 e8       	ldi	r25, 0x84	; 132
    2382:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2386:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    238a:	99 23       	and	r25, r25
    238c:	e4 f7       	brge	.-8      	; 0x2386 <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    238e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2392:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2394:	90 32       	cpi	r25, 0x20	; 32
    2396:	11 f0       	breq	.+4      	; 0x239c <_Z14i2c_start_waith+0x3c>
    2398:	98 35       	cpi	r25, 0x58	; 88
    239a:	41 f4       	brne	.+16     	; 0x23ac <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    239c:	94 e9       	ldi	r25, 0x94	; 148
    239e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    23a2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    23a6:	94 fd       	sbrc	r25, 4
    23a8:	fc cf       	rjmp	.-8      	; 0x23a2 <_Z14i2c_start_waith+0x42>
    23aa:	da cf       	rjmp	.-76     	; 0x2360 <_Z14i2c_start_waith>
    23ac:	08 95       	ret

000023ae <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    23ae:	0e 94 8a 11 	call	0x2314	; 0x2314 <_Z9i2c_starth>

}/* i2c_rep_start */
    23b2:	08 95       	ret

000023b4 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    23b4:	84 e9       	ldi	r24, 0x94	; 148
    23b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    23ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    23be:	84 fd       	sbrc	r24, 4
    23c0:	fc cf       	rjmp	.-8      	; 0x23ba <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    23c2:	08 95       	ret

000023c4 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    23c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    23c8:	84 e8       	ldi	r24, 0x84	; 132
    23ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    23ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    23d2:	88 23       	and	r24, r24
    23d4:	e4 f7       	brge	.-8      	; 0x23ce <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    23d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    23da:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    23dc:	88 32       	cpi	r24, 0x28	; 40
    23de:	11 f0       	breq	.+4      	; 0x23e4 <_Z9i2c_writeh+0x20>
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	08 95       	ret
	return 0;
    23e4:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    23e6:	08 95       	ret

000023e8 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    23e8:	84 ec       	ldi	r24, 0xC4	; 196
    23ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
    23ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    23f2:	88 23       	and	r24, r24
    23f4:	e4 f7       	brge	.-8      	; 0x23ee <_Z11i2c_readAckv+0x6>

    return TWDR;
    23f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
    23fa:	08 95       	ret

000023fc <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    23fc:	84 e8       	ldi	r24, 0x84	; 132
    23fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
    2402:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2406:	88 23       	and	r24, r24
    2408:	e4 f7       	brge	.-8      	; 0x2402 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    240a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
    240e:	08 95       	ret

00002410 <_Z8btnPressv>:
{
} //~Keypad


char btnPress(){
	keyDir = 0x0F;
    2410:	8f e0       	ldi	r24, 0x0F	; 15
    2412:	87 b9       	out	0x07, r24	; 7
	for (int i=0;i<4;i++){
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	64 30       	cpi	r22, 0x04	; 4
    241a:	71 05       	cpc	r23, r1
    241c:	94 f5       	brge	.+100    	; 0x2482 <_Z8btnPressv+0x72>
		keyPort = 1<<row[i];
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	fb 01       	movw	r30, r22
    2424:	e1 59       	subi	r30, 0x91	; 145
    2426:	fe 4f       	sbci	r31, 0xFE	; 254
    2428:	00 80       	ld	r0, Z
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <_Z8btnPressv+0x20>
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	0a 94       	dec	r0
    2432:	e2 f7       	brpl	.-8      	; 0x242c <_Z8btnPressv+0x1c>
    2434:	88 b9       	out	0x08, r24	; 8
		for (int j = 0;j<3;j++){
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	83 30       	cpi	r24, 0x03	; 3
    243c:	91 05       	cpc	r25, r1
    243e:	f4 f4       	brge	.+60     	; 0x247c <_Z8btnPressv+0x6c>
			if (keyPin==(1<<colomn[j])){
    2440:	43 b1       	in	r20, 0x03	; 3
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	21 e0       	ldi	r18, 0x01	; 1
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	fc 01       	movw	r30, r24
    244a:	e4 59       	subi	r30, 0x94	; 148
    244c:	fe 4f       	sbci	r31, 0xFE	; 254
    244e:	00 80       	ld	r0, Z
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <_Z8btnPressv+0x46>
    2452:	22 0f       	add	r18, r18
    2454:	33 1f       	adc	r19, r19
    2456:	0a 94       	dec	r0
    2458:	e2 f7       	brpl	.-8      	; 0x2452 <_Z8btnPressv+0x42>
    245a:	42 17       	cp	r20, r18
    245c:	53 07       	cpc	r21, r19
    245e:	61 f4       	brne	.+24     	; 0x2478 <_Z8btnPressv+0x68>
				//_delay_ms(100);
				return keys[i][j];
    2460:	9b 01       	movw	r18, r22
    2462:	22 0f       	add	r18, r18
    2464:	33 1f       	adc	r19, r19
    2466:	62 0f       	add	r22, r18
    2468:	73 1f       	adc	r23, r19
    246a:	6d 58       	subi	r22, 0x8D	; 141
    246c:	7e 4f       	sbci	r23, 0xFE	; 254
    246e:	fb 01       	movw	r30, r22
    2470:	e8 0f       	add	r30, r24
    2472:	f9 1f       	adc	r31, r25
    2474:	80 81       	ld	r24, Z
    2476:	08 95       	ret

char btnPress(){
	keyDir = 0x0F;
	for (int i=0;i<4;i++){
		keyPort = 1<<row[i];
		for (int j = 0;j<3;j++){
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	df cf       	rjmp	.-66     	; 0x243a <_Z8btnPressv+0x2a>
} //~Keypad


char btnPress(){
	keyDir = 0x0F;
	for (int i=0;i<4;i++){
    247c:	6f 5f       	subi	r22, 0xFF	; 255
    247e:	7f 4f       	sbci	r23, 0xFF	; 255
    2480:	cb cf       	rjmp	.-106    	; 0x2418 <_Z8btnPressv+0x8>
				//_delay_ms(100);
				return keys[i][j];
			}
		}
	}
	return '&';
    2482:	86 e2       	ldi	r24, 0x26	; 38
    2484:	08 95       	ret

00002486 <main>:

#ifndef F_CPU
#define F_CPU 1000000UL
#endif
int main()
{
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	2c 97       	sbiw	r28, 0x0c	; 12
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
	init_buzzer();		// Initialize pins used for buzzer and Interrupt button
    249a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_Z11init_buzzerv>
	LCD_Init();			/* Initialization of LCD*/
    249e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_Z8LCD_Initv>
	LCD_String("   WELCOME!!!");
    24a2:	8e eb       	ldi	r24, 0xBE	; 190
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_Z10LCD_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24aa:	2f e3       	ldi	r18, 0x3F	; 63
    24ac:	8d e0       	ldi	r24, 0x0D	; 13
    24ae:	93 e0       	ldi	r25, 0x03	; 3
    24b0:	21 50       	subi	r18, 0x01	; 1
    24b2:	80 40       	sbci	r24, 0x00	; 0
    24b4:	90 40       	sbci	r25, 0x00	; 0
    24b6:	e1 f7       	brne	.-8      	; 0x24b0 <main+0x2a>
    24b8:	00 c0       	rjmp	.+0      	; 0x24ba <main+0x34>
    24ba:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
    24bc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_Z9LCD_Clearv>
	ds1307_init();
    24c0:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <_Z11ds1307_initv>
	int clocktime[6] = {21,05,4,12,8,35};
    24c4:	8c e0       	ldi	r24, 0x0C	; 12
    24c6:	ef e7       	ldi	r30, 0x7F	; 127
    24c8:	f1 e0       	ldi	r31, 0x01	; 1
    24ca:	de 01       	movw	r26, r28
    24cc:	11 96       	adiw	r26, 0x01	; 1
    24ce:	01 90       	ld	r0, Z+
    24d0:	0d 92       	st	X+, r0
    24d2:	8a 95       	dec	r24
    24d4:	e1 f7       	brne	.-8      	; 0x24ce <main+0x48>
	setClockTime(clocktime);
    24d6:	ce 01       	movw	r24, r28
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	0e 94 2b 09 	call	0x1256	; 0x1256 <_Z12setClockTimePi>
	//setAlarm(1209);
	int menu = 0;
    24de:	00 e0       	ldi	r16, 0x00	; 0
    24e0:	10 e0       	ldi	r17, 0x00	; 0
	char key;
	while(1){
		checkAlarm();
    24e2:	0e 94 75 08 	call	0x10ea	; 0x10ea <_Z10checkAlarmv>
		key = btnPress();
    24e6:	0e 94 08 12 	call	0x2410	; 0x2410 <_Z8btnPressv>
    24ea:	f8 2e       	mov	r15, r24
		if (menu==0){
    24ec:	01 15       	cp	r16, r1
    24ee:	11 05       	cpc	r17, r1
    24f0:	11 f4       	brne	.+4      	; 0x24f6 <main+0x70>
			displayTime();
    24f2:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z11displayTimev>
		}
		if (key=='*'){
    24f6:	2a e2       	ldi	r18, 0x2A	; 42
    24f8:	f2 12       	cpse	r15, r18
    24fa:	0d c0       	rjmp	.+26     	; 0x2516 <main+0x90>
    24fc:	8f e7       	ldi	r24, 0x7F	; 127
    24fe:	98 e3       	ldi	r25, 0x38	; 56
    2500:	21 e0       	ldi	r18, 0x01	; 1
    2502:	81 50       	subi	r24, 0x01	; 1
    2504:	90 40       	sbci	r25, 0x00	; 0
    2506:	20 40       	sbci	r18, 0x00	; 0
    2508:	e1 f7       	brne	.-8      	; 0x2502 <main+0x7c>
    250a:	00 c0       	rjmp	.+0      	; 0x250c <main+0x86>
    250c:	00 00       	nop
			_delay_ms(400);
			menu ++;
    250e:	0f 5f       	subi	r16, 0xFF	; 255
    2510:	1f 4f       	sbci	r17, 0xFF	; 255
			LCD_Clear();
    2512:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_Z9LCD_Clearv>
		}
		if (menu>0){
    2516:	10 16       	cp	r1, r16
    2518:	11 06       	cpc	r1, r17
    251a:	24 f4       	brge	.+8      	; 0x2524 <main+0x9e>
			LCD_Menu(key,menu);
    251c:	b8 01       	movw	r22, r16
    251e:	8f 2d       	mov	r24, r15
    2520:	0e 94 0c 10 	call	0x2018	; 0x2018 <_Z8LCD_Menuci>
		}
		if (menu==3 | menu==-1){
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	03 30       	cpi	r16, 0x03	; 3
    2528:	11 05       	cpc	r17, r1
    252a:	09 f0       	breq	.+2      	; 0x252e <main+0xa8>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	81 11       	cpse	r24, r1
    2530:	08 c0       	rjmp	.+16     	; 0x2542 <main+0xbc>
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	0f 3f       	cpi	r16, 0xFF	; 255
    2536:	9f ef       	ldi	r25, 0xFF	; 255
    2538:	19 07       	cpc	r17, r25
    253a:	09 f0       	breq	.+2      	; 0x253e <main+0xb8>
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	88 23       	and	r24, r24
    2540:	11 f0       	breq	.+4      	; 0x2546 <main+0xc0>
			menu = 0;
    2542:	00 e0       	ldi	r16, 0x00	; 0
    2544:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (key=='#'){
    2546:	23 e2       	ldi	r18, 0x23	; 35
    2548:	f2 12       	cpse	r15, r18
    254a:	cb cf       	rjmp	.-106    	; 0x24e2 <main+0x5c>
    254c:	8f e7       	ldi	r24, 0x7F	; 127
    254e:	98 e3       	ldi	r25, 0x38	; 56
    2550:	21 e0       	ldi	r18, 0x01	; 1
    2552:	81 50       	subi	r24, 0x01	; 1
    2554:	90 40       	sbci	r25, 0x00	; 0
    2556:	20 40       	sbci	r18, 0x00	; 0
    2558:	e1 f7       	brne	.-8      	; 0x2552 <main+0xcc>
    255a:	00 c0       	rjmp	.+0      	; 0x255c <main+0xd6>
    255c:	00 00       	nop
			_delay_ms(400);
			menu --;
    255e:	01 50       	subi	r16, 0x01	; 1
    2560:	11 09       	sbc	r17, r1
			LCD_Clear();
    2562:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_Z9LCD_Clearv>
    2566:	bd cf       	rjmp	.-134    	; 0x24e2 <main+0x5c>

00002568 <__cmpsf2>:
    2568:	0e 94 9e 13 	call	0x273c	; 0x273c <__fp_cmp>
    256c:	08 f4       	brcc	.+2      	; 0x2570 <__cmpsf2+0x8>
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	08 95       	ret

00002572 <__divsf3>:
    2572:	0e 94 cd 12 	call	0x259a	; 0x259a <__divsf3x>
    2576:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__fp_round>
    257a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__fp_pscB>
    257e:	58 f0       	brcs	.+22     	; 0x2596 <__divsf3+0x24>
    2580:	0e 94 cb 13 	call	0x2796	; 0x2796 <__fp_pscA>
    2584:	40 f0       	brcs	.+16     	; 0x2596 <__divsf3+0x24>
    2586:	29 f4       	brne	.+10     	; 0x2592 <__divsf3+0x20>
    2588:	5f 3f       	cpi	r21, 0xFF	; 255
    258a:	29 f0       	breq	.+10     	; 0x2596 <__divsf3+0x24>
    258c:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__fp_inf>
    2590:	51 11       	cpse	r21, r1
    2592:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__fp_szero>
    2596:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__fp_nan>

0000259a <__divsf3x>:
    259a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__fp_split3>
    259e:	68 f3       	brcs	.-38     	; 0x257a <__divsf3+0x8>

000025a0 <__divsf3_pse>:
    25a0:	99 23       	and	r25, r25
    25a2:	b1 f3       	breq	.-20     	; 0x2590 <__divsf3+0x1e>
    25a4:	55 23       	and	r21, r21
    25a6:	91 f3       	breq	.-28     	; 0x258c <__divsf3+0x1a>
    25a8:	95 1b       	sub	r25, r21
    25aa:	55 0b       	sbc	r21, r21
    25ac:	bb 27       	eor	r27, r27
    25ae:	aa 27       	eor	r26, r26
    25b0:	62 17       	cp	r22, r18
    25b2:	73 07       	cpc	r23, r19
    25b4:	84 07       	cpc	r24, r20
    25b6:	38 f0       	brcs	.+14     	; 0x25c6 <__divsf3_pse+0x26>
    25b8:	9f 5f       	subi	r25, 0xFF	; 255
    25ba:	5f 4f       	sbci	r21, 0xFF	; 255
    25bc:	22 0f       	add	r18, r18
    25be:	33 1f       	adc	r19, r19
    25c0:	44 1f       	adc	r20, r20
    25c2:	aa 1f       	adc	r26, r26
    25c4:	a9 f3       	breq	.-22     	; 0x25b0 <__divsf3_pse+0x10>
    25c6:	35 d0       	rcall	.+106    	; 0x2632 <__divsf3_pse+0x92>
    25c8:	0e 2e       	mov	r0, r30
    25ca:	3a f0       	brmi	.+14     	; 0x25da <__divsf3_pse+0x3a>
    25cc:	e0 e8       	ldi	r30, 0x80	; 128
    25ce:	32 d0       	rcall	.+100    	; 0x2634 <__divsf3_pse+0x94>
    25d0:	91 50       	subi	r25, 0x01	; 1
    25d2:	50 40       	sbci	r21, 0x00	; 0
    25d4:	e6 95       	lsr	r30
    25d6:	00 1c       	adc	r0, r0
    25d8:	ca f7       	brpl	.-14     	; 0x25cc <__divsf3_pse+0x2c>
    25da:	2b d0       	rcall	.+86     	; 0x2632 <__divsf3_pse+0x92>
    25dc:	fe 2f       	mov	r31, r30
    25de:	29 d0       	rcall	.+82     	; 0x2632 <__divsf3_pse+0x92>
    25e0:	66 0f       	add	r22, r22
    25e2:	77 1f       	adc	r23, r23
    25e4:	88 1f       	adc	r24, r24
    25e6:	bb 1f       	adc	r27, r27
    25e8:	26 17       	cp	r18, r22
    25ea:	37 07       	cpc	r19, r23
    25ec:	48 07       	cpc	r20, r24
    25ee:	ab 07       	cpc	r26, r27
    25f0:	b0 e8       	ldi	r27, 0x80	; 128
    25f2:	09 f0       	breq	.+2      	; 0x25f6 <__divsf3_pse+0x56>
    25f4:	bb 0b       	sbc	r27, r27
    25f6:	80 2d       	mov	r24, r0
    25f8:	bf 01       	movw	r22, r30
    25fa:	ff 27       	eor	r31, r31
    25fc:	93 58       	subi	r25, 0x83	; 131
    25fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2600:	3a f0       	brmi	.+14     	; 0x2610 <__divsf3_pse+0x70>
    2602:	9e 3f       	cpi	r25, 0xFE	; 254
    2604:	51 05       	cpc	r21, r1
    2606:	78 f0       	brcs	.+30     	; 0x2626 <__divsf3_pse+0x86>
    2608:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__fp_inf>
    260c:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__fp_szero>
    2610:	5f 3f       	cpi	r21, 0xFF	; 255
    2612:	e4 f3       	brlt	.-8      	; 0x260c <__divsf3_pse+0x6c>
    2614:	98 3e       	cpi	r25, 0xE8	; 232
    2616:	d4 f3       	brlt	.-12     	; 0x260c <__divsf3_pse+0x6c>
    2618:	86 95       	lsr	r24
    261a:	77 95       	ror	r23
    261c:	67 95       	ror	r22
    261e:	b7 95       	ror	r27
    2620:	f7 95       	ror	r31
    2622:	9f 5f       	subi	r25, 0xFF	; 255
    2624:	c9 f7       	brne	.-14     	; 0x2618 <__divsf3_pse+0x78>
    2626:	88 0f       	add	r24, r24
    2628:	91 1d       	adc	r25, r1
    262a:	96 95       	lsr	r25
    262c:	87 95       	ror	r24
    262e:	97 f9       	bld	r25, 7
    2630:	08 95       	ret
    2632:	e1 e0       	ldi	r30, 0x01	; 1
    2634:	66 0f       	add	r22, r22
    2636:	77 1f       	adc	r23, r23
    2638:	88 1f       	adc	r24, r24
    263a:	bb 1f       	adc	r27, r27
    263c:	62 17       	cp	r22, r18
    263e:	73 07       	cpc	r23, r19
    2640:	84 07       	cpc	r24, r20
    2642:	ba 07       	cpc	r27, r26
    2644:	20 f0       	brcs	.+8      	; 0x264e <__divsf3_pse+0xae>
    2646:	62 1b       	sub	r22, r18
    2648:	73 0b       	sbc	r23, r19
    264a:	84 0b       	sbc	r24, r20
    264c:	ba 0b       	sbc	r27, r26
    264e:	ee 1f       	adc	r30, r30
    2650:	88 f7       	brcc	.-30     	; 0x2634 <__divsf3_pse+0x94>
    2652:	e0 95       	com	r30
    2654:	08 95       	ret

00002656 <__fixsfsi>:
    2656:	0e 94 32 13 	call	0x2664	; 0x2664 <__fixunssfsi>
    265a:	68 94       	set
    265c:	b1 11       	cpse	r27, r1
    265e:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__fp_szero>
    2662:	08 95       	ret

00002664 <__fixunssfsi>:
    2664:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__fp_splitA>
    2668:	88 f0       	brcs	.+34     	; 0x268c <__fixunssfsi+0x28>
    266a:	9f 57       	subi	r25, 0x7F	; 127
    266c:	98 f0       	brcs	.+38     	; 0x2694 <__fixunssfsi+0x30>
    266e:	b9 2f       	mov	r27, r25
    2670:	99 27       	eor	r25, r25
    2672:	b7 51       	subi	r27, 0x17	; 23
    2674:	b0 f0       	brcs	.+44     	; 0x26a2 <__fixunssfsi+0x3e>
    2676:	e1 f0       	breq	.+56     	; 0x26b0 <__fixunssfsi+0x4c>
    2678:	66 0f       	add	r22, r22
    267a:	77 1f       	adc	r23, r23
    267c:	88 1f       	adc	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	1a f0       	brmi	.+6      	; 0x2688 <__fixunssfsi+0x24>
    2682:	ba 95       	dec	r27
    2684:	c9 f7       	brne	.-14     	; 0x2678 <__fixunssfsi+0x14>
    2686:	14 c0       	rjmp	.+40     	; 0x26b0 <__fixunssfsi+0x4c>
    2688:	b1 30       	cpi	r27, 0x01	; 1
    268a:	91 f0       	breq	.+36     	; 0x26b0 <__fixunssfsi+0x4c>
    268c:	0e 94 0c 14 	call	0x2818	; 0x2818 <__fp_zero>
    2690:	b1 e0       	ldi	r27, 0x01	; 1
    2692:	08 95       	ret
    2694:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__fp_zero>
    2698:	67 2f       	mov	r22, r23
    269a:	78 2f       	mov	r23, r24
    269c:	88 27       	eor	r24, r24
    269e:	b8 5f       	subi	r27, 0xF8	; 248
    26a0:	39 f0       	breq	.+14     	; 0x26b0 <__fixunssfsi+0x4c>
    26a2:	b9 3f       	cpi	r27, 0xF9	; 249
    26a4:	cc f3       	brlt	.-14     	; 0x2698 <__fixunssfsi+0x34>
    26a6:	86 95       	lsr	r24
    26a8:	77 95       	ror	r23
    26aa:	67 95       	ror	r22
    26ac:	b3 95       	inc	r27
    26ae:	d9 f7       	brne	.-10     	; 0x26a6 <__fixunssfsi+0x42>
    26b0:	3e f4       	brtc	.+14     	; 0x26c0 <__fixunssfsi+0x5c>
    26b2:	90 95       	com	r25
    26b4:	80 95       	com	r24
    26b6:	70 95       	com	r23
    26b8:	61 95       	neg	r22
    26ba:	7f 4f       	sbci	r23, 0xFF	; 255
    26bc:	8f 4f       	sbci	r24, 0xFF	; 255
    26be:	9f 4f       	sbci	r25, 0xFF	; 255
    26c0:	08 95       	ret

000026c2 <__floatunsisf>:
    26c2:	e8 94       	clt
    26c4:	09 c0       	rjmp	.+18     	; 0x26d8 <__floatsisf+0x12>

000026c6 <__floatsisf>:
    26c6:	97 fb       	bst	r25, 7
    26c8:	3e f4       	brtc	.+14     	; 0x26d8 <__floatsisf+0x12>
    26ca:	90 95       	com	r25
    26cc:	80 95       	com	r24
    26ce:	70 95       	com	r23
    26d0:	61 95       	neg	r22
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	8f 4f       	sbci	r24, 0xFF	; 255
    26d6:	9f 4f       	sbci	r25, 0xFF	; 255
    26d8:	99 23       	and	r25, r25
    26da:	a9 f0       	breq	.+42     	; 0x2706 <__floatsisf+0x40>
    26dc:	f9 2f       	mov	r31, r25
    26de:	96 e9       	ldi	r25, 0x96	; 150
    26e0:	bb 27       	eor	r27, r27
    26e2:	93 95       	inc	r25
    26e4:	f6 95       	lsr	r31
    26e6:	87 95       	ror	r24
    26e8:	77 95       	ror	r23
    26ea:	67 95       	ror	r22
    26ec:	b7 95       	ror	r27
    26ee:	f1 11       	cpse	r31, r1
    26f0:	f8 cf       	rjmp	.-16     	; 0x26e2 <__floatsisf+0x1c>
    26f2:	fa f4       	brpl	.+62     	; 0x2732 <__floatsisf+0x6c>
    26f4:	bb 0f       	add	r27, r27
    26f6:	11 f4       	brne	.+4      	; 0x26fc <__floatsisf+0x36>
    26f8:	60 ff       	sbrs	r22, 0
    26fa:	1b c0       	rjmp	.+54     	; 0x2732 <__floatsisf+0x6c>
    26fc:	6f 5f       	subi	r22, 0xFF	; 255
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	8f 4f       	sbci	r24, 0xFF	; 255
    2702:	9f 4f       	sbci	r25, 0xFF	; 255
    2704:	16 c0       	rjmp	.+44     	; 0x2732 <__floatsisf+0x6c>
    2706:	88 23       	and	r24, r24
    2708:	11 f0       	breq	.+4      	; 0x270e <__floatsisf+0x48>
    270a:	96 e9       	ldi	r25, 0x96	; 150
    270c:	11 c0       	rjmp	.+34     	; 0x2730 <__floatsisf+0x6a>
    270e:	77 23       	and	r23, r23
    2710:	21 f0       	breq	.+8      	; 0x271a <__floatsisf+0x54>
    2712:	9e e8       	ldi	r25, 0x8E	; 142
    2714:	87 2f       	mov	r24, r23
    2716:	76 2f       	mov	r23, r22
    2718:	05 c0       	rjmp	.+10     	; 0x2724 <__floatsisf+0x5e>
    271a:	66 23       	and	r22, r22
    271c:	71 f0       	breq	.+28     	; 0x273a <__floatsisf+0x74>
    271e:	96 e8       	ldi	r25, 0x86	; 134
    2720:	86 2f       	mov	r24, r22
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	2a f0       	brmi	.+10     	; 0x2732 <__floatsisf+0x6c>
    2728:	9a 95       	dec	r25
    272a:	66 0f       	add	r22, r22
    272c:	77 1f       	adc	r23, r23
    272e:	88 1f       	adc	r24, r24
    2730:	da f7       	brpl	.-10     	; 0x2728 <__floatsisf+0x62>
    2732:	88 0f       	add	r24, r24
    2734:	96 95       	lsr	r25
    2736:	87 95       	ror	r24
    2738:	97 f9       	bld	r25, 7
    273a:	08 95       	ret

0000273c <__fp_cmp>:
    273c:	99 0f       	add	r25, r25
    273e:	00 08       	sbc	r0, r0
    2740:	55 0f       	add	r21, r21
    2742:	aa 0b       	sbc	r26, r26
    2744:	e0 e8       	ldi	r30, 0x80	; 128
    2746:	fe ef       	ldi	r31, 0xFE	; 254
    2748:	16 16       	cp	r1, r22
    274a:	17 06       	cpc	r1, r23
    274c:	e8 07       	cpc	r30, r24
    274e:	f9 07       	cpc	r31, r25
    2750:	c0 f0       	brcs	.+48     	; 0x2782 <__fp_cmp+0x46>
    2752:	12 16       	cp	r1, r18
    2754:	13 06       	cpc	r1, r19
    2756:	e4 07       	cpc	r30, r20
    2758:	f5 07       	cpc	r31, r21
    275a:	98 f0       	brcs	.+38     	; 0x2782 <__fp_cmp+0x46>
    275c:	62 1b       	sub	r22, r18
    275e:	73 0b       	sbc	r23, r19
    2760:	84 0b       	sbc	r24, r20
    2762:	95 0b       	sbc	r25, r21
    2764:	39 f4       	brne	.+14     	; 0x2774 <__fp_cmp+0x38>
    2766:	0a 26       	eor	r0, r26
    2768:	61 f0       	breq	.+24     	; 0x2782 <__fp_cmp+0x46>
    276a:	23 2b       	or	r18, r19
    276c:	24 2b       	or	r18, r20
    276e:	25 2b       	or	r18, r21
    2770:	21 f4       	brne	.+8      	; 0x277a <__fp_cmp+0x3e>
    2772:	08 95       	ret
    2774:	0a 26       	eor	r0, r26
    2776:	09 f4       	brne	.+2      	; 0x277a <__fp_cmp+0x3e>
    2778:	a1 40       	sbci	r26, 0x01	; 1
    277a:	a6 95       	lsr	r26
    277c:	8f ef       	ldi	r24, 0xFF	; 255
    277e:	81 1d       	adc	r24, r1
    2780:	81 1d       	adc	r24, r1
    2782:	08 95       	ret

00002784 <__fp_inf>:
    2784:	97 f9       	bld	r25, 7
    2786:	9f 67       	ori	r25, 0x7F	; 127
    2788:	80 e8       	ldi	r24, 0x80	; 128
    278a:	70 e0       	ldi	r23, 0x00	; 0
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	08 95       	ret

00002790 <__fp_nan>:
    2790:	9f ef       	ldi	r25, 0xFF	; 255
    2792:	80 ec       	ldi	r24, 0xC0	; 192
    2794:	08 95       	ret

00002796 <__fp_pscA>:
    2796:	00 24       	eor	r0, r0
    2798:	0a 94       	dec	r0
    279a:	16 16       	cp	r1, r22
    279c:	17 06       	cpc	r1, r23
    279e:	18 06       	cpc	r1, r24
    27a0:	09 06       	cpc	r0, r25
    27a2:	08 95       	ret

000027a4 <__fp_pscB>:
    27a4:	00 24       	eor	r0, r0
    27a6:	0a 94       	dec	r0
    27a8:	12 16       	cp	r1, r18
    27aa:	13 06       	cpc	r1, r19
    27ac:	14 06       	cpc	r1, r20
    27ae:	05 06       	cpc	r0, r21
    27b0:	08 95       	ret

000027b2 <__fp_round>:
    27b2:	09 2e       	mov	r0, r25
    27b4:	03 94       	inc	r0
    27b6:	00 0c       	add	r0, r0
    27b8:	11 f4       	brne	.+4      	; 0x27be <__fp_round+0xc>
    27ba:	88 23       	and	r24, r24
    27bc:	52 f0       	brmi	.+20     	; 0x27d2 <__fp_round+0x20>
    27be:	bb 0f       	add	r27, r27
    27c0:	40 f4       	brcc	.+16     	; 0x27d2 <__fp_round+0x20>
    27c2:	bf 2b       	or	r27, r31
    27c4:	11 f4       	brne	.+4      	; 0x27ca <__fp_round+0x18>
    27c6:	60 ff       	sbrs	r22, 0
    27c8:	04 c0       	rjmp	.+8      	; 0x27d2 <__fp_round+0x20>
    27ca:	6f 5f       	subi	r22, 0xFF	; 255
    27cc:	7f 4f       	sbci	r23, 0xFF	; 255
    27ce:	8f 4f       	sbci	r24, 0xFF	; 255
    27d0:	9f 4f       	sbci	r25, 0xFF	; 255
    27d2:	08 95       	ret

000027d4 <__fp_split3>:
    27d4:	57 fd       	sbrc	r21, 7
    27d6:	90 58       	subi	r25, 0x80	; 128
    27d8:	44 0f       	add	r20, r20
    27da:	55 1f       	adc	r21, r21
    27dc:	59 f0       	breq	.+22     	; 0x27f4 <__fp_splitA+0x10>
    27de:	5f 3f       	cpi	r21, 0xFF	; 255
    27e0:	71 f0       	breq	.+28     	; 0x27fe <__fp_splitA+0x1a>
    27e2:	47 95       	ror	r20

000027e4 <__fp_splitA>:
    27e4:	88 0f       	add	r24, r24
    27e6:	97 fb       	bst	r25, 7
    27e8:	99 1f       	adc	r25, r25
    27ea:	61 f0       	breq	.+24     	; 0x2804 <__fp_splitA+0x20>
    27ec:	9f 3f       	cpi	r25, 0xFF	; 255
    27ee:	79 f0       	breq	.+30     	; 0x280e <__fp_splitA+0x2a>
    27f0:	87 95       	ror	r24
    27f2:	08 95       	ret
    27f4:	12 16       	cp	r1, r18
    27f6:	13 06       	cpc	r1, r19
    27f8:	14 06       	cpc	r1, r20
    27fa:	55 1f       	adc	r21, r21
    27fc:	f2 cf       	rjmp	.-28     	; 0x27e2 <__fp_split3+0xe>
    27fe:	46 95       	lsr	r20
    2800:	f1 df       	rcall	.-30     	; 0x27e4 <__fp_splitA>
    2802:	08 c0       	rjmp	.+16     	; 0x2814 <__fp_splitA+0x30>
    2804:	16 16       	cp	r1, r22
    2806:	17 06       	cpc	r1, r23
    2808:	18 06       	cpc	r1, r24
    280a:	99 1f       	adc	r25, r25
    280c:	f1 cf       	rjmp	.-30     	; 0x27f0 <__fp_splitA+0xc>
    280e:	86 95       	lsr	r24
    2810:	71 05       	cpc	r23, r1
    2812:	61 05       	cpc	r22, r1
    2814:	08 94       	sec
    2816:	08 95       	ret

00002818 <__fp_zero>:
    2818:	e8 94       	clt

0000281a <__fp_szero>:
    281a:	bb 27       	eor	r27, r27
    281c:	66 27       	eor	r22, r22
    281e:	77 27       	eor	r23, r23
    2820:	cb 01       	movw	r24, r22
    2822:	97 f9       	bld	r25, 7
    2824:	08 95       	ret

00002826 <__gesf2>:
    2826:	0e 94 9e 13 	call	0x273c	; 0x273c <__fp_cmp>
    282a:	08 f4       	brcc	.+2      	; 0x282e <__gesf2+0x8>
    282c:	8f ef       	ldi	r24, 0xFF	; 255
    282e:	08 95       	ret

00002830 <__mulsf3>:
    2830:	0e 94 2b 14 	call	0x2856	; 0x2856 <__mulsf3x>
    2834:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__fp_round>
    2838:	0e 94 cb 13 	call	0x2796	; 0x2796 <__fp_pscA>
    283c:	38 f0       	brcs	.+14     	; 0x284c <__mulsf3+0x1c>
    283e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__fp_pscB>
    2842:	20 f0       	brcs	.+8      	; 0x284c <__mulsf3+0x1c>
    2844:	95 23       	and	r25, r21
    2846:	11 f0       	breq	.+4      	; 0x284c <__mulsf3+0x1c>
    2848:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__fp_inf>
    284c:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__fp_nan>
    2850:	11 24       	eor	r1, r1
    2852:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__fp_szero>

00002856 <__mulsf3x>:
    2856:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__fp_split3>
    285a:	70 f3       	brcs	.-36     	; 0x2838 <__mulsf3+0x8>

0000285c <__mulsf3_pse>:
    285c:	95 9f       	mul	r25, r21
    285e:	c1 f3       	breq	.-16     	; 0x2850 <__mulsf3+0x20>
    2860:	95 0f       	add	r25, r21
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	55 1f       	adc	r21, r21
    2866:	62 9f       	mul	r22, r18
    2868:	f0 01       	movw	r30, r0
    286a:	72 9f       	mul	r23, r18
    286c:	bb 27       	eor	r27, r27
    286e:	f0 0d       	add	r31, r0
    2870:	b1 1d       	adc	r27, r1
    2872:	63 9f       	mul	r22, r19
    2874:	aa 27       	eor	r26, r26
    2876:	f0 0d       	add	r31, r0
    2878:	b1 1d       	adc	r27, r1
    287a:	aa 1f       	adc	r26, r26
    287c:	64 9f       	mul	r22, r20
    287e:	66 27       	eor	r22, r22
    2880:	b0 0d       	add	r27, r0
    2882:	a1 1d       	adc	r26, r1
    2884:	66 1f       	adc	r22, r22
    2886:	82 9f       	mul	r24, r18
    2888:	22 27       	eor	r18, r18
    288a:	b0 0d       	add	r27, r0
    288c:	a1 1d       	adc	r26, r1
    288e:	62 1f       	adc	r22, r18
    2890:	73 9f       	mul	r23, r19
    2892:	b0 0d       	add	r27, r0
    2894:	a1 1d       	adc	r26, r1
    2896:	62 1f       	adc	r22, r18
    2898:	83 9f       	mul	r24, r19
    289a:	a0 0d       	add	r26, r0
    289c:	61 1d       	adc	r22, r1
    289e:	22 1f       	adc	r18, r18
    28a0:	74 9f       	mul	r23, r20
    28a2:	33 27       	eor	r19, r19
    28a4:	a0 0d       	add	r26, r0
    28a6:	61 1d       	adc	r22, r1
    28a8:	23 1f       	adc	r18, r19
    28aa:	84 9f       	mul	r24, r20
    28ac:	60 0d       	add	r22, r0
    28ae:	21 1d       	adc	r18, r1
    28b0:	82 2f       	mov	r24, r18
    28b2:	76 2f       	mov	r23, r22
    28b4:	6a 2f       	mov	r22, r26
    28b6:	11 24       	eor	r1, r1
    28b8:	9f 57       	subi	r25, 0x7F	; 127
    28ba:	50 40       	sbci	r21, 0x00	; 0
    28bc:	9a f0       	brmi	.+38     	; 0x28e4 <__mulsf3_pse+0x88>
    28be:	f1 f0       	breq	.+60     	; 0x28fc <__mulsf3_pse+0xa0>
    28c0:	88 23       	and	r24, r24
    28c2:	4a f0       	brmi	.+18     	; 0x28d6 <__mulsf3_pse+0x7a>
    28c4:	ee 0f       	add	r30, r30
    28c6:	ff 1f       	adc	r31, r31
    28c8:	bb 1f       	adc	r27, r27
    28ca:	66 1f       	adc	r22, r22
    28cc:	77 1f       	adc	r23, r23
    28ce:	88 1f       	adc	r24, r24
    28d0:	91 50       	subi	r25, 0x01	; 1
    28d2:	50 40       	sbci	r21, 0x00	; 0
    28d4:	a9 f7       	brne	.-22     	; 0x28c0 <__mulsf3_pse+0x64>
    28d6:	9e 3f       	cpi	r25, 0xFE	; 254
    28d8:	51 05       	cpc	r21, r1
    28da:	80 f0       	brcs	.+32     	; 0x28fc <__mulsf3_pse+0xa0>
    28dc:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__fp_inf>
    28e0:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__fp_szero>
    28e4:	5f 3f       	cpi	r21, 0xFF	; 255
    28e6:	e4 f3       	brlt	.-8      	; 0x28e0 <__mulsf3_pse+0x84>
    28e8:	98 3e       	cpi	r25, 0xE8	; 232
    28ea:	d4 f3       	brlt	.-12     	; 0x28e0 <__mulsf3_pse+0x84>
    28ec:	86 95       	lsr	r24
    28ee:	77 95       	ror	r23
    28f0:	67 95       	ror	r22
    28f2:	b7 95       	ror	r27
    28f4:	f7 95       	ror	r31
    28f6:	e7 95       	ror	r30
    28f8:	9f 5f       	subi	r25, 0xFF	; 255
    28fa:	c1 f7       	brne	.-16     	; 0x28ec <__mulsf3_pse+0x90>
    28fc:	fe 2b       	or	r31, r30
    28fe:	88 0f       	add	r24, r24
    2900:	91 1d       	adc	r25, r1
    2902:	96 95       	lsr	r25
    2904:	87 95       	ror	r24
    2906:	97 f9       	bld	r25, 7
    2908:	08 95       	ret

0000290a <__divmodhi4>:
    290a:	97 fb       	bst	r25, 7
    290c:	07 2e       	mov	r0, r23
    290e:	16 f4       	brtc	.+4      	; 0x2914 <__divmodhi4+0xa>
    2910:	00 94       	com	r0
    2912:	07 d0       	rcall	.+14     	; 0x2922 <__divmodhi4_neg1>
    2914:	77 fd       	sbrc	r23, 7
    2916:	09 d0       	rcall	.+18     	; 0x292a <__divmodhi4_neg2>
    2918:	0e 94 99 14 	call	0x2932	; 0x2932 <__udivmodhi4>
    291c:	07 fc       	sbrc	r0, 7
    291e:	05 d0       	rcall	.+10     	; 0x292a <__divmodhi4_neg2>
    2920:	3e f4       	brtc	.+14     	; 0x2930 <__divmodhi4_exit>

00002922 <__divmodhi4_neg1>:
    2922:	90 95       	com	r25
    2924:	81 95       	neg	r24
    2926:	9f 4f       	sbci	r25, 0xFF	; 255
    2928:	08 95       	ret

0000292a <__divmodhi4_neg2>:
    292a:	70 95       	com	r23
    292c:	61 95       	neg	r22
    292e:	7f 4f       	sbci	r23, 0xFF	; 255

00002930 <__divmodhi4_exit>:
    2930:	08 95       	ret

00002932 <__udivmodhi4>:
    2932:	aa 1b       	sub	r26, r26
    2934:	bb 1b       	sub	r27, r27
    2936:	51 e1       	ldi	r21, 0x11	; 17
    2938:	07 c0       	rjmp	.+14     	; 0x2948 <__udivmodhi4_ep>

0000293a <__udivmodhi4_loop>:
    293a:	aa 1f       	adc	r26, r26
    293c:	bb 1f       	adc	r27, r27
    293e:	a6 17       	cp	r26, r22
    2940:	b7 07       	cpc	r27, r23
    2942:	10 f0       	brcs	.+4      	; 0x2948 <__udivmodhi4_ep>
    2944:	a6 1b       	sub	r26, r22
    2946:	b7 0b       	sbc	r27, r23

00002948 <__udivmodhi4_ep>:
    2948:	88 1f       	adc	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	5a 95       	dec	r21
    294e:	a9 f7       	brne	.-22     	; 0x293a <__udivmodhi4_loop>
    2950:	80 95       	com	r24
    2952:	90 95       	com	r25
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	08 95       	ret

0000295a <__itoa_ncheck>:
    295a:	bb 27       	eor	r27, r27
    295c:	4a 30       	cpi	r20, 0x0A	; 10
    295e:	31 f4       	brne	.+12     	; 0x296c <__itoa_ncheck+0x12>
    2960:	99 23       	and	r25, r25
    2962:	22 f4       	brpl	.+8      	; 0x296c <__itoa_ncheck+0x12>
    2964:	bd e2       	ldi	r27, 0x2D	; 45
    2966:	90 95       	com	r25
    2968:	81 95       	neg	r24
    296a:	9f 4f       	sbci	r25, 0xFF	; 255
    296c:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__utoa_common>

00002970 <__utoa_ncheck>:
    2970:	bb 27       	eor	r27, r27

00002972 <__utoa_common>:
    2972:	fb 01       	movw	r30, r22
    2974:	55 27       	eor	r21, r21
    2976:	aa 27       	eor	r26, r26
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	aa 1f       	adc	r26, r26
    297e:	a4 17       	cp	r26, r20
    2980:	10 f0       	brcs	.+4      	; 0x2986 <__utoa_common+0x14>
    2982:	a4 1b       	sub	r26, r20
    2984:	83 95       	inc	r24
    2986:	50 51       	subi	r21, 0x10	; 16
    2988:	b9 f7       	brne	.-18     	; 0x2978 <__utoa_common+0x6>
    298a:	a0 5d       	subi	r26, 0xD0	; 208
    298c:	aa 33       	cpi	r26, 0x3A	; 58
    298e:	08 f0       	brcs	.+2      	; 0x2992 <__utoa_common+0x20>
    2990:	a9 5d       	subi	r26, 0xD9	; 217
    2992:	a1 93       	st	Z+, r26
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	79 f7       	brne	.-34     	; 0x2976 <__utoa_common+0x4>
    2998:	b1 11       	cpse	r27, r1
    299a:	b1 93       	st	Z+, r27
    299c:	11 92       	st	Z+, r1
    299e:	cb 01       	movw	r24, r22
    29a0:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <strrev>

000029a4 <strrev>:
    29a4:	dc 01       	movw	r26, r24
    29a6:	fc 01       	movw	r30, r24
    29a8:	67 2f       	mov	r22, r23
    29aa:	71 91       	ld	r23, Z+
    29ac:	77 23       	and	r23, r23
    29ae:	e1 f7       	brne	.-8      	; 0x29a8 <strrev+0x4>
    29b0:	32 97       	sbiw	r30, 0x02	; 2
    29b2:	04 c0       	rjmp	.+8      	; 0x29bc <strrev+0x18>
    29b4:	7c 91       	ld	r23, X
    29b6:	6d 93       	st	X+, r22
    29b8:	70 83       	st	Z, r23
    29ba:	62 91       	ld	r22, -Z
    29bc:	ae 17       	cp	r26, r30
    29be:	bf 07       	cpc	r27, r31
    29c0:	c8 f3       	brcs	.-14     	; 0x29b4 <strrev+0x10>
    29c2:	08 95       	ret

000029c4 <_exit>:
    29c4:	f8 94       	cli

000029c6 <__stop_program>:
    29c6:	ff cf       	rjmp	.-2      	; 0x29c6 <__stop_program>
