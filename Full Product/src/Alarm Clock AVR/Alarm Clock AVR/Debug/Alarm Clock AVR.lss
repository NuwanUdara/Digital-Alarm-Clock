
Alarm Clock AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00003064  000030f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003064  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  0080025e  0080025e  00003256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b1e  00000000  00000000  00003530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012f8  00000000  00000000  0000704e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019dd  00000000  00000000  00008346  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  00009d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d63  00000000  00000000  0000a408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024fc  00000000  00000000  0000b16b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000d667  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__ctors_end>
       4:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
       8:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__vector_2>
       c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      10:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      14:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      18:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      1c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      20:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      24:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      28:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      2c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      30:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      34:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      38:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      3c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      40:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      44:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      48:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      4c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      50:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      54:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      58:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      5c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      60:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      64:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	52 00       	.word	0x0052	; ????
      6a:	08 00       	.word	0x0008	; ????
      6c:	52 00       	.word	0x0052	; ????
      6e:	08 00       	.word	0x0008	; ????
      70:	a5 00       	.word	0x00a5	; ????
      72:	08 00       	.word	0x0008	; ????
      74:	52 00       	.word	0x0052	; ????
      76:	08 00       	.word	0x0008	; ????
      78:	52 00       	.word	0x0052	; ????
      7a:	08 00       	.word	0x0008	; ????
      7c:	93 00       	.word	0x0093	; ????
      7e:	08 00       	.word	0x0008	; ????
      80:	52 00       	.word	0x0052	; ????
      82:	08 00       	.word	0x0008	; ????
      84:	52 00       	.word	0x0052	; ????
      86:	08 00       	.word	0x0008	; ????
      88:	83 00       	.word	0x0083	; ????
      8a:	08 00       	.word	0x0008	; ????
      8c:	52 00       	.word	0x0052	; ????
      8e:	08 00       	.word	0x0008	; ????
      90:	52 00       	.word	0x0052	; ????
      92:	08 00       	.word	0x0008	; ????
      94:	75 00       	.word	0x0075	; ????
      96:	08 00       	.word	0x0008	; ????
      98:	52 00       	.word	0x0052	; ????
      9a:	08 00       	.word	0x0008	; ????
      9c:	52 00       	.word	0x0052	; ????
      9e:	08 00       	.word	0x0008	; ????
      a0:	7b 00       	.word	0x007b	; ????
      a2:	08 00       	.word	0x0008	; ????
      a4:	83 00       	.word	0x0083	; ????
      a6:	08 00       	.word	0x0008	; ????
      a8:	52 00       	.word	0x0052	; ????
      aa:	08 00       	.word	0x0008	; ????
      ac:	52 00       	.word	0x0052	; ????
      ae:	08 00       	.word	0x0008	; ????
      b0:	a5 00       	.word	0x00a5	; ????
      b2:	08 00       	.word	0x0008	; ????
      b4:	52 00       	.word	0x0052	; ????
      b6:	08 00       	.word	0x0008	; ????
      b8:	52 00       	.word	0x0052	; ????
      ba:	08 00       	.word	0x0008	; ????
      bc:	93 00       	.word	0x0093	; ????
      be:	08 00       	.word	0x0008	; ????
      c0:	52 00       	.word	0x0052	; ????
      c2:	08 00       	.word	0x0008	; ????
      c4:	52 00       	.word	0x0052	; ????
      c6:	08 00       	.word	0x0008	; ????
      c8:	83 00       	.word	0x0083	; ????
      ca:	08 00       	.word	0x0008	; ????
      cc:	52 00       	.word	0x0052	; ????
      ce:	08 00       	.word	0x0008	; ????
      d0:	52 00       	.word	0x0052	; ????
      d2:	08 00       	.word	0x0008	; ????
      d4:	75 00       	.word	0x0075	; ????
      d6:	fe ff       	.word	0xfffe	; ????
      d8:	52 00       	.word	0x0052	; ????
      da:	08 00       	.word	0x0008	; ????
      dc:	52 00       	.word	0x0052	; ????
      de:	08 00       	.word	0x0008	; ????
      e0:	a5 00       	.word	0x00a5	; ????
      e2:	08 00       	.word	0x0008	; ????
      e4:	52 00       	.word	0x0052	; ????
      e6:	08 00       	.word	0x0008	; ????
      e8:	52 00       	.word	0x0052	; ????
      ea:	08 00       	.word	0x0008	; ????
      ec:	93 00       	.word	0x0093	; ????
      ee:	08 00       	.word	0x0008	; ????
      f0:	52 00       	.word	0x0052	; ????
      f2:	08 00       	.word	0x0008	; ????
      f4:	52 00       	.word	0x0052	; ????
      f6:	08 00       	.word	0x0008	; ????
      f8:	83 00       	.word	0x0083	; ????
      fa:	08 00       	.word	0x0008	; ????
      fc:	52 00       	.word	0x0052	; ????
      fe:	08 00       	.word	0x0008	; ????
     100:	52 00       	.word	0x0052	; ????
     102:	08 00       	.word	0x0008	; ????
     104:	75 00       	.word	0x0075	; ????
     106:	08 00       	.word	0x0008	; ????
     108:	52 00       	.word	0x0052	; ????
     10a:	08 00       	.word	0x0008	; ????
     10c:	52 00       	.word	0x0052	; ????
     10e:	08 00       	.word	0x0008	; ????
     110:	7b 00       	.word	0x007b	; ????
     112:	08 00       	.word	0x0008	; ????
     114:	83 00       	.word	0x0083	; ????
     116:	08 00       	.word	0x0008	; ????
     118:	52 00       	.word	0x0052	; ????
     11a:	08 00       	.word	0x0008	; ????
     11c:	52 00       	.word	0x0052	; ????
     11e:	08 00       	.word	0x0008	; ????
     120:	a5 00       	.word	0x00a5	; ????
     122:	08 00       	.word	0x0008	; ????
     124:	52 00       	.word	0x0052	; ????
     126:	08 00       	.word	0x0008	; ????
     128:	52 00       	.word	0x0052	; ????
     12a:	08 00       	.word	0x0008	; ????
     12c:	93 00       	.word	0x0093	; ????
     12e:	08 00       	.word	0x0008	; ????
     130:	52 00       	.word	0x0052	; ????
     132:	08 00       	.word	0x0008	; ????
     134:	52 00       	.word	0x0052	; ????
     136:	08 00       	.word	0x0008	; ????
     138:	83 00       	.word	0x0083	; ????
     13a:	08 00       	.word	0x0008	; ????
     13c:	52 00       	.word	0x0052	; ????
     13e:	08 00       	.word	0x0008	; ????
     140:	52 00       	.word	0x0052	; ????
     142:	08 00       	.word	0x0008	; ????
     144:	75 00       	.word	0x0075	; ????
     146:	fe ff       	.word	0xfffe	; ????
     148:	52 00       	.word	0x0052	; ????
     14a:	08 00       	.word	0x0008	; ????
     14c:	52 00       	.word	0x0052	; ????
     14e:	08 00       	.word	0x0008	; ????
     150:	a5 00       	.word	0x00a5	; ????
     152:	08 00       	.word	0x0008	; ????
     154:	52 00       	.word	0x0052	; ????
     156:	08 00       	.word	0x0008	; ????
     158:	52 00       	.word	0x0052	; ????
     15a:	08 00       	.word	0x0008	; ????
     15c:	93 00       	.word	0x0093	; ????
     15e:	08 00       	.word	0x0008	; ????
     160:	52 00       	.word	0x0052	; ????
     162:	08 00       	.word	0x0008	; ????
     164:	52 00       	.word	0x0052	; ????
     166:	08 00       	.word	0x0008	; ????
     168:	83 00       	.word	0x0083	; ????
     16a:	08 00       	.word	0x0008	; ????
     16c:	52 00       	.word	0x0052	; ????
     16e:	08 00       	.word	0x0008	; ????
     170:	52 00       	.word	0x0052	; ????
     172:	08 00       	.word	0x0008	; ????
     174:	75 00       	.word	0x0075	; ????
     176:	08 00       	.word	0x0008	; ????
     178:	52 00       	.word	0x0052	; ????
     17a:	08 00       	.word	0x0008	; ????
     17c:	52 00       	.word	0x0052	; ????
     17e:	08 00       	.word	0x0008	; ????
     180:	7b 00       	.word	0x007b	; ????
     182:	08 00       	.word	0x0008	; ????
     184:	83 00       	.word	0x0083	; ????
     186:	08 00       	.word	0x0008	; ????
     188:	52 00       	.word	0x0052	; ????
     18a:	08 00       	.word	0x0008	; ????
     18c:	52 00       	.word	0x0052	; ????
     18e:	08 00       	.word	0x0008	; ????
     190:	a5 00       	.word	0x00a5	; ????
     192:	08 00       	.word	0x0008	; ????
     194:	52 00       	.word	0x0052	; ????
     196:	08 00       	.word	0x0008	; ????
     198:	52 00       	.word	0x0052	; ????
     19a:	08 00       	.word	0x0008	; ????
     19c:	93 00       	.word	0x0093	; ????
     19e:	08 00       	.word	0x0008	; ????
     1a0:	52 00       	.word	0x0052	; ????
     1a2:	08 00       	.word	0x0008	; ????
     1a4:	52 00       	.word	0x0052	; ????
     1a6:	08 00       	.word	0x0008	; ????
     1a8:	83 00       	.word	0x0083	; ????
     1aa:	08 00       	.word	0x0008	; ????
     1ac:	52 00       	.word	0x0052	; ????
     1ae:	08 00       	.word	0x0008	; ????
     1b0:	52 00       	.word	0x0052	; ????
     1b2:	08 00       	.word	0x0008	; ????
     1b4:	75 00       	.word	0x0075	; ????
     1b6:	fe ff       	.word	0xfffe	; ????
     1b8:	52 00       	.word	0x0052	; ????
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	52 00       	.word	0x0052	; ????
     1be:	08 00       	.word	0x0008	; ????
     1c0:	a5 00       	.word	0x00a5	; ????
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	52 00       	.word	0x0052	; ????
     1c6:	08 00       	.word	0x0008	; ????
     1c8:	52 00       	.word	0x0052	; ????
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	93 00       	.word	0x0093	; ????
     1ce:	08 00       	.word	0x0008	; ????
     1d0:	52 00       	.word	0x0052	; ????
     1d2:	08 00       	.word	0x0008	; ????
     1d4:	52 00       	.word	0x0052	; ????
     1d6:	08 00       	.word	0x0008	; ????
     1d8:	83 00       	.word	0x0083	; ????
     1da:	08 00       	.word	0x0008	; ????
     1dc:	52 00       	.word	0x0052	; ????
     1de:	08 00       	.word	0x0008	; ????
     1e0:	52 00       	.word	0x0052	; ????
     1e2:	08 00       	.word	0x0008	; ????
     1e4:	75 00       	.word	0x0075	; ????
     1e6:	08 00       	.word	0x0008	; ????
     1e8:	52 00       	.word	0x0052	; ????
     1ea:	08 00       	.word	0x0008	; ????
     1ec:	52 00       	.word	0x0052	; ????
     1ee:	08 00       	.word	0x0008	; ????
     1f0:	7b 00       	.word	0x007b	; ????
     1f2:	08 00       	.word	0x0008	; ????
     1f4:	83 00       	.word	0x0083	; ????
     1f6:	08 00       	.word	0x0008	; ????
     1f8:	52 00       	.word	0x0052	; ????
     1fa:	08 00       	.word	0x0008	; ????
     1fc:	52 00       	.word	0x0052	; ????
     1fe:	08 00       	.word	0x0008	; ????
     200:	a5 00       	.word	0x00a5	; ????
     202:	08 00       	.word	0x0008	; ????
     204:	52 00       	.word	0x0052	; ????
     206:	08 00       	.word	0x0008	; ????
     208:	52 00       	.word	0x0052	; ????
     20a:	08 00       	.word	0x0008	; ????
     20c:	93 00       	.word	0x0093	; ????
     20e:	08 00       	.word	0x0008	; ????
     210:	52 00       	.word	0x0052	; ????
     212:	08 00       	.word	0x0008	; ????
     214:	52 00       	.word	0x0052	; ????
     216:	08 00       	.word	0x0008	; ????
     218:	b9 00       	.word	0x00b9	; ????
     21a:	f0 ff       	sbrs	r31, 0
     21c:	93 00       	.word	0x0093	; ????
     21e:	f0 ff       	sbrs	r31, 0
     220:	7b 00       	.word	0x007b	; ????
     222:	f0 ff       	sbrs	r31, 0
     224:	dc 00       	.word	0x00dc	; ????
     226:	f0 ff       	sbrs	r31, 0
     228:	b9 00       	.word	0x00b9	; ????
     22a:	f0 ff       	sbrs	r31, 0
     22c:	7b 00       	.word	0x007b	; ????
     22e:	f0 ff       	sbrs	r31, 0
     230:	93 00       	.word	0x0093	; ????
     232:	f0 ff       	sbrs	r31, 0
     234:	b9 00       	.word	0x00b9	; ????
     236:	f0 ff       	sbrs	r31, 0
     238:	dc 00       	.word	0x00dc	; ????
     23a:	f0 ff       	sbrs	r31, 0
     23c:	b9 00       	.word	0x00b9	; ????
     23e:	f0 ff       	sbrs	r31, 0
     240:	93 00       	.word	0x0093	; ????
     242:	f0 ff       	sbrs	r31, 0
     244:	7b 00       	.word	0x007b	; ????
     246:	f0 ff       	sbrs	r31, 0
	...
     388:	b8 01       	movw	r22, r16
     38a:	04 00       	.word	0x0004	; ????
     38c:	b8 01       	movw	r22, r16
     38e:	04 00       	.word	0x0004	; ????
     390:	b8 01       	movw	r22, r16
     392:	04 00       	.word	0x0004	; ????
     394:	5d 01       	movw	r10, r26
     396:	f8 ff       	.word	0xfff8	; ????
     398:	0b 02       	muls	r16, r27
     39a:	10 00       	.word	0x0010	; ????
     39c:	b8 01       	movw	r22, r16
     39e:	04 00       	.word	0x0004	; ????
     3a0:	5d 01       	movw	r10, r26
     3a2:	f8 ff       	.word	0xfff8	; ????
     3a4:	0b 02       	muls	r16, r27
     3a6:	10 00       	.word	0x0010	; ????
     3a8:	b8 01       	movw	r22, r16
     3aa:	02 00       	.word	0x0002	; ????
     3ac:	93 02       	muls	r25, r19
     3ae:	04 00       	.word	0x0004	; ????
     3b0:	93 02       	muls	r25, r19
     3b2:	04 00       	.word	0x0004	; ????
     3b4:	93 02       	muls	r25, r19
     3b6:	04 00       	.word	0x0004	; ????
     3b8:	ba 02       	muls	r27, r26
     3ba:	f8 ff       	.word	0xfff8	; ????
     3bc:	0b 02       	muls	r16, r27
     3be:	10 00       	.word	0x0010	; ????
     3c0:	b8 01       	movw	r22, r16
     3c2:	04 00       	.word	0x0004	; ????
     3c4:	5d 01       	movw	r10, r26
     3c6:	f8 ff       	.word	0xfff8	; ????
     3c8:	0b 02       	muls	r16, r27
     3ca:	10 00       	.word	0x0010	; ????
     3cc:	b8 01       	movw	r22, r16
     3ce:	02 00       	.word	0x0002	; ????
     3d0:	70 03       	mulsu	r23, r16
     3d2:	04 00       	.word	0x0004	; ????
     3d4:	b8 01       	movw	r22, r16
     3d6:	f8 ff       	.word	0xfff8	; ????
     3d8:	b8 01       	movw	r22, r16
     3da:	10 00       	.word	0x0010	; ????
     3dc:	70 03       	mulsu	r23, r16
     3de:	04 00       	.word	0x0004	; ????
     3e0:	3f 03       	fmul	r19, r23
     3e2:	f8 ff       	.word	0xfff8	; ????
     3e4:	10 03       	mulsu	r17, r16
     3e6:	10 00       	.word	0x0010	; ????
     3e8:	6e 02       	muls	r22, r30
     3ea:	10 00       	.word	0x0010	; ????
     3ec:	4b 02       	muls	r20, r27
     3ee:	10 00       	.word	0x0010	; ????
     3f0:	6e 02       	muls	r22, r30
     3f2:	08 00       	.word	0x0008	; ????
     3f4:	00 00       	nop
     3f6:	08 00       	.word	0x0008	; ????
     3f8:	b8 01       	movw	r22, r16
     3fa:	08 00       	.word	0x0008	; ????
     3fc:	6e 02       	muls	r22, r30
     3fe:	04 00       	.word	0x0004	; ????
     400:	4b 02       	muls	r20, r27
     402:	f8 ff       	.word	0xfff8	; ????
     404:	2a 02       	muls	r18, r26
     406:	10 00       	.word	0x0010	; ????
     408:	0b 02       	muls	r16, r27
     40a:	10 00       	.word	0x0010	; ????
     40c:	ee 01       	movw	r28, r28
     40e:	10 00       	.word	0x0010	; ????
     410:	0b 02       	muls	r16, r27
     412:	10 00       	.word	0x0010	; ????
     414:	00 00       	nop
     416:	08 00       	.word	0x0008	; ????
     418:	5d 01       	movw	r10, r26
     41a:	08 00       	.word	0x0008	; ????
     41c:	9f 01       	movw	r18, r30
     41e:	04 00       	.word	0x0004	; ????
     420:	5d 01       	movw	r10, r26
     422:	f8 ff       	.word	0xfff8	; ????
     424:	b8 01       	movw	r22, r16
     426:	f0 ff       	sbrs	r31, 0
     428:	0b 02       	muls	r16, r27
     42a:	04 00       	.word	0x0004	; ????
     42c:	b8 01       	movw	r22, r16
     42e:	f8 ff       	.word	0xfff8	; ????
     430:	0b 02       	muls	r16, r27
     432:	10 00       	.word	0x0010	; ????
     434:	93 02       	muls	r25, r19
     436:	02 00       	.word	0x0002	; ????
     438:	70 03       	mulsu	r23, r16
     43a:	04 00       	.word	0x0004	; ????
     43c:	b8 01       	movw	r22, r16
     43e:	f8 ff       	.word	0xfff8	; ????
     440:	b8 01       	movw	r22, r16
     442:	10 00       	.word	0x0010	; ????
     444:	70 03       	mulsu	r23, r16
     446:	04 00       	.word	0x0004	; ????
     448:	3f 03       	fmul	r19, r23
     44a:	f8 ff       	.word	0xfff8	; ????
     44c:	10 03       	mulsu	r17, r16
     44e:	10 00       	.word	0x0010	; ????
     450:	6e 02       	muls	r22, r30
     452:	10 00       	.word	0x0010	; ????
     454:	4b 02       	muls	r20, r27
     456:	10 00       	.word	0x0010	; ????
     458:	6e 02       	muls	r22, r30
     45a:	08 00       	.word	0x0008	; ????
     45c:	00 00       	nop
     45e:	08 00       	.word	0x0008	; ????
     460:	b8 01       	movw	r22, r16
     462:	08 00       	.word	0x0008	; ????
     464:	6e 02       	muls	r22, r30
     466:	04 00       	.word	0x0004	; ????
     468:	4b 02       	muls	r20, r27
     46a:	f8 ff       	.word	0xfff8	; ????
     46c:	2a 02       	muls	r18, r26
     46e:	10 00       	.word	0x0010	; ????
     470:	0b 02       	muls	r16, r27
     472:	10 00       	.word	0x0010	; ????
     474:	ee 01       	movw	r28, r28
     476:	10 00       	.word	0x0010	; ????
     478:	0b 02       	muls	r16, r27
     47a:	10 00       	.word	0x0010	; ????
     47c:	00 00       	nop
     47e:	08 00       	.word	0x0008	; ????
     480:	5d 01       	movw	r10, r26
     482:	08 00       	.word	0x0008	; ????
     484:	9f 01       	movw	r18, r30
     486:	04 00       	.word	0x0004	; ????
     488:	5d 01       	movw	r10, r26
     48a:	f8 ff       	.word	0xfff8	; ????
     48c:	b8 01       	movw	r22, r16
     48e:	f0 ff       	sbrs	r31, 0
     490:	b8 01       	movw	r22, r16
     492:	04 00       	.word	0x0004	; ????
     494:	5d 01       	movw	r10, r26
     496:	f8 ff       	.word	0xfff8	; ????
     498:	0b 02       	muls	r16, r27
     49a:	10 00       	.word	0x0010	; ????
     49c:	b8 01       	movw	r22, r16
     49e:	02 00       	.word	0x0002	; ????
	...
     6a8:	88 01       	movw	r16, r16
     6aa:	08 00       	.word	0x0008	; ????
     6ac:	06 01       	movw	r0, r12
     6ae:	08 00       	.word	0x0008	; ????
     6b0:	37 01       	movw	r6, r14
     6b2:	10 00       	.word	0x0010	; ????
     6b4:	5d 01       	movw	r10, r26
     6b6:	10 00       	.word	0x0010	; ????
     6b8:	88 01       	movw	r16, r16
     6ba:	08 00       	.word	0x0008	; ????
     6bc:	06 01       	movw	r0, r12
     6be:	08 00       	.word	0x0008	; ????
     6c0:	37 01       	movw	r6, r14
     6c2:	10 00       	.word	0x0010	; ????
     6c4:	5d 01       	movw	r10, r26
     6c6:	10 00       	.word	0x0010	; ????
     6c8:	88 01       	movw	r16, r16
     6ca:	08 00       	.word	0x0008	; ????
     6cc:	06 01       	movw	r0, r12
     6ce:	08 00       	.word	0x0008	; ????
     6d0:	37 01       	movw	r6, r14
     6d2:	10 00       	.word	0x0010	; ????
     6d4:	5d 01       	movw	r10, r26
     6d6:	10 00       	.word	0x0010	; ????
     6d8:	88 01       	movw	r16, r16
     6da:	08 00       	.word	0x0008	; ????
     6dc:	06 01       	movw	r0, r12
     6de:	08 00       	.word	0x0008	; ????
     6e0:	37 01       	movw	r6, r14
     6e2:	10 00       	.word	0x0010	; ????
     6e4:	5d 01       	movw	r10, r26
     6e6:	10 00       	.word	0x0010	; ????
     6e8:	88 01       	movw	r16, r16
     6ea:	08 00       	.word	0x0008	; ????
     6ec:	06 01       	movw	r0, r12
     6ee:	08 00       	.word	0x0008	; ????
     6f0:	4a 01       	movw	r8, r20
     6f2:	10 00       	.word	0x0010	; ????
     6f4:	5d 01       	movw	r10, r26
     6f6:	10 00       	.word	0x0010	; ????
     6f8:	88 01       	movw	r16, r16
     6fa:	08 00       	.word	0x0008	; ????
     6fc:	06 01       	movw	r0, r12
     6fe:	08 00       	.word	0x0008	; ????
     700:	4a 01       	movw	r8, r20
     702:	10 00       	.word	0x0010	; ????
     704:	5d 01       	movw	r10, r26
     706:	10 00       	.word	0x0010	; ????
     708:	88 01       	movw	r16, r16
     70a:	08 00       	.word	0x0008	; ????
     70c:	06 01       	movw	r0, r12
     70e:	08 00       	.word	0x0008	; ????
     710:	4a 01       	movw	r8, r20
     712:	10 00       	.word	0x0010	; ????
     714:	5d 01       	movw	r10, r26
     716:	10 00       	.word	0x0010	; ????
     718:	88 01       	movw	r16, r16
     71a:	08 00       	.word	0x0008	; ????
     71c:	06 01       	movw	r0, r12
     71e:	08 00       	.word	0x0008	; ????
     720:	4a 01       	movw	r8, r20
     722:	10 00       	.word	0x0010	; ????
     724:	5d 01       	movw	r10, r26
     726:	10 00       	.word	0x0010	; ????
     728:	88 01       	movw	r16, r16
     72a:	fc ff       	.word	0xfffc	; ????
     72c:	06 01       	movw	r0, r12
     72e:	fc ff       	.word	0xfffc	; ????
     730:	37 01       	movw	r6, r14
     732:	10 00       	.word	0x0010	; ????
     734:	5d 01       	movw	r10, r26
     736:	10 00       	.word	0x0010	; ????
     738:	88 01       	movw	r16, r16
     73a:	04 00       	.word	0x0004	; ????
     73c:	06 01       	movw	r0, r12
     73e:	04 00       	.word	0x0004	; ????
     740:	37 01       	movw	r6, r14
     742:	10 00       	.word	0x0010	; ????
     744:	5d 01       	movw	r10, r26
     746:	10 00       	.word	0x0010	; ????
     748:	26 01       	movw	r4, r12
     74a:	ff ff       	.word	0xffff	; ????
     74c:	5d 01       	movw	r10, r26
     74e:	fc ff       	.word	0xfffc	; ????
     750:	e9 00       	.word	0x00e9	; ????
     752:	fc ff       	.word	0xfffc	; ????
     754:	37 01       	movw	r6, r14
     756:	10 00       	.word	0x0010	; ????
     758:	26 01       	movw	r4, r12
     75a:	10 00       	.word	0x0010	; ????
     75c:	5d 01       	movw	r10, r26
     75e:	04 00       	.word	0x0004	; ????
     760:	e9 00       	.word	0x00e9	; ????
     762:	fc ff       	.word	0xfffc	; ????
     764:	37 01       	movw	r6, r14
     766:	10 00       	.word	0x0010	; ????
     768:	26 01       	movw	r4, r12
     76a:	10 00       	.word	0x0010	; ????
     76c:	06 01       	movw	r0, r12
     76e:	ff ff       	.word	0xffff	; ????
     770:	88 01       	movw	r16, r16
     772:	fc ff       	.word	0xfffc	; ????
     774:	06 01       	movw	r0, r12
     776:	fc ff       	.word	0xfffc	; ????
     778:	37 01       	movw	r6, r14
     77a:	10 00       	.word	0x0010	; ????
     77c:	5d 01       	movw	r10, r26
     77e:	10 00       	.word	0x0010	; ????
     780:	88 01       	movw	r16, r16
     782:	04 00       	.word	0x0004	; ????
     784:	06 01       	movw	r0, r12
     786:	04 00       	.word	0x0004	; ????
     788:	37 01       	movw	r6, r14
     78a:	10 00       	.word	0x0010	; ????
     78c:	5d 01       	movw	r10, r26
     78e:	10 00       	.word	0x0010	; ????
     790:	26 01       	movw	r4, r12
     792:	ff ff       	.word	0xffff	; ????
     794:	5d 01       	movw	r10, r26
     796:	fc ff       	.word	0xfffc	; ????
     798:	e9 00       	.word	0x00e9	; ????
     79a:	fc ff       	.word	0xfffc	; ????
     79c:	37 01       	movw	r6, r14
     79e:	10 00       	.word	0x0010	; ????
     7a0:	26 01       	movw	r4, r12
     7a2:	10 00       	.word	0x0010	; ????
     7a4:	5d 01       	movw	r10, r26
     7a6:	04 00       	.word	0x0004	; ????
     7a8:	e9 00       	.word	0x00e9	; ????
     7aa:	fc ff       	.word	0xfffc	; ????
     7ac:	37 01       	movw	r6, r14
     7ae:	10 00       	.word	0x0010	; ????
     7b0:	26 01       	movw	r4, r12
     7b2:	10 00       	.word	0x0010	; ????
     7b4:	06 01       	movw	r0, r12
     7b6:	ff ff       	.word	0xffff	; ????
     7b8:	88 01       	movw	r16, r16
     7ba:	fc ff       	.word	0xfffc	; ????
     7bc:	06 01       	movw	r0, r12
     7be:	fc ff       	.word	0xfffc	; ????
     7c0:	37 01       	movw	r6, r14
     7c2:	10 00       	.word	0x0010	; ????
     7c4:	5d 01       	movw	r10, r26
     7c6:	10 00       	.word	0x0010	; ????
     7c8:	88 01       	movw	r16, r16
     7ca:	04 00       	.word	0x0004	; ????
     7cc:	06 01       	movw	r0, r12
     7ce:	04 00       	.word	0x0004	; ????
     7d0:	37 01       	movw	r6, r14
     7d2:	10 00       	.word	0x0010	; ????
     7d4:	5d 01       	movw	r10, r26
     7d6:	10 00       	.word	0x0010	; ????
     7d8:	26 01       	movw	r4, r12
     7da:	fe ff       	.word	0xfffe	; ????
     7dc:	5d 01       	movw	r10, r26
     7de:	fc ff       	.word	0xfffc	; ????
     7e0:	e9 00       	.word	0x00e9	; ????
     7e2:	fc ff       	.word	0xfffc	; ????
     7e4:	26 01       	movw	r4, r12
     7e6:	f8 ff       	.word	0xfff8	; ????
     7e8:	37 01       	movw	r6, r14
     7ea:	f8 ff       	.word	0xfff8	; ????
     7ec:	26 01       	movw	r4, r12
     7ee:	f8 ff       	.word	0xfff8	; ????
     7f0:	e9 00       	.word	0x00e9	; ????
     7f2:	f8 ff       	.word	0xfff8	; ????
     7f4:	06 01       	movw	r0, r12
     7f6:	ff ff       	.word	0xffff	; ????
     7f8:	0b 02       	muls	r16, r27
     7fa:	fe ff       	.word	0xfffe	; ????
     7fc:	d2 01       	movw	r26, r4
     7fe:	fe ff       	.word	0xfffe	; ????
     800:	06 01       	movw	r0, r12
     802:	fe ff       	.word	0xfffe	; ????
     804:	88 01       	movw	r16, r16
     806:	fe ff       	.word	0xfffe	; ????
     808:	37 01       	movw	r6, r14
     80a:	fe ff       	.word	0xfffe	; ????
     80c:	37 01       	movw	r6, r14
     80e:	fc ff       	.word	0xfffc	; ????
     810:	5d 01       	movw	r10, r26
     812:	fc ff       	.word	0xfffc	; ????
     814:	88 01       	movw	r16, r16
     816:	ff ff       	.word	0xffff	; ????
     818:	0b 02       	muls	r16, r27
     81a:	fe ff       	.word	0xfffe	; ????
     81c:	d2 01       	movw	r26, r4
     81e:	fe ff       	.word	0xfffe	; ????
     820:	06 01       	movw	r0, r12
     822:	fe ff       	.word	0xfffe	; ????
     824:	88 01       	movw	r16, r16
     826:	fe ff       	.word	0xfffe	; ????
     828:	37 01       	movw	r6, r14
     82a:	fe ff       	.word	0xfffe	; ????
     82c:	37 01       	movw	r6, r14
     82e:	fc ff       	.word	0xfffc	; ????
     830:	26 01       	movw	r4, r12
     832:	fc ff       	.word	0xfffc	; ????
     834:	0b 02       	muls	r16, r27
     836:	08 00       	.word	0x0008	; ????
     838:	88 01       	movw	r16, r16
     83a:	08 00       	.word	0x0008	; ????
     83c:	9f 01       	movw	r18, r30
     83e:	10 00       	.word	0x0010	; ????
     840:	d2 01       	movw	r26, r4
     842:	10 00       	.word	0x0010	; ????
     844:	0b 02       	muls	r16, r27
     846:	08 00       	.word	0x0008	; ????
     848:	88 01       	movw	r16, r16
     84a:	08 00       	.word	0x0008	; ????
     84c:	9f 01       	movw	r18, r30
     84e:	10 00       	.word	0x0010	; ????
     850:	d2 01       	movw	r26, r4
     852:	10 00       	.word	0x0010	; ????
     854:	0b 02       	muls	r16, r27
     856:	08 00       	.word	0x0008	; ????
     858:	88 01       	movw	r16, r16
     85a:	08 00       	.word	0x0008	; ????
     85c:	9f 01       	movw	r18, r30
     85e:	10 00       	.word	0x0010	; ????
     860:	d2 01       	movw	r26, r4
     862:	10 00       	.word	0x0010	; ????
     864:	0b 02       	muls	r16, r27
     866:	08 00       	.word	0x0008	; ????
     868:	88 01       	movw	r16, r16
     86a:	08 00       	.word	0x0008	; ????
     86c:	9f 01       	movw	r18, r30
     86e:	10 00       	.word	0x0010	; ????
     870:	d2 01       	movw	r26, r4
     872:	10 00       	.word	0x0010	; ????
     874:	00 00       	nop
     876:	04 00       	.word	0x0004	; ????
     878:	3f 03       	fmul	r19, r23
     87a:	10 00       	.word	0x0010	; ????
     87c:	a4 03       	fmuls	r18, r20
     87e:	10 00       	.word	0x0010	; ????
     880:	17 04       	cpc	r1, r7
     882:	08 00       	.word	0x0008	; ????
     884:	10 03       	mulsu	r17, r16
     886:	08 00       	.word	0x0008	; ????
     888:	3f 03       	fmul	r19, r23
     88a:	10 00       	.word	0x0010	; ????
     88c:	a4 03       	fmuls	r18, r20
     88e:	10 00       	.word	0x0010	; ????
     890:	17 04       	cpc	r1, r7
     892:	08 00       	.word	0x0008	; ????
     894:	10 03       	mulsu	r17, r16
     896:	10 00       	.word	0x0010	; ????
     898:	3f 03       	fmul	r19, r23
     89a:	10 00       	.word	0x0010	; ????
     89c:	a4 03       	fmuls	r18, r20
     89e:	10 00       	.word	0x0010	; ????
     8a0:	17 04       	cpc	r1, r7
     8a2:	08 00       	.word	0x0008	; ????
     8a4:	10 03       	mulsu	r17, r16
     8a6:	08 00       	.word	0x0008	; ????
     8a8:	3f 03       	fmul	r19, r23
     8aa:	10 00       	.word	0x0010	; ????
     8ac:	a4 03       	fmuls	r18, r20
     8ae:	10 00       	.word	0x0010	; ????
	...
     9c8:	4a 01       	movw	r8, r20
     9ca:	fc ff       	.word	0xfffc	; ????
     9cc:	00 00       	nop
     9ce:	08 00       	.word	0x0008	; ????
     9d0:	72 01       	movw	r14, r4
     9d2:	08 00       	.word	0x0008	; ????
     9d4:	88 01       	movw	r16, r16
     9d6:	fc ff       	.word	0xfffc	; ????
     9d8:	00 00       	nop
     9da:	08 00       	.word	0x0008	; ????
     9dc:	37 01       	movw	r6, r14
     9de:	08 00       	.word	0x0008	; ????
     9e0:	4a 01       	movw	r8, r20
     9e2:	f8 ff       	.word	0xfff8	; ????
     9e4:	72 01       	movw	r14, r4
     9e6:	08 00       	.word	0x0008	; ????
     9e8:	88 01       	movw	r16, r16
     9ea:	f8 ff       	.word	0xfff8	; ????
     9ec:	0b 02       	muls	r16, r27
     9ee:	08 00       	.word	0x0008	; ????
     9f0:	ee 01       	movw	r28, r28
     9f2:	f8 ff       	.word	0xfff8	; ????
     9f4:	4a 01       	movw	r8, r20
     9f6:	08 00       	.word	0x0008	; ????
     9f8:	88 01       	movw	r16, r16
     9fa:	f8 ff       	.word	0xfff8	; ????
     9fc:	ee 01       	movw	r28, r28
     9fe:	08 00       	.word	0x0008	; ????
     a00:	d2 01       	movw	r26, r4
     a02:	02 00       	.word	0x0002	; ????
     a04:	b8 01       	movw	r22, r16
     a06:	f0 ff       	sbrs	r31, 0
     a08:	88 01       	movw	r16, r16
     a0a:	f0 ff       	sbrs	r31, 0
     a0c:	4a 01       	movw	r8, r20
     a0e:	f0 ff       	sbrs	r31, 0
     a10:	26 01       	movw	r4, r12
     a12:	f0 ff       	sbrs	r31, 0
     a14:	4a 01       	movw	r8, r20
     a16:	02 00       	.word	0x0002	; ????
     a18:	00 00       	nop
     a1a:	04 00       	.word	0x0004	; ????
     a1c:	00 00       	nop
     a1e:	08 00       	.word	0x0008	; ????
     a20:	37 01       	movw	r6, r14
     a22:	04 00       	.word	0x0004	; ????
     a24:	4a 01       	movw	r8, r20
     a26:	fc ff       	.word	0xfffc	; ????
     a28:	00 00       	nop
     a2a:	08 00       	.word	0x0008	; ????
     a2c:	72 01       	movw	r14, r4
     a2e:	08 00       	.word	0x0008	; ????
     a30:	88 01       	movw	r16, r16
     a32:	fc ff       	.word	0xfffc	; ????
     a34:	00 00       	nop
     a36:	08 00       	.word	0x0008	; ????
     a38:	37 01       	movw	r6, r14
     a3a:	08 00       	.word	0x0008	; ????
     a3c:	4a 01       	movw	r8, r20
     a3e:	f8 ff       	.word	0xfff8	; ????
     a40:	72 01       	movw	r14, r4
     a42:	08 00       	.word	0x0008	; ????
     a44:	88 01       	movw	r16, r16
     a46:	f8 ff       	.word	0xfff8	; ????
     a48:	0b 02       	muls	r16, r27
     a4a:	08 00       	.word	0x0008	; ????
     a4c:	ee 01       	movw	r28, r28
     a4e:	f8 ff       	.word	0xfff8	; ????
     a50:	88 01       	movw	r16, r16
     a52:	08 00       	.word	0x0008	; ????
     a54:	ee 01       	movw	r28, r28
     a56:	f8 ff       	.word	0xfff8	; ????
     a58:	93 02       	muls	r25, r19
     a5a:	08 00       	.word	0x0008	; ????
     a5c:	6e 02       	muls	r22, r30
     a5e:	01 00       	.word	0x0001	; ????
     a60:	4b 02       	muls	r20, r27
     a62:	02 00       	.word	0x0002	; ????
     a64:	00 00       	nop
     a66:	04 00       	.word	0x0004	; ????
     a68:	00 00       	nop
     a6a:	08 00       	.word	0x0008	; ????
     a6c:	37 01       	movw	r6, r14
     a6e:	08 00       	.word	0x0008	; ????
     a70:	4a 01       	movw	r8, r20
     a72:	fc ff       	.word	0xfffc	; ????
     a74:	00 00       	nop
     a76:	08 00       	.word	0x0008	; ????
     a78:	72 01       	movw	r14, r4
     a7a:	08 00       	.word	0x0008	; ????
     a7c:	88 01       	movw	r16, r16
     a7e:	fc ff       	.word	0xfffc	; ????
     a80:	00 00       	nop
     a82:	08 00       	.word	0x0008	; ????
     a84:	37 01       	movw	r6, r14
     a86:	08 00       	.word	0x0008	; ????
     a88:	4a 01       	movw	r8, r20
     a8a:	f8 ff       	.word	0xfff8	; ????
     a8c:	72 01       	movw	r14, r4
     a8e:	08 00       	.word	0x0008	; ????
     a90:	88 01       	movw	r16, r16
     a92:	f8 ff       	.word	0xfff8	; ????
     a94:	0b 02       	muls	r16, r27
     a96:	08 00       	.word	0x0008	; ????
     a98:	ee 01       	movw	r28, r28
     a9a:	f8 ff       	.word	0xfff8	; ????
     a9c:	4a 01       	movw	r8, r20
     a9e:	08 00       	.word	0x0008	; ????
     aa0:	88 01       	movw	r16, r16
     aa2:	f8 ff       	.word	0xfff8	; ????
     aa4:	ee 01       	movw	r28, r28
     aa6:	08 00       	.word	0x0008	; ????
     aa8:	d2 01       	movw	r26, r4
     aaa:	02 00       	.word	0x0002	; ????
     aac:	b8 01       	movw	r22, r16
     aae:	f0 ff       	sbrs	r31, 0
     ab0:	88 01       	movw	r16, r16
     ab2:	f0 ff       	sbrs	r31, 0
     ab4:	4a 01       	movw	r8, r20
     ab6:	f0 ff       	sbrs	r31, 0
     ab8:	26 01       	movw	r4, r12
     aba:	f0 ff       	sbrs	r31, 0
     abc:	4a 01       	movw	r8, r20
     abe:	fc ff       	.word	0xfffc	; ????
     ac0:	00 00       	nop
     ac2:	04 00       	.word	0x0004	; ????
     ac4:	00 00       	nop
     ac6:	04 00       	.word	0x0004	; ????
     ac8:	93 02       	muls	r25, r19
     aca:	f8 ff       	.word	0xfff8	; ????
     acc:	4b 02       	muls	r20, r27
     ace:	08 00       	.word	0x0008	; ????
     ad0:	ee 01       	movw	r28, r28
     ad2:	f8 ff       	.word	0xfff8	; ????
     ad4:	b8 01       	movw	r22, r16
     ad6:	08 00       	.word	0x0008	; ????
     ad8:	88 01       	movw	r16, r16
     ada:	f8 ff       	.word	0xfff8	; ????
     adc:	4a 01       	movw	r8, r20
     ade:	f8 ff       	.word	0xfff8	; ????
     ae0:	d2 01       	movw	r26, r4
     ae2:	10 00       	.word	0x0010	; ????
     ae4:	b8 01       	movw	r22, r16
     ae6:	f8 ff       	.word	0xfff8	; ????
     ae8:	d2 01       	movw	r26, r4
     aea:	10 00       	.word	0x0010	; ????
     aec:	b8 01       	movw	r22, r16
     aee:	f8 ff       	.word	0xfff8	; ????
     af0:	d2 01       	movw	r26, r4
     af2:	10 00       	.word	0x0010	; ????
     af4:	b8 01       	movw	r22, r16
     af6:	f8 ff       	.word	0xfff8	; ????
     af8:	d2 01       	movw	r26, r4
     afa:	10 00       	.word	0x0010	; ????
     afc:	b8 01       	movw	r22, r16
     afe:	f8 ff       	.word	0xfff8	; ????
     b00:	88 01       	movw	r16, r16
     b02:	f0 ff       	sbrs	r31, 0
     b04:	4a 01       	movw	r8, r20
     b06:	f0 ff       	sbrs	r31, 0
     b08:	26 01       	movw	r4, r12
     b0a:	f0 ff       	sbrs	r31, 0
     b0c:	4a 01       	movw	r8, r20
     b0e:	10 00       	.word	0x0010	; ????
     b10:	4a 01       	movw	r8, r20
     b12:	10 00       	.word	0x0010	; ????
     b14:	4a 01       	movw	r8, r20
     b16:	02 00       	.word	0x0002	; ????
	...
     ce8:	00 00       	nop
     cea:	04 00       	.word	0x0004	; ????
     cec:	00 00       	nop
     cee:	08 00       	.word	0x0008	; ????
     cf0:	00 00       	nop
     cf2:	08 00       	.word	0x0008	; ????
     cf4:	00 00       	nop
     cf6:	08 00       	.word	0x0008	; ????
     cf8:	4a 01       	movw	r8, r20
     cfa:	08 00       	.word	0x0008	; ????
     cfc:	b8 01       	movw	r22, r16
     cfe:	08 00       	.word	0x0008	; ????
     d00:	0b 02       	muls	r16, r27
     d02:	08 00       	.word	0x0008	; ????
     d04:	ee 01       	movw	r28, r28
     d06:	08 00       	.word	0x0008	; ????
     d08:	b8 01       	movw	r22, r16
     d0a:	08 00       	.word	0x0008	; ????
     d0c:	0b 02       	muls	r16, r27
     d0e:	08 00       	.word	0x0008	; ????
     d10:	b8 01       	movw	r22, r16
     d12:	08 00       	.word	0x0008	; ????
     d14:	ee 01       	movw	r28, r28
     d16:	08 00       	.word	0x0008	; ????
     d18:	b8 01       	movw	r22, r16
     d1a:	08 00       	.word	0x0008	; ????
     d1c:	5d 01       	movw	r10, r26
     d1e:	08 00       	.word	0x0008	; ????
     d20:	88 01       	movw	r16, r16
     d22:	08 00       	.word	0x0008	; ????
     d24:	4a 01       	movw	r8, r20
     d26:	02 00       	.word	0x0002	; ????
     d28:	4a 01       	movw	r8, r20
     d2a:	08 00       	.word	0x0008	; ????
     d2c:	b8 01       	movw	r22, r16
     d2e:	08 00       	.word	0x0008	; ????
     d30:	0b 02       	muls	r16, r27
     d32:	08 00       	.word	0x0008	; ????
     d34:	ee 01       	movw	r28, r28
     d36:	08 00       	.word	0x0008	; ????
     d38:	b8 01       	movw	r22, r16
     d3a:	08 00       	.word	0x0008	; ????
     d3c:	0b 02       	muls	r16, r27
     d3e:	08 00       	.word	0x0008	; ????
     d40:	b8 01       	movw	r22, r16
     d42:	08 00       	.word	0x0008	; ????
     d44:	0b 02       	muls	r16, r27
     d46:	08 00       	.word	0x0008	; ????
     d48:	b8 01       	movw	r22, r16
     d4a:	08 00       	.word	0x0008	; ????
     d4c:	4a 01       	movw	r8, r20
     d4e:	08 00       	.word	0x0008	; ????
     d50:	37 01       	movw	r6, r14
     d52:	08 00       	.word	0x0008	; ????
     d54:	26 01       	movw	r4, r12
     d56:	02 00       	.word	0x0002	; ????
     d58:	26 01       	movw	r4, r12
     d5a:	08 00       	.word	0x0008	; ????
     d5c:	5d 01       	movw	r10, r26
     d5e:	08 00       	.word	0x0008	; ????
     d60:	9f 01       	movw	r18, r30
     d62:	08 00       	.word	0x0008	; ????
     d64:	ee 01       	movw	r28, r28
     d66:	02 00       	.word	0x0002	; ????
     d68:	26 01       	movw	r4, r12
     d6a:	08 00       	.word	0x0008	; ????
     d6c:	5d 01       	movw	r10, r26
     d6e:	08 00       	.word	0x0008	; ????
     d70:	9f 01       	movw	r18, r30
     d72:	08 00       	.word	0x0008	; ????
     d74:	b8 01       	movw	r22, r16
     d76:	02 00       	.word	0x0002	; ????
     d78:	06 01       	movw	r0, r12
     d7a:	08 00       	.word	0x0008	; ????
     d7c:	06 01       	movw	r0, r12
     d7e:	08 00       	.word	0x0008	; ????
     d80:	88 01       	movw	r16, r16
     d82:	08 00       	.word	0x0008	; ????
     d84:	5d 01       	movw	r10, r26
     d86:	08 00       	.word	0x0008	; ????
     d88:	4a 01       	movw	r8, r20
     d8a:	08 00       	.word	0x0008	; ????
     d8c:	88 01       	movw	r16, r16
     d8e:	08 00       	.word	0x0008	; ????
     d90:	5d 01       	movw	r10, r26
     d92:	08 00       	.word	0x0008	; ????
     d94:	5d 01       	movw	r10, r26
     d96:	08 00       	.word	0x0008	; ????
     d98:	4a 01       	movw	r8, r20
     d9a:	08 00       	.word	0x0008	; ????
     d9c:	4a 01       	movw	r8, r20
     d9e:	08 00       	.word	0x0008	; ????
     da0:	9f 01       	movw	r18, r30
     da2:	08 00       	.word	0x0008	; ????
     da4:	b8 01       	movw	r22, r16
     da6:	02 00       	.word	0x0002	; ????
     da8:	00 00       	nop
     daa:	08 00       	.word	0x0008	; ????
     dac:	b8 01       	movw	r22, r16
     dae:	08 00       	.word	0x0008	; ????
     db0:	b8 01       	movw	r22, r16
     db2:	08 00       	.word	0x0008	; ????
     db4:	9f 01       	movw	r18, r30
     db6:	08 00       	.word	0x0008	; ????
     db8:	88 01       	movw	r16, r16
     dba:	02 00       	.word	0x0002	; ????
     dbc:	ee 01       	movw	r28, r28
     dbe:	08 00       	.word	0x0008	; ????
     dc0:	b8 01       	movw	r22, r16
     dc2:	08 00       	.word	0x0008	; ????
     dc4:	5d 01       	movw	r10, r26
     dc6:	08 00       	.word	0x0008	; ????
     dc8:	4a 01       	movw	r8, r20
     dca:	02 00       	.word	0x0002	; ????
     dcc:	4a 01       	movw	r8, r20
     dce:	08 00       	.word	0x0008	; ????
     dd0:	88 01       	movw	r16, r16
     dd2:	08 00       	.word	0x0008	; ????
     dd4:	4a 01       	movw	r8, r20
     dd6:	08 00       	.word	0x0008	; ????
     dd8:	26 01       	movw	r4, r12
     dda:	02 00       	.word	0x0002	; ????
     ddc:	26 01       	movw	r4, r12
     dde:	08 00       	.word	0x0008	; ????
     de0:	26 01       	movw	r4, r12
     de2:	08 00       	.word	0x0008	; ????
     de4:	5d 01       	movw	r10, r26
     de6:	08 00       	.word	0x0008	; ????
     de8:	37 01       	movw	r6, r14
     dea:	08 00       	.word	0x0008	; ????
     dec:	4a 01       	movw	r8, r20
     dee:	02 00       	.word	0x0002	; ????
     df0:	00 00       	nop
     df2:	08 00       	.word	0x0008	; ????
     df4:	4a 01       	movw	r8, r20
     df6:	08 00       	.word	0x0008	; ????
     df8:	b8 01       	movw	r22, r16
     dfa:	08 00       	.word	0x0008	; ????
     dfc:	0b 02       	muls	r16, r27
     dfe:	08 00       	.word	0x0008	; ????
     e00:	ee 01       	movw	r28, r28
     e02:	08 00       	.word	0x0008	; ????
     e04:	b8 01       	movw	r22, r16
     e06:	08 00       	.word	0x0008	; ????
     e08:	0b 02       	muls	r16, r27
     e0a:	08 00       	.word	0x0008	; ????
     e0c:	b8 01       	movw	r22, r16
     e0e:	08 00       	.word	0x0008	; ????
     e10:	ee 01       	movw	r28, r28
     e12:	08 00       	.word	0x0008	; ????
     e14:	b8 01       	movw	r22, r16
     e16:	08 00       	.word	0x0008	; ????
     e18:	5d 01       	movw	r10, r26
     e1a:	08 00       	.word	0x0008	; ????
     e1c:	88 01       	movw	r16, r16
     e1e:	08 00       	.word	0x0008	; ????
     e20:	4a 01       	movw	r8, r20
     e22:	02 00       	.word	0x0002	; ????
     e24:	4a 01       	movw	r8, r20
     e26:	08 00       	.word	0x0008	; ????
     e28:	b8 01       	movw	r22, r16
     e2a:	08 00       	.word	0x0008	; ????
     e2c:	0b 02       	muls	r16, r27
     e2e:	08 00       	.word	0x0008	; ????
     e30:	ee 01       	movw	r28, r28
     e32:	08 00       	.word	0x0008	; ????
     e34:	b8 01       	movw	r22, r16
     e36:	08 00       	.word	0x0008	; ????
     e38:	0b 02       	muls	r16, r27
     e3a:	08 00       	.word	0x0008	; ????
     e3c:	b8 01       	movw	r22, r16
     e3e:	08 00       	.word	0x0008	; ????
     e40:	0b 02       	muls	r16, r27
     e42:	08 00       	.word	0x0008	; ????
     e44:	b8 01       	movw	r22, r16
     e46:	08 00       	.word	0x0008	; ????
     e48:	4a 01       	movw	r8, r20
     e4a:	08 00       	.word	0x0008	; ????
     e4c:	37 01       	movw	r6, r14
     e4e:	08 00       	.word	0x0008	; ????
     e50:	26 01       	movw	r4, r12
     e52:	02 00       	.word	0x0002	; ????
     e54:	26 01       	movw	r4, r12
     e56:	08 00       	.word	0x0008	; ????
     e58:	5d 01       	movw	r10, r26
     e5a:	08 00       	.word	0x0008	; ????
     e5c:	9f 01       	movw	r18, r30
     e5e:	08 00       	.word	0x0008	; ????
     e60:	ee 01       	movw	r28, r28
     e62:	02 00       	.word	0x0002	; ????
     e64:	26 01       	movw	r4, r12
     e66:	08 00       	.word	0x0008	; ????
     e68:	5d 01       	movw	r10, r26
     e6a:	08 00       	.word	0x0008	; ????
     e6c:	9f 01       	movw	r18, r30
     e6e:	08 00       	.word	0x0008	; ????
     e70:	b8 01       	movw	r22, r16
     e72:	02 00       	.word	0x0002	; ????
     e74:	06 01       	movw	r0, r12
     e76:	08 00       	.word	0x0008	; ????
     e78:	06 01       	movw	r0, r12
     e7a:	08 00       	.word	0x0008	; ????
     e7c:	88 01       	movw	r16, r16
     e7e:	08 00       	.word	0x0008	; ????
     e80:	5d 01       	movw	r10, r26
     e82:	08 00       	.word	0x0008	; ????
     e84:	4a 01       	movw	r8, r20
     e86:	08 00       	.word	0x0008	; ????
     e88:	88 01       	movw	r16, r16
     e8a:	08 00       	.word	0x0008	; ????
     e8c:	5d 01       	movw	r10, r26
     e8e:	08 00       	.word	0x0008	; ????
     e90:	5d 01       	movw	r10, r26
     e92:	08 00       	.word	0x0008	; ????
     e94:	4a 01       	movw	r8, r20
     e96:	08 00       	.word	0x0008	; ????
     e98:	4a 01       	movw	r8, r20
     e9a:	08 00       	.word	0x0008	; ????
     e9c:	9f 01       	movw	r18, r30
     e9e:	08 00       	.word	0x0008	; ????
     ea0:	b8 01       	movw	r22, r16
     ea2:	02 00       	.word	0x0002	; ????
     ea4:	00 00       	nop
     ea6:	08 00       	.word	0x0008	; ????
     ea8:	b8 01       	movw	r22, r16
     eaa:	08 00       	.word	0x0008	; ????
     eac:	b8 01       	movw	r22, r16
     eae:	08 00       	.word	0x0008	; ????
     eb0:	9f 01       	movw	r18, r30
     eb2:	08 00       	.word	0x0008	; ????
     eb4:	88 01       	movw	r16, r16
     eb6:	02 00       	.word	0x0002	; ????
     eb8:	ee 01       	movw	r28, r28
     eba:	08 00       	.word	0x0008	; ????
     ebc:	b8 01       	movw	r22, r16
     ebe:	08 00       	.word	0x0008	; ????
     ec0:	5d 01       	movw	r10, r26
     ec2:	08 00       	.word	0x0008	; ????
     ec4:	4a 01       	movw	r8, r20
     ec6:	02 00       	.word	0x0002	; ????
     ec8:	4a 01       	movw	r8, r20
     eca:	08 00       	.word	0x0008	; ????
     ecc:	88 01       	movw	r16, r16
     ece:	08 00       	.word	0x0008	; ????
     ed0:	4a 01       	movw	r8, r20
     ed2:	08 00       	.word	0x0008	; ????
     ed4:	26 01       	movw	r4, r12
     ed6:	02 00       	.word	0x0002	; ????
     ed8:	26 01       	movw	r4, r12
     eda:	08 00       	.word	0x0008	; ????
     edc:	26 01       	movw	r4, r12
     ede:	08 00       	.word	0x0008	; ????
     ee0:	5d 01       	movw	r10, r26
     ee2:	08 00       	.word	0x0008	; ????
     ee4:	37 01       	movw	r6, r14
     ee6:	08 00       	.word	0x0008	; ????
     ee8:	4a 01       	movw	r8, r20
     eea:	02 00       	.word	0x0002	; ????
	...

00001008 <__ctors_end>:
    1008:	11 24       	eor	r1, r1
    100a:	1f be       	out	0x3f, r1	; 63
    100c:	cf ef       	ldi	r28, 0xFF	; 255
    100e:	d8 e0       	ldi	r29, 0x08	; 8
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	cd bf       	out	0x3d, r28	; 61

00001014 <__do_copy_data>:
    1014:	12 e0       	ldi	r17, 0x02	; 2
    1016:	a0 e0       	ldi	r26, 0x00	; 0
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	e4 e6       	ldi	r30, 0x64	; 100
    101c:	f0 e3       	ldi	r31, 0x30	; 48
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <__do_copy_data+0x10>
    1020:	05 90       	lpm	r0, Z+
    1022:	0d 92       	st	X+, r0
    1024:	ae 35       	cpi	r26, 0x5E	; 94
    1026:	b1 07       	cpc	r27, r17
    1028:	d9 f7       	brne	.-10     	; 0x1020 <__do_copy_data+0xc>

0000102a <__do_clear_bss>:
    102a:	22 e0       	ldi	r18, 0x02	; 2
    102c:	ae e5       	ldi	r26, 0x5E	; 94
    102e:	b2 e0       	ldi	r27, 0x02	; 2
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <.do_clear_bss_start>

00001032 <.do_clear_bss_loop>:
    1032:	1d 92       	st	X+, r1

00001034 <.do_clear_bss_start>:
    1034:	ab 3b       	cpi	r26, 0xBB	; 187
    1036:	b2 07       	cpc	r27, r18
    1038:	e1 f7       	brne	.-8      	; 0x1032 <.do_clear_bss_loop>
    103a:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <main>
    103e:	0c 94 30 18 	jmp	0x3060	; 0x3060 <_exit>

00001042 <__bad_interrupt>:
    1042:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001046 <_Z7powerOfii>:
		return true;
	}
	else{
		return false;
	}
}
    1046:	9c 01       	movw	r18, r24
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	61 15       	cp	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	59 f0       	breq	.+22     	; 0x1068 <_Z7powerOfii+0x22>
    1052:	ac 01       	movw	r20, r24
    1054:	42 9f       	mul	r20, r18
    1056:	c0 01       	movw	r24, r0
    1058:	43 9f       	mul	r20, r19
    105a:	90 0d       	add	r25, r0
    105c:	52 9f       	mul	r21, r18
    105e:	90 0d       	add	r25, r0
    1060:	11 24       	eor	r1, r1
    1062:	61 50       	subi	r22, 0x01	; 1
    1064:	71 09       	sbc	r23, r1
    1066:	f2 cf       	rjmp	.-28     	; 0x104c <_Z7powerOfii+0x6>
    1068:	08 95       	ret

0000106a <_Z9ringAlarmi>:
void ringAlarm(int tone){
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	ec 01       	movw	r28, r24
	LCD_Clear();
    1070:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
	LCD_String("RING!!");
    1074:	8f e8       	ldi	r24, 0x8F	; 143
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	play(tone);				//Trigger buzzer. Can be interrupted by the int1 button.
    107c:	ce 01       	movw	r24, r28
    107e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_Z4playi>
	//_delay_ms(2000);
}
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <_Z8setAlarmi>:
void setAlarm(int alarm_time){
	if (alarm_time<2400){
    1088:	80 36       	cpi	r24, 0x60	; 96
    108a:	29 e0       	ldi	r18, 0x09	; 9
    108c:	92 07       	cpc	r25, r18
    108e:	8c f4       	brge	.+34     	; 0x10b2 <_Z8setAlarmi+0x2a>
		alarmArray[numberOfAlarms] = alarm_time;
    1090:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <numberOfAlarms>
    1094:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    1098:	f9 01       	movw	r30, r18
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	e7 57       	subi	r30, 0x77	; 119
    10a0:	fd 4f       	sbci	r31, 0xFD	; 253
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
		numberOfAlarms++;
    10a6:	2f 5f       	subi	r18, 0xFF	; 255
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	30 93 9e 02 	sts	0x029E, r19	; 0x80029e <numberOfAlarms+0x1>
    10ae:	20 93 9d 02 	sts	0x029D, r18	; 0x80029d <numberOfAlarms>
    10b2:	08 95       	ret

000010b4 <_Z7setTonei>:
	}
}
void setTone(int t){
	toneArray[numberOfAlarms] = t;
    10b4:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <numberOfAlarms>
    10b8:	f0 91 9e 02 	lds	r31, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	eb 58       	subi	r30, 0x8B	; 139
    10c2:	fd 4f       	sbci	r31, 0xFD	; 253
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
    10c8:	08 95       	ret

000010ca <_Z16updateAlarmArrayi>:
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 91 9d 02 	lds	r20, 0x029D	; 0x80029d <numberOfAlarms>
    10d2:	50 91 9e 02 	lds	r21, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    10d6:	24 17       	cp	r18, r20
    10d8:	35 07       	cpc	r19, r21
    10da:	14 f5       	brge	.+68     	; 0x1120 <_Z16updateAlarmArrayi+0x56>
		if (i<removeAlarm){
    10dc:	28 17       	cp	r18, r24
    10de:	39 07       	cpc	r19, r25
    10e0:	e4 f0       	brlt	.+56     	; 0x111a <_Z16updateAlarmArrayi+0x50>
			alarmArray[i] = alarmArray[i];
			toneArray[i] = toneArray[i];
		}
		else{
			alarmArray[i] = alarmArray[i+1];
    10e2:	a9 01       	movw	r20, r18
    10e4:	4f 5f       	subi	r20, 0xFF	; 255
    10e6:	5f 4f       	sbci	r21, 0xFF	; 255
    10e8:	44 0f       	add	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	fa 01       	movw	r30, r20
    10ee:	e7 57       	subi	r30, 0x77	; 119
    10f0:	fd 4f       	sbci	r31, 0xFD	; 253
    10f2:	a0 81       	ld	r26, Z
    10f4:	b1 81       	ldd	r27, Z+1	; 0x01
    10f6:	b9 01       	movw	r22, r18
    10f8:	66 0f       	add	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	fb 01       	movw	r30, r22
    10fe:	e7 57       	subi	r30, 0x77	; 119
    1100:	fd 4f       	sbci	r31, 0xFD	; 253
    1102:	b1 83       	std	Z+1, r27	; 0x01
    1104:	a0 83       	st	Z, r26
			toneArray[i] = toneArray[i+1];
    1106:	fa 01       	movw	r30, r20
    1108:	eb 58       	subi	r30, 0x8B	; 139
    110a:	fd 4f       	sbci	r31, 0xFD	; 253
    110c:	40 81       	ld	r20, Z
    110e:	51 81       	ldd	r21, Z+1	; 0x01
    1110:	fb 01       	movw	r30, r22
    1112:	eb 58       	subi	r30, 0x8B	; 139
    1114:	fd 4f       	sbci	r31, 0xFD	; 253
    1116:	51 83       	std	Z+1, r21	; 0x01
    1118:	40 83       	st	Z, r20
}
void setTone(int t){
	toneArray[numberOfAlarms] = t;
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
    111a:	2f 5f       	subi	r18, 0xFF	; 255
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	d7 cf       	rjmp	.-82     	; 0x10ce <_Z16updateAlarmArrayi+0x4>
    1120:	08 95       	ret

00001122 <_Z10checkAlarmv>:
			alarmArray[i] = alarmArray[i+1];
			toneArray[i] = toneArray[i+1];
		}
	}
}
void checkAlarm(){
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
	if (numberOfAlarms != 0){
    1132:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <numberOfAlarms>
    1136:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    113a:	89 2b       	or	r24, r25
    113c:	09 f4       	brne	.+2      	; 0x1140 <_Z10checkAlarmv+0x1e>
    113e:	55 c0       	rjmp	.+170    	; 0x11ea <_Z10checkAlarmv+0xc8>
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
    1140:	0f 2e       	mov	r0, r31
    1142:	fe e6       	ldi	r31, 0x6E	; 110
    1144:	cf 2e       	mov	r12, r31
    1146:	f2 e0       	ldi	r31, 0x02	; 2
    1148:	df 2e       	mov	r13, r31
    114a:	f0 2d       	mov	r31, r0
    114c:	0f 2e       	mov	r0, r31
    114e:	ff e6       	ldi	r31, 0x6F	; 111
    1150:	ef 2e       	mov	r14, r31
    1152:	f2 e0       	ldi	r31, 0x02	; 2
    1154:	ff 2e       	mov	r15, r31
    1156:	f0 2d       	mov	r31, r0
    1158:	00 e7       	ldi	r16, 0x70	; 112
    115a:	12 e0       	ldi	r17, 0x02	; 2
    115c:	21 e7       	ldi	r18, 0x71	; 113
    115e:	32 e0       	ldi	r19, 0x02	; 2
    1160:	42 e7       	ldi	r20, 0x72	; 114
    1162:	52 e0       	ldi	r21, 0x02	; 2
    1164:	63 e7       	ldi	r22, 0x73	; 115
    1166:	72 e0       	ldi	r23, 0x02	; 2
    1168:	84 e7       	ldi	r24, 0x74	; 116
    116a:	92 e0       	ldi	r25, 0x02	; 2
    116c:	0e 94 98 14 	call	0x2930	; 0x2930 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
		for (int i = 0; i <= numberOfAlarms;i++){
    1170:	c0 e0       	ldi	r28, 0x00	; 0
    1172:	d0 e0       	ldi	r29, 0x00	; 0
    1174:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <numberOfAlarms>
    1178:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    117c:	8c 17       	cp	r24, r28
    117e:	9d 07       	cpc	r25, r29
    1180:	a4 f1       	brlt	.+104    	; 0x11ea <_Z10checkAlarmv+0xc8>
			if (alarmArray[i]/100 == hour && alarmArray[i]%100 == minute){
    1182:	fe 01       	movw	r30, r28
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	e7 57       	subi	r30, 0x77	; 119
    118a:	fd 4f       	sbci	r31, 0xFD	; 253
    118c:	20 81       	ld	r18, Z
    118e:	31 81       	ldd	r19, Z+1	; 0x01
    1190:	c9 01       	movw	r24, r18
    1192:	64 e6       	ldi	r22, 0x64	; 100
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    119a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <hour>
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	68 17       	cp	r22, r24
    11a2:	79 07       	cpc	r23, r25
    11a4:	01 f5       	brne	.+64     	; 0x11e6 <_Z10checkAlarmv+0xc4>
    11a6:	c9 01       	movw	r24, r18
    11a8:	64 e6       	ldi	r22, 0x64	; 100
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    11b0:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <minute>
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	82 17       	cp	r24, r18
    11b8:	93 07       	cpc	r25, r19
    11ba:	a9 f4       	brne	.+42     	; 0x11e6 <_Z10checkAlarmv+0xc4>
				ringAlarm(toneArray[i]);
    11bc:	fe 01       	movw	r30, r28
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	eb 58       	subi	r30, 0x8B	; 139
    11c4:	fd 4f       	sbci	r31, 0xFD	; 253
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	0e 94 35 08 	call	0x106a	; 0x106a <_Z9ringAlarmi>
				updateAlarmArray(i);
    11ce:	ce 01       	movw	r24, r28
    11d0:	0e 94 65 08 	call	0x10ca	; 0x10ca <_Z16updateAlarmArrayi>
				numberOfAlarms--;
    11d4:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <numberOfAlarms>
    11d8:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <numberOfAlarms+0x1>
    11e2:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <numberOfAlarms>
	}
}
void checkAlarm(){
	if (numberOfAlarms != 0){
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
		for (int i = 0; i <= numberOfAlarms;i++){
    11e6:	21 96       	adiw	r28, 0x01	; 1
    11e8:	c5 cf       	rjmp	.-118    	; 0x1174 <_Z10checkAlarmv+0x52>
				numberOfAlarms--;
			}
		}
		
	}
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	08 95       	ret

000011fc <_Z6getDayiii>:
	int s = clockTime[5];
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	ec 01       	movw	r28, r24
	int days = 0;
	for (int i = 1;i<=y;i++){
    1202:	21 e0       	ldi	r18, 0x01	; 1
    1204:	30 e0       	ldi	r19, 0x00	; 0
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
    1206:	e0 e0       	ldi	r30, 0x00	; 0
    1208:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 1;i<=y;i++){
    120a:	c2 17       	cp	r28, r18
    120c:	d3 07       	cpc	r29, r19
    120e:	6c f0       	brlt	.+26     	; 0x122a <_Z6getDayiii+0x2e>
		if (i%4 == 0){
    1210:	c9 01       	movw	r24, r18
    1212:	83 70       	andi	r24, 0x03	; 3
    1214:	99 27       	eor	r25, r25
    1216:	89 2b       	or	r24, r25
    1218:	19 f4       	brne	.+6      	; 0x1220 <_Z6getDayiii+0x24>
			days+= 366;
    121a:	e2 59       	subi	r30, 0x92	; 146
    121c:	fe 4f       	sbci	r31, 0xFE	; 254
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <_Z6getDayiii+0x28>
		}
		else{
			days+= 365;
    1220:	e3 59       	subi	r30, 0x93	; 147
    1222:	fe 4f       	sbci	r31, 0xFE	; 254
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
	for (int i = 1;i<=y;i++){
    1224:	2f 5f       	subi	r18, 0xFF	; 255
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
    1228:	f0 cf       	rjmp	.-32     	; 0x120a <_Z6getDayiii+0xe>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
    122e:	db 01       	movw	r26, r22
    1230:	11 97       	sbiw	r26, 0x01	; 1
    1232:	2a 17       	cp	r18, r26
    1234:	3b 07       	cpc	r19, r27
    1236:	3c f5       	brge	.+78     	; 0x1286 <_Z6getDayiii+0x8a>
		if ((y%4==0) & (j == 1)){
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	de 01       	movw	r26, r28
    123c:	a3 70       	andi	r26, 0x03	; 3
    123e:	bb 27       	eor	r27, r27
    1240:	ab 2b       	or	r26, r27
    1242:	09 f0       	breq	.+2      	; 0x1246 <_Z6getDayiii+0x4a>
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	99 23       	and	r25, r25
    1248:	91 f0       	breq	.+36     	; 0x126e <_Z6getDayiii+0x72>
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	21 30       	cpi	r18, 0x01	; 1
    124e:	31 05       	cpc	r19, r1
    1250:	09 f0       	breq	.+2      	; 0x1254 <_Z6getDayiii+0x58>
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	99 23       	and	r25, r25
    1256:	59 f0       	breq	.+22     	; 0x126e <_Z6getDayiii+0x72>
			days+=monthsDays[j];
    1258:	d9 01       	movw	r26, r18
    125a:	aa 0f       	add	r26, r26
    125c:	bb 1f       	adc	r27, r27
    125e:	ae 5f       	subi	r26, 0xFE	; 254
    1260:	be 4f       	sbci	r27, 0xFE	; 254
    1262:	8d 91       	ld	r24, X+
    1264:	9c 91       	ld	r25, X
    1266:	e8 0f       	add	r30, r24
    1268:	f9 1f       	adc	r31, r25
			days+=1;
    126a:	31 96       	adiw	r30, 0x01	; 1
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <_Z6getDayiii+0x84>
		}
		else{
			days +=monthsDays[j];
    126e:	d9 01       	movw	r26, r18
    1270:	aa 0f       	add	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	ae 5f       	subi	r26, 0xFE	; 254
    1276:	be 4f       	sbci	r27, 0xFE	; 254
    1278:	8d 91       	ld	r24, X+
    127a:	9c 91       	ld	r25, X
    127c:	e8 0f       	add	r30, r24
    127e:	f9 1f       	adc	r31, r25
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
    1280:	2f 5f       	subi	r18, 0xFF	; 255
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	d4 cf       	rjmp	.-88     	; 0x122e <_Z6getDayiii+0x32>
		}
		else{
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
    1286:	4e 0f       	add	r20, r30
    1288:	5f 1f       	adc	r21, r31
    128a:	ca 01       	movw	r24, r20
    128c:	05 96       	adiw	r24, 0x05	; 5
    128e:	67 e0       	ldi	r22, 0x07	; 7
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
}
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <_Z12setClockTimePi>:
			}
		}
		
	}
}
void setClockTime(int clockTime[6]){
    129c:	6f 92       	push	r6
    129e:	7f 92       	push	r7
    12a0:	8f 92       	push	r8
    12a2:	9f 92       	push	r9
    12a4:	af 92       	push	r10
    12a6:	bf 92       	push	r11
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	ec 01       	movw	r28, r24
	int y = clockTime[0];
    12ba:	88 80       	ld	r8, Y
    12bc:	99 80       	ldd	r9, Y+1	; 0x01
	int m = clockTime[1];
    12be:	aa 80       	ldd	r10, Y+2	; 0x02
    12c0:	bb 80       	ldd	r11, Y+3	; 0x03
	int d = clockTime[2];
    12c2:	6c 80       	ldd	r6, Y+4	; 0x04
    12c4:	7d 80       	ldd	r7, Y+5	; 0x05
	int D = getDay(y,m,d);
    12c6:	a3 01       	movw	r20, r6
    12c8:	b5 01       	movw	r22, r10
    12ca:	c4 01       	movw	r24, r8
    12cc:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_Z6getDayiii>
	int h = clockTime[3];
    12d0:	0e 81       	ldd	r16, Y+6	; 0x06
    12d2:	1f 81       	ldd	r17, Y+7	; 0x07
	int M = clockTime[4];
    12d4:	e8 84       	ldd	r14, Y+8	; 0x08
    12d6:	f9 84       	ldd	r15, Y+9	; 0x09
	int s = clockTime[5];
    12d8:	ca 84       	ldd	r12, Y+10	; 0x0a
    12da:	db 84       	ldd	r13, Y+11	; 0x0b
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
    12dc:	94 01       	movw	r18, r8
    12de:	21 50       	subi	r18, 0x01	; 1
    12e0:	31 09       	sbc	r19, r1
    12e2:	c1 e0       	ldi	r28, 0x01	; 1
    12e4:	22 36       	cpi	r18, 0x62	; 98
    12e6:	31 05       	cpc	r19, r1
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <_Z12setClockTimePi+0x50>
    12ea:	c0 e0       	ldi	r28, 0x00	; 0
    12ec:	21 e0       	ldi	r18, 0x01	; 1
    12ee:	1a 14       	cp	r1, r10
    12f0:	1b 04       	cpc	r1, r11
    12f2:	0c f0       	brlt	.+2      	; 0x12f6 <_Z12setClockTimePi+0x5a>
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	61 e0       	ldi	r22, 0x01	; 1
    12f8:	9d e0       	ldi	r25, 0x0D	; 13
    12fa:	a9 16       	cp	r10, r25
    12fc:	b1 04       	cpc	r11, r1
    12fe:	0c f0       	brlt	.+2      	; 0x1302 <_Z12setClockTimePi+0x66>
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	71 e0       	ldi	r23, 0x01	; 1
    1304:	16 14       	cp	r1, r6
    1306:	17 04       	cpc	r1, r7
    1308:	0c f0       	brlt	.+2      	; 0x130c <_Z12setClockTimePi+0x70>
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	51 e0       	ldi	r21, 0x01	; 1
    130e:	90 e2       	ldi	r25, 0x20	; 32
    1310:	69 16       	cp	r6, r25
    1312:	71 04       	cpc	r7, r1
    1314:	0c f0       	brlt	.+2      	; 0x1318 <_Z12setClockTimePi+0x7c>
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	31 2f       	mov	r19, r17
    131a:	30 95       	com	r19
    131c:	33 1f       	adc	r19, r19
    131e:	33 27       	eor	r19, r19
    1320:	33 1f       	adc	r19, r19
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	08 31       	cpi	r16, 0x18	; 24
    1326:	11 05       	cpc	r17, r1
    1328:	0c f0       	brlt	.+2      	; 0x132c <_Z12setClockTimePi+0x90>
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	af 2d       	mov	r26, r15
    132e:	a0 95       	com	r26
    1330:	aa 1f       	adc	r26, r26
    1332:	aa 27       	eor	r26, r26
    1334:	aa 1f       	adc	r26, r26
    1336:	b1 e0       	ldi	r27, 0x01	; 1
    1338:	9c e3       	ldi	r25, 0x3C	; 60
    133a:	e9 16       	cp	r14, r25
    133c:	f1 04       	cpc	r15, r1
    133e:	0c f0       	brlt	.+2      	; 0x1342 <_Z12setClockTimePi+0xa6>
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	9d 2d       	mov	r25, r13
    1344:	90 95       	com	r25
    1346:	e9 2f       	mov	r30, r25
    1348:	ee 1f       	adc	r30, r30
    134a:	ee 27       	eor	r30, r30
    134c:	ee 1f       	adc	r30, r30
    134e:	f1 e0       	ldi	r31, 0x01	; 1
    1350:	9c e3       	ldi	r25, 0x3C	; 60
    1352:	c9 16       	cp	r12, r25
    1354:	d1 04       	cpc	r13, r1
    1356:	0c f0       	brlt	.+2      	; 0x135a <_Z12setClockTimePi+0xbe>
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	2c 23       	and	r18, r28
    135c:	62 23       	and	r22, r18
    135e:	67 23       	and	r22, r23
    1360:	56 23       	and	r21, r22
    1362:	95 2f       	mov	r25, r21
    1364:	93 23       	and	r25, r19
    1366:	49 23       	and	r20, r25
    1368:	4a 23       	and	r20, r26
    136a:	94 2f       	mov	r25, r20
    136c:	9b 23       	and	r25, r27
    136e:	9e 23       	and	r25, r30
    1370:	41 f0       	breq	.+16     	; 0x1382 <_Z12setClockTimePi+0xe6>
    1372:	ff 23       	and	r31, r31
    1374:	31 f0       	breq	.+12     	; 0x1382 <_Z12setClockTimePi+0xe6>
		ds1307_setdate(y, m, d, D, h, M, s);
    1376:	28 2f       	mov	r18, r24
    1378:	46 2d       	mov	r20, r6
    137a:	6a 2d       	mov	r22, r10
    137c:	88 2d       	mov	r24, r8
    137e:	0e 94 57 14 	call	0x28ae	; 0x28ae <_Z14ds1307_setdatehhhhhhh>
	}
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	bf 90       	pop	r11
    1394:	af 90       	pop	r10
    1396:	9f 90       	pop	r9
    1398:	8f 90       	pop	r8
    139a:	7f 90       	pop	r7
    139c:	6f 90       	pop	r6
    139e:	08 95       	ret

000013a0 <_Z12displayValuei>:
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
}
void displayValue(int val){
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	2a 97       	sbiw	r28, 0x0a	; 10
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    13b4:	4a e0       	ldi	r20, 0x0A	; 10
    13b6:	be 01       	movw	r22, r28
    13b8:	6f 5f       	subi	r22, 0xFF	; 255
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__itoa_ncheck>
	char valS[10];
	itoa(val,valS,10);
	LCD_String(valS);
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
}
    13c8:	2a 96       	adiw	r28, 0x0a	; 10
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <_Z11displayZeroh>:
void displayZero(uint8_t digit){
	if (digit<10){
    13da:	8a 30       	cpi	r24, 0x0A	; 10
    13dc:	20 f4       	brcc	.+8      	; 0x13e6 <_Z11displayZeroh+0xc>
		LCD_String("0");
    13de:	8a e9       	ldi	r24, 0x9A	; 154
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    13e6:	08 95       	ret

000013e8 <_Z11displayTimev>:
	}
}
void displayTime(){
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
	ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
    13f4:	0f 2e       	mov	r0, r31
    13f6:	fe e6       	ldi	r31, 0x6E	; 110
    13f8:	cf 2e       	mov	r12, r31
    13fa:	f2 e0       	ldi	r31, 0x02	; 2
    13fc:	df 2e       	mov	r13, r31
    13fe:	f0 2d       	mov	r31, r0
    1400:	0f 2e       	mov	r0, r31
    1402:	ff e6       	ldi	r31, 0x6F	; 111
    1404:	ef 2e       	mov	r14, r31
    1406:	f2 e0       	ldi	r31, 0x02	; 2
    1408:	ff 2e       	mov	r15, r31
    140a:	f0 2d       	mov	r31, r0
    140c:	00 e7       	ldi	r16, 0x70	; 112
    140e:	12 e0       	ldi	r17, 0x02	; 2
    1410:	21 e7       	ldi	r18, 0x71	; 113
    1412:	32 e0       	ldi	r19, 0x02	; 2
    1414:	42 e7       	ldi	r20, 0x72	; 114
    1416:	52 e0       	ldi	r21, 0x02	; 2
    1418:	63 e7       	ldi	r22, 0x73	; 115
    141a:	72 e0       	ldi	r23, 0x02	; 2
    141c:	84 e7       	ldi	r24, 0x74	; 116
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	0e 94 98 14 	call	0x2930	; 0x2930 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
// 	char secondS[10];char minuteS[10];char hourS[10];char yearS[10];char monthS[10];char dayS[10];
// 	itoa(second,secondS,10);itoa(minute,minuteS,10);itoa(hour,hourS,10);itoa(year,yearS,10);itoa(month,monthS,10);itoa(day,dayS,10);
	LCD_Home(0);LCD_String("   20");
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
    142c:	86 e9       	ldi	r24, 0x96	; 150
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	displayZero(year);displayValue(year);LCD_String("-");
    1434:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <year>
    1438:	0e 94 ed 09 	call	0x13da	; 0x13da <_Z11displayZeroh>
    143c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <year>
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z12displayValuei>
    1446:	8c e9       	ldi	r24, 0x9C	; 156
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	displayZero(month);displayValue(month);LCD_String("-");
    144e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <month>
    1452:	0e 94 ed 09 	call	0x13da	; 0x13da <_Z11displayZeroh>
    1456:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <month>
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z12displayValuei>
    1460:	8c e9       	ldi	r24, 0x9C	; 156
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	displayZero(day);displayValue(day);
    1468:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <day>
    146c:	0e 94 ed 09 	call	0x13da	; 0x13da <_Z11displayZeroh>
    1470:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <day>
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z12displayValuei>
	LCD_Home(1);LCD_String("    ");
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
    1482:	8b e2       	ldi	r24, 0x2B	; 43
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	displayZero(hour);
    148a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <hour>
    148e:	0e 94 ed 09 	call	0x13da	; 0x13da <_Z11displayZeroh>
	displayValue(hour);
    1492:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <hour>
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z12displayValuei>
	LCD_String(":");
    149c:	8e e9       	ldi	r24, 0x9E	; 158
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	displayZero(minute);
    14a4:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <minute>
    14a8:	0e 94 ed 09 	call	0x13da	; 0x13da <_Z11displayZeroh>
	displayValue(minute);
    14ac:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <minute>
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z12displayValuei>
	LCD_String(":");
    14b6:	8e e9       	ldi	r24, 0x9E	; 158
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	displayZero(second);
    14be:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <second>
    14c2:	0e 94 ed 09 	call	0x13da	; 0x13da <_Z11displayZeroh>
	displayValue(second);
    14c6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <second>
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z12displayValuei>
	//_delay_ms(1);

}
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	08 95       	ret

000014de <_Z10showAlarmsci>:

int alarm_var = 0;
char alarms[10];
void showAlarms(char key,int state){
    14de:	0f 93       	push	r16
    14e0:	1f 93       	push	r17
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	c8 2f       	mov	r28, r24
    14e8:	8b 01       	movw	r16, r22
	LCD_Home(0);
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
	if ((key=='8') & (state==2)){
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	02 30       	cpi	r16, 0x02	; 2
    14f6:	11 05       	cpc	r17, r1
    14f8:	09 f0       	breq	.+2      	; 0x14fc <_Z10showAlarmsci+0x1e>
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	c8 33       	cpi	r28, 0x38	; 56
    1500:	09 f0       	breq	.+2      	; 0x1504 <_Z10showAlarmsci+0x26>
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	99 23       	and	r25, r25
    1506:	a9 f0       	breq	.+42     	; 0x1532 <_Z10showAlarmsci+0x54>
    1508:	88 23       	and	r24, r24
    150a:	99 f0       	breq	.+38     	; 0x1532 <_Z10showAlarmsci+0x54>
		alarm_var++;
    150c:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <alarm_var>
    1510:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <alarm_var+0x1>
    1514:	2f 5f       	subi	r18, 0xFF	; 255
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <alarm_var+0x1>
    151c:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <alarm_var>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1520:	2f e5       	ldi	r18, 0x5F	; 95
    1522:	3a ee       	ldi	r19, 0xEA	; 234
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	21 50       	subi	r18, 0x01	; 1
    1528:	30 40       	sbci	r19, 0x00	; 0
    152a:	90 40       	sbci	r25, 0x00	; 0
    152c:	e1 f7       	brne	.-8      	; 0x1526 <_Z10showAlarmsci+0x48>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <_Z10showAlarmsci+0x52>
    1530:	00 00       	nop
		//LCD_Clear();
		_delay_ms(BUTTON_DELAY);
	}
	if ((key=='2') & (state ==2)){
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	c2 33       	cpi	r28, 0x32	; 50
    1536:	09 f0       	breq	.+2      	; 0x153a <_Z10showAlarmsci+0x5c>
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	99 23       	and	r25, r25
    153c:	a1 f0       	breq	.+40     	; 0x1566 <_Z10showAlarmsci+0x88>
    153e:	88 23       	and	r24, r24
    1540:	91 f0       	breq	.+36     	; 0x1566 <_Z10showAlarmsci+0x88>
		alarm_var--;
    1542:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <alarm_var>
    1546:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <alarm_var+0x1>
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <alarm_var+0x1>
    1550:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <alarm_var>
    1554:	2f e5       	ldi	r18, 0x5F	; 95
    1556:	3a ee       	ldi	r19, 0xEA	; 234
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	21 50       	subi	r18, 0x01	; 1
    155c:	30 40       	sbci	r19, 0x00	; 0
    155e:	80 40       	sbci	r24, 0x00	; 0
    1560:	e1 f7       	brne	.-8      	; 0x155a <_Z10showAlarmsci+0x7c>
    1562:	00 c0       	rjmp	.+0      	; 0x1564 <_Z10showAlarmsci+0x86>
    1564:	00 00       	nop
		//LCD_Clear();
		_delay_ms(BUTTON_DELAY);
	}
	if ((key=='5') & (numberOfAlarms!=0)){
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <numberOfAlarms>
    156c:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    1570:	23 2b       	or	r18, r19
    1572:	09 f4       	brne	.+2      	; 0x1576 <_Z10showAlarmsci+0x98>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	88 23       	and	r24, r24
    1578:	09 f4       	brne	.+2      	; 0x157c <_Z10showAlarmsci+0x9e>
    157a:	61 c0       	rjmp	.+194    	; 0x163e <_Z10showAlarmsci+0x160>
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	c5 33       	cpi	r28, 0x35	; 53
    1580:	09 f0       	breq	.+2      	; 0x1584 <_Z10showAlarmsci+0xa6>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	88 23       	and	r24, r24
    1586:	09 f4       	brne	.+2      	; 0x158a <_Z10showAlarmsci+0xac>
    1588:	5a c0       	rjmp	.+180    	; 0x163e <_Z10showAlarmsci+0x160>
		LCD_Clear();
    158a:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
		displayTyping(alarmArray[alarm_var]/100,3);LCD_String(":");displayTyping(alarmArray[alarm_var]%100,3);
    158e:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <alarm_var>
    1592:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <alarm_var+0x1>
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	e7 57       	subi	r30, 0x77	; 119
    159c:	fd 4f       	sbci	r31, 0xFD	; 253
    159e:	80 81       	ld	r24, Z
    15a0:	91 81       	ldd	r25, Z+1	; 0x01
    15a2:	c4 e6       	ldi	r28, 0x64	; 100
    15a4:	d0 e0       	ldi	r29, 0x00	; 0
    15a6:	be 01       	movw	r22, r28
    15a8:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    15ac:	cb 01       	movw	r24, r22
    15ae:	63 e0       	ldi	r22, 0x03	; 3
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
    15b6:	8e e9       	ldi	r24, 0x9E	; 158
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    15be:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <alarm_var>
    15c2:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <alarm_var+0x1>
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	e7 57       	subi	r30, 0x77	; 119
    15cc:	fd 4f       	sbci	r31, 0xFD	; 253
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	be 01       	movw	r22, r28
    15d4:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    15d8:	63 e0       	ldi	r22, 0x03	; 3
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
		LCD_String(" DELETED");LCD_Home(1);LCD_String("SUCCESSFULLY");
    15e0:	80 ea       	ldi	r24, 0xA0	; 160
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
    15f0:	89 ea       	ldi	r24, 0xA9	; 169
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    15f8:	9f eb       	ldi	r25, 0xBF	; 191
    15fa:	27 e2       	ldi	r18, 0x27	; 39
    15fc:	39 e0       	ldi	r19, 0x09	; 9
    15fe:	91 50       	subi	r25, 0x01	; 1
    1600:	20 40       	sbci	r18, 0x00	; 0
    1602:	30 40       	sbci	r19, 0x00	; 0
    1604:	e1 f7       	brne	.-8      	; 0x15fe <_Z10showAlarmsci+0x120>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <_Z10showAlarmsci+0x12a>
    1608:	00 00       	nop
		_delay_ms(3000);
		LCD_Clear();
    160a:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
		updateAlarmArray(alarm_var);
    160e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <alarm_var>
    1612:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <alarm_var+0x1>
    1616:	0e 94 65 08 	call	0x10ca	; 0x10ca <_Z16updateAlarmArrayi>
		numberOfAlarms--;
    161a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <numberOfAlarms>
    161e:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <numberOfAlarms+0x1>
    1628:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <numberOfAlarms>
    162c:	8f e5       	ldi	r24, 0x5F	; 95
    162e:	9a ee       	ldi	r25, 0xEA	; 234
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	81 50       	subi	r24, 0x01	; 1
    1634:	90 40       	sbci	r25, 0x00	; 0
    1636:	20 40       	sbci	r18, 0x00	; 0
    1638:	e1 f7       	brne	.-8      	; 0x1632 <_Z10showAlarmsci+0x154>
    163a:	00 c0       	rjmp	.+0      	; 0x163c <_Z10showAlarmsci+0x15e>
    163c:	00 00       	nop
		_delay_ms(BUTTON_DELAY);
		
		
	}
	if (alarm_var>=numberOfAlarms){
    163e:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <alarm_var>
    1642:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <alarm_var+0x1>
    1646:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <numberOfAlarms>
    164a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    164e:	28 17       	cp	r18, r24
    1650:	39 07       	cpc	r19, r25
    1652:	24 f0       	brlt	.+8      	; 0x165c <_Z10showAlarmsci+0x17e>
		alarm_var=0;
    1654:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <alarm_var+0x1>
    1658:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <alarm_var>
	}
	if (alarm_var<0){
    165c:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <alarm_var>
    1660:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <alarm_var+0x1>
    1664:	33 23       	and	r19, r19
    1666:	2c f4       	brge	.+10     	; 0x1672 <_Z10showAlarmsci+0x194>
		alarm_var=numberOfAlarms-1;
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <alarm_var+0x1>
    166e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <alarm_var>
	}
	if (state==2){
    1672:	02 30       	cpi	r16, 0x02	; 2
    1674:	11 05       	cpc	r17, r1
    1676:	09 f0       	breq	.+2      	; 0x167a <_Z10showAlarmsci+0x19c>
    1678:	4c c0       	rjmp	.+152    	; 0x1712 <_Z10showAlarmsci+0x234>
		LCD_Home(0);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
		if (numberOfAlarms==0){
    1682:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <numberOfAlarms>
    1686:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <numberOfAlarms+0x1>
    168a:	89 2b       	or	r24, r25
    168c:	69 f4       	brne	.+26     	; 0x16a8 <_Z10showAlarmsci+0x1ca>
			LCD_String("   NO ALARMS");
    168e:	86 eb       	ldi	r24, 0xB6	; 182
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
			LCD_Home(1);
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
			LCD_String("    ARE SET");
    169e:	83 ec       	ldi	r24, 0xC3	; 195
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    16a6:	35 c0       	rjmp	.+106    	; 0x1712 <_Z10showAlarmsci+0x234>
		}
		else{
			LCD_String("PRESS 5 TO DEL");
    16a8:	8f ec       	ldi	r24, 0xCF	; 207
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
			LCD_Home(1);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
			LCD_String(">>");
    16b8:	8e ed       	ldi	r24, 0xDE	; 222
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
			displayTyping(alarmArray[alarm_var]/100,3);LCD_String(":");displayTyping(alarmArray[alarm_var]%100,3);
    16c0:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <alarm_var>
    16c4:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <alarm_var+0x1>
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	e7 57       	subi	r30, 0x77	; 119
    16ce:	fd 4f       	sbci	r31, 0xFD	; 253
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	c4 e6       	ldi	r28, 0x64	; 100
    16d6:	d0 e0       	ldi	r29, 0x00	; 0
    16d8:	be 01       	movw	r22, r28
    16da:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    16de:	cb 01       	movw	r24, r22
    16e0:	63 e0       	ldi	r22, 0x03	; 3
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
    16e8:	8e e9       	ldi	r24, 0x9E	; 158
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    16f0:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <alarm_var>
    16f4:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <alarm_var+0x1>
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	e7 57       	subi	r30, 0x77	; 119
    16fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	be 01       	movw	r22, r28
    1706:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    170a:	63 e0       	ldi	r22, 0x03	; 3
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
			
// 			displayTyping(alarmArray[(alarm_var+1)%numberOfAlarms]/100,3);LCD_String(":");
// 			displayTyping(alarmArray[(alarm_var+1)%numberOfAlarms]%100,3);
		}
	}
}
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <_Z14timerCountDownv>:
	}
	
}

int tempSec=60;
void timerCountDown(){
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
	ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
    1728:	0f 2e       	mov	r0, r31
    172a:	fe e6       	ldi	r31, 0x6E	; 110
    172c:	cf 2e       	mov	r12, r31
    172e:	f2 e0       	ldi	r31, 0x02	; 2
    1730:	df 2e       	mov	r13, r31
    1732:	f0 2d       	mov	r31, r0
    1734:	0f 2e       	mov	r0, r31
    1736:	ff e6       	ldi	r31, 0x6F	; 111
    1738:	ef 2e       	mov	r14, r31
    173a:	f2 e0       	ldi	r31, 0x02	; 2
    173c:	ff 2e       	mov	r15, r31
    173e:	f0 2d       	mov	r31, r0
    1740:	00 e7       	ldi	r16, 0x70	; 112
    1742:	12 e0       	ldi	r17, 0x02	; 2
    1744:	21 e7       	ldi	r18, 0x71	; 113
    1746:	32 e0       	ldi	r19, 0x02	; 2
    1748:	42 e7       	ldi	r20, 0x72	; 114
    174a:	52 e0       	ldi	r21, 0x02	; 2
    174c:	63 e7       	ldi	r22, 0x73	; 115
    174e:	72 e0       	ldi	r23, 0x02	; 2
    1750:	84 e7       	ldi	r24, 0x74	; 116
    1752:	92 e0       	ldi	r25, 0x02	; 2
    1754:	0e 94 98 14 	call	0x2930	; 0x2930 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
	
	if (tempSec!=second){
    1758:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <second>
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1762:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1766:	82 17       	cp	r24, r18
    1768:	93 07       	cpc	r25, r19
    176a:	61 f0       	breq	.+24     	; 0x1784 <_Z14timerCountDownv+0x68>
		timerTime[2]-=1;
    176c:	e6 e6       	ldi	r30, 0x66	; 102
    176e:	f2 e0       	ldi	r31, 0x02	; 2
    1770:	24 81       	ldd	r18, Z+4	; 0x04
    1772:	35 81       	ldd	r19, Z+5	; 0x05
    1774:	21 50       	subi	r18, 0x01	; 1
    1776:	31 09       	sbc	r19, r1
    1778:	35 83       	std	Z+5, r19	; 0x05
    177a:	24 83       	std	Z+4, r18	; 0x04
		tempSec=second;
    177c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1780:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if (timerTime[2]==-1){
    1784:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <timerTime+0x4>
    1788:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <timerTime+0x5>
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	f9 f4       	brne	.+62     	; 0x17ce <_Z14timerCountDownv+0xb2>
		if (timerTime[1]==0){
    1790:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <timerTime+0x2>
    1794:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timerTime+0x3>
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	81 f4       	brne	.+32     	; 0x17bc <_Z14timerCountDownv+0xa0>
			if (timerTime[0]!=0){
    179c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <timerTime>
    17a0:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <timerTime+0x1>
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	99 f0       	breq	.+38     	; 0x17ce <_Z14timerCountDownv+0xb2>
				timerTime[1]=59;timerTime[0]-=1;
    17a8:	e6 e6       	ldi	r30, 0x66	; 102
    17aa:	f2 e0       	ldi	r31, 0x02	; 2
    17ac:	2b e3       	ldi	r18, 0x3B	; 59
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	33 83       	std	Z+3, r19	; 0x03
    17b2:	22 83       	std	Z+2, r18	; 0x02
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <_Z14timerCountDownv+0xb2>
			}
		}
		else{
		timerTime[2]=59;timerTime[1]-=1;	
    17bc:	e6 e6       	ldi	r30, 0x66	; 102
    17be:	f2 e0       	ldi	r31, 0x02	; 2
    17c0:	2b e3       	ldi	r18, 0x3B	; 59
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	35 83       	std	Z+5, r19	; 0x05
    17c6:	24 83       	std	Z+4, r18	; 0x04
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	93 83       	std	Z+3, r25	; 0x03
    17cc:	82 83       	std	Z+2, r24	; 0x02
	}
}
}
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	08 95       	ret

000017dc <_Z5timerci>:
unsigned int timerTime[3];
int timerState = 0;
int temp1 = 0;
int data1 = 0;
int start=0;
void timer(char key, int state){
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	f8 2e       	mov	r15, r24
    17e8:	8b 01       	movw	r16, r22
	
	LCD_Home(1);
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
	LCD_String("   ");
    17f2:	8c e2       	ldi	r24, 0x2C	; 44
    17f4:	92 e0       	ldi	r25, 0x02	; 2
    17f6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	for (int i=0;i<3;i++){
    17fa:	c0 e0       	ldi	r28, 0x00	; 0
    17fc:	d0 e0       	ldi	r29, 0x00	; 0
    17fe:	c3 30       	cpi	r28, 0x03	; 3
    1800:	d1 05       	cpc	r29, r1
    1802:	9c f5       	brge	.+102    	; 0x186a <_Z5timerci+0x8e>
		if ((i!=3) & (i!=0)){
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	c3 30       	cpi	r28, 0x03	; 3
    1808:	d1 05       	cpc	r29, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <_Z5timerci+0x32>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	88 23       	and	r24, r24
    1810:	51 f0       	breq	.+20     	; 0x1826 <_Z5timerci+0x4a>
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	20 97       	sbiw	r28, 0x00	; 0
    1816:	09 f4       	brne	.+2      	; 0x181a <_Z5timerci+0x3e>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	88 23       	and	r24, r24
    181c:	21 f0       	breq	.+8      	; 0x1826 <_Z5timerci+0x4a>
			LCD_String(":");
    181e:	8e e9       	ldi	r24, 0x9E	; 158
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		}
		if (i==timerState){
    1826:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timerState>
    182a:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timerState+0x1>
    182e:	c8 17       	cp	r28, r24
    1830:	d9 07       	cpc	r29, r25
    1832:	71 f4       	brne	.+28     	; 0x1850 <_Z5timerci+0x74>
			displayTyping(timerTime[i],temp1);
    1834:	fe 01       	movw	r30, r28
    1836:	ee 0f       	add	r30, r30
    1838:	ff 1f       	adc	r31, r31
    183a:	ea 59       	subi	r30, 0x9A	; 154
    183c:	fd 4f       	sbci	r31, 0xFD	; 253
    183e:	60 91 62 02 	lds	r22, 0x0262	; 0x800262 <temp1>
    1842:	70 91 63 02 	lds	r23, 0x0263	; 0x800263 <temp1+0x1>
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
    184e:	0b c0       	rjmp	.+22     	; 0x1866 <_Z5timerci+0x8a>
		}
		else{
			displayTyping(timerTime[i],3);
    1850:	fe 01       	movw	r30, r28
    1852:	ee 0f       	add	r30, r30
    1854:	ff 1f       	adc	r31, r31
    1856:	ea 59       	subi	r30, 0x9A	; 154
    1858:	fd 4f       	sbci	r31, 0xFD	; 253
    185a:	63 e0       	ldi	r22, 0x03	; 3
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
int start=0;
void timer(char key, int state){
	
	LCD_Home(1);
	LCD_String("   ");
	for (int i=0;i<3;i++){
    1866:	21 96       	adiw	r28, 0x01	; 1
    1868:	ca cf       	rjmp	.-108    	; 0x17fe <_Z5timerci+0x22>
		else{
			displayTyping(timerTime[i],3);
		}
	}
	
	if (timerState==3){
    186a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timerState>
    186e:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timerState+0x1>
    1872:	03 97       	sbiw	r24, 0x03	; 3
    1874:	09 f0       	breq	.+2      	; 0x1878 <_Z5timerci+0x9c>
    1876:	51 c0       	rjmp	.+162    	; 0x191a <_Z5timerci+0x13e>
		LCD_Home(0);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
		
		if (key=='5'){
    1880:	25 e3       	ldi	r18, 0x35	; 53
    1882:	f2 12       	cpse	r15, r18
    1884:	06 c0       	rjmp	.+12     	; 0x1892 <_Z5timerci+0xb6>
			start=1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <__data_end+0x1>
    188e:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <__data_end>
		}
		if (start==1){
    1892:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <__data_end>
    1896:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <__data_end+0x1>
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	31 f4       	brne	.+12     	; 0x18aa <_Z5timerci+0xce>
			LCD_String("PRESS # TO STOP ");
    189e:	81 ee       	ldi	r24, 0xE1	; 225
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
			timerCountDown();
    18a6:	0e 94 8e 0b 	call	0x171c	; 0x171c <_Z14timerCountDownv>
		}
		if (start==0){
    18aa:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <__data_end>
    18ae:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <__data_end+0x1>
    18b2:	89 2b       	or	r24, r25
    18b4:	21 f4       	brne	.+8      	; 0x18be <_Z5timerci+0xe2>
			LCD_String("PRESS 5 TO START");
    18b6:	82 ef       	ldi	r24, 0xF2	; 242
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		}
		if ((timerTime[2]==0) & (timerTime[1]==0) & (timerTime[0]==0) ){
    18be:	e6 e6       	ldi	r30, 0x66	; 102
    18c0:	f2 e0       	ldi	r31, 0x02	; 2
    18c2:	44 81       	ldd	r20, Z+4	; 0x04
    18c4:	55 81       	ldd	r21, Z+5	; 0x05
    18c6:	22 81       	ldd	r18, Z+2	; 0x02
    18c8:	33 81       	ldd	r19, Z+3	; 0x03
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	45 2b       	or	r20, r21
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <_Z5timerci+0xf6>
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	23 2b       	or	r18, r19
    18d6:	09 f0       	breq	.+2      	; 0x18da <_Z5timerci+0xfe>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	89 23       	and	r24, r25
    18dc:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <timerTime>
    18e0:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <timerTime+0x1>
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	23 2b       	or	r18, r19
    18e8:	09 f0       	breq	.+2      	; 0x18ec <_Z5timerci+0x110>
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	88 23       	and	r24, r24
    18ee:	e9 f0       	breq	.+58     	; 0x192a <_Z5timerci+0x14e>
    18f0:	99 23       	and	r25, r25
    18f2:	d9 f0       	breq	.+54     	; 0x192a <_Z5timerci+0x14e>
			start=0;
    18f4:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <__data_end+0x1>
    18f8:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <__data_end>
			timerState=0;
    18fc:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <timerState+0x1>
    1900:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <timerState>
			LCD_Clear();
    1904:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
			LCD_String("TIMES UP!!!");
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	92 e0       	ldi	r25, 0x02	; 2
    190c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
			play(1);
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_Z4playi>
    1918:	08 c0       	rjmp	.+16     	; 0x192a <_Z5timerci+0x14e>
		}
	}
	else{
		LCD_Home(0);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
		LCD_String("ENTER THE TIME");
    1922:	8f e0       	ldi	r24, 0x0F	; 15
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	}
	if ((int(key)>47) & (int(key)<58) & (state ==2) & (timerState!=3)){
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	90 ed       	ldi	r25, 0xD0	; 208
    192e:	9f 0d       	add	r25, r15
    1930:	9a 30       	cpi	r25, 0x0A	; 10
    1932:	08 f0       	brcs	.+2      	; 0x1936 <_Z5timerci+0x15a>
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	02 30       	cpi	r16, 0x02	; 2
    193a:	11 05       	cpc	r17, r1
    193c:	09 f0       	breq	.+2      	; 0x1940 <_Z5timerci+0x164>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <timerState>
    1946:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <timerState+0x1>
    194a:	43 30       	cpi	r20, 0x03	; 3
    194c:	51 05       	cpc	r21, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <_Z5timerci+0x176>
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	82 23       	and	r24, r18
    1954:	09 f4       	brne	.+2      	; 0x1958 <_Z5timerci+0x17c>
    1956:	5f c0       	rjmp	.+190    	; 0x1a16 <_Z5timerci+0x23a>
    1958:	99 23       	and	r25, r25
    195a:	09 f4       	brne	.+2      	; 0x195e <_Z5timerci+0x182>
    195c:	5c c0       	rjmp	.+184    	; 0x1a16 <_Z5timerci+0x23a>
		data1+=(int(key)-48);
    195e:	8f 2d       	mov	r24, r15
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	c0 97       	sbiw	r24, 0x30	; 48
    1964:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <data1>
    1968:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <data1+0x1>
    196c:	82 0f       	add	r24, r18
    196e:	93 1f       	adc	r25, r19
    1970:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <data1+0x1>
    1974:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <data1>
    1978:	8f e5       	ldi	r24, 0x5F	; 95
    197a:	9a ee       	ldi	r25, 0xEA	; 234
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	81 50       	subi	r24, 0x01	; 1
    1980:	90 40       	sbci	r25, 0x00	; 0
    1982:	20 40       	sbci	r18, 0x00	; 0
    1984:	e1 f7       	brne	.-8      	; 0x197e <_Z5timerci+0x1a2>
    1986:	00 c0       	rjmp	.+0      	; 0x1988 <_Z5timerci+0x1ac>
    1988:	00 00       	nop
		_delay_ms(BUTTON_DELAY);
		if (temp1 == 0){
    198a:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <temp1>
    198e:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <temp1+0x1>
    1992:	89 2b       	or	r24, r25
    1994:	21 f5       	brne	.+72     	; 0x19de <_Z5timerci+0x202>
			data1*=10;
    1996:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <data1>
    199a:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <data1+0x1>
    199e:	c9 01       	movw	r24, r18
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	22 0f       	add	r18, r18
    19aa:	33 1f       	adc	r19, r19
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	82 0f       	add	r24, r18
    19b2:	93 1f       	adc	r25, r19
    19b4:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <data1+0x1>
    19b8:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <data1>
			temp1 = 1;
    19bc:	21 e0       	ldi	r18, 0x01	; 1
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	30 93 63 02 	sts	0x0263, r19	; 0x800263 <temp1+0x1>
    19c4:	20 93 62 02 	sts	0x0262, r18	; 0x800262 <temp1>
			timerTime[timerState] = data1;
    19c8:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <timerState>
    19cc:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <timerState+0x1>
    19d0:	ee 0f       	add	r30, r30
    19d2:	ff 1f       	adc	r31, r31
    19d4:	ea 59       	subi	r30, 0x9A	; 154
    19d6:	fd 4f       	sbci	r31, 0xFD	; 253
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
    19dc:	1c c0       	rjmp	.+56     	; 0x1a16 <_Z5timerci+0x23a>
		}
		else{
			timerTime[timerState] = data1;
    19de:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timerState>
    19e2:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timerState+0x1>
    19e6:	fc 01       	movw	r30, r24
    19e8:	ee 0f       	add	r30, r30
    19ea:	ff 1f       	adc	r31, r31
    19ec:	ea 59       	subi	r30, 0x9A	; 154
    19ee:	fd 4f       	sbci	r31, 0xFD	; 253
    19f0:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <data1>
    19f4:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <data1+0x1>
    19f8:	31 83       	std	Z+1, r19	; 0x01
    19fa:	20 83       	st	Z, r18
			timerState++;
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <timerState+0x1>
    1a02:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <timerState>
			data1=0;
    1a06:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <data1+0x1>
    1a0a:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <data1>
			temp1 = 0;
    1a0e:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <temp1+0x1>
    1a12:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <temp1>
		}
	}
	
}
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	08 95       	ret

00001a22 <_Z19resetAlarmVariablesv>:
		timerTime[2]=59;timerTime[1]-=1;	
	}
}
}
void resetAlarmVariables(){
	tempSec=60;
    1a22:	8c e3       	ldi	r24, 0x3C	; 60
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1a2a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	timerTime[0]=0;timerTime[1]=0;timerTime[2]=0;
    1a2e:	e6 e6       	ldi	r30, 0x66	; 102
    1a30:	f2 e0       	ldi	r31, 0x02	; 2
    1a32:	11 82       	std	Z+1, r1	; 0x01
    1a34:	10 82       	st	Z, r1
    1a36:	13 82       	std	Z+3, r1	; 0x03
    1a38:	12 82       	std	Z+2, r1	; 0x02
    1a3a:	15 82       	std	Z+5, r1	; 0x05
    1a3c:	14 82       	std	Z+4, r1	; 0x04
	timerState = 0;
    1a3e:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <timerState+0x1>
    1a42:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <timerState>
	temp1 = 0;
    1a46:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <temp1+0x1>
    1a4a:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <temp1>
	data1 = 0;
    1a4e:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <data1+0x1>
    1a52:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <data1>
	start=0;
    1a56:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <__data_end+0x1>
    1a5a:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <__data_end>
    1a5e:	08 95       	ret

00001a60 <_Z11init_buzzerv>:
 
 volatile int sp = 1;    // This is a reference to stop the alarm with a button press
 
 void init_buzzer(){
	 // pins ports declaration
	 buzzer_DDR |= _BV(buzzer_PIN) ;			// make buzzer pin output
    1a60:	8a b1       	in	r24, 0x0a	; 10
    1a62:	84 60       	ori	r24, 0x04	; 4
    1a64:	8a b9       	out	0x0a, r24	; 10
	 	
	 EICRA |= _BV(ISC11) | _BV(ISC10);		  // set rising edge method
    1a66:	e9 e6       	ldi	r30, 0x69	; 105
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8c 60       	ori	r24, 0x0C	; 12
    1a6e:	80 83       	st	Z, r24
	 EIMSK |= _BV(INT1);					 // enable pin PD1 External interrupt
    1a70:	8d b3       	in	r24, 0x1d	; 29
    1a72:	82 60       	ori	r24, 0x02	; 2
    1a74:	8d bb       	out	0x1d, r24	; 29
	 	
	 sei();								   //  this Enables the Global Interrupt Enable (I-bit) in the Status Register (SREG)
    1a76:	78 94       	sei
    1a78:	08 95       	ret

00001a7a <_Z9Play_Noteff>:
	 
 }
 
 void Play_Note(float freq,float dur){
    1a7a:	4f 92       	push	r4
    1a7c:	5f 92       	push	r5
    1a7e:	6f 92       	push	r6
    1a80:	7f 92       	push	r7
    1a82:	8f 92       	push	r8
    1a84:	9f 92       	push	r9
    1a86:	af 92       	push	r10
    1a88:	bf 92       	push	r11
    1a8a:	cf 92       	push	r12
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <_Z9Play_Noteff+0x1e>
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <_Z9Play_Noteff+0x20>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	6b 01       	movw	r12, r22
    1aa0:	7c 01       	movw	r14, r24
    1aa2:	49 01       	movw	r8, r18
    1aa4:	5a 01       	movw	r10, r20
	 // variables
	 long int i,cycles;
	 float half_period,period;
	 
	 if (freq != 0){
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	a9 01       	movw	r20, r18
    1aac:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__cmpsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <_Z9Play_Noteff+0x3c>
    1ab4:	ad c0       	rjmp	.+346    	; 0x1c10 <_Z9Play_Noteff+0x196>
		 period=(1/freq)*1000;
    1ab6:	a7 01       	movw	r20, r14
    1ab8:	96 01       	movw	r18, r12
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	80 e8       	ldi	r24, 0x80	; 128
    1ac0:	9f e3       	ldi	r25, 0x3F	; 63
    1ac2:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__divsf3>
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a e7       	ldi	r20, 0x7A	; 122
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1ad2:	6b 01       	movw	r12, r22
    1ad4:	7c 01       	movw	r14, r24
		 cycles=dur/period;
    1ad6:	9b 01       	movw	r18, r22
    1ad8:	ac 01       	movw	r20, r24
    1ada:	c5 01       	movw	r24, r10
    1adc:	b4 01       	movw	r22, r8
    1ade:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__divsf3>
    1ae2:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__fixsfsi>
    1ae6:	2b 01       	movw	r4, r22
    1ae8:	3c 01       	movw	r6, r24
		 half_period = period/2;
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	c7 01       	movw	r24, r14
    1af4:	b6 01       	movw	r22, r12
    1af6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1afa:	69 83       	std	Y+1, r22	; 0x01
    1afc:	7a 83       	std	Y+2, r23	; 0x02
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    1b00:	9c 83       	std	Y+4, r25	; 0x04

		 for (i=0;i<cycles;i++)
    1b02:	81 2c       	mov	r8, r1
    1b04:	91 2c       	mov	r9, r1
    1b06:	54 01       	movw	r10, r8
    1b08:	84 14       	cp	r8, r4
    1b0a:	95 04       	cpc	r9, r5
    1b0c:	a6 04       	cpc	r10, r6
    1b0e:	b7 04       	cpc	r11, r7
    1b10:	0c f0       	brlt	.+2      	; 0x1b14 <_Z9Play_Noteff+0x9a>
    1b12:	b8 c0       	rjmp	.+368    	; 0x1c84 <_Z9Play_Noteff+0x20a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a e7       	ldi	r20, 0x7A	; 122
    1b1a:	53 e4       	ldi	r21, 0x43	; 67
    1b1c:	69 81       	ldd	r22, Y+1	; 0x01
    1b1e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1b28:	6b 01       	movw	r12, r22
    1b2a:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	5f e3       	ldi	r21, 0x3F	; 63
    1b34:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__cmpsf2>
    1b38:	88 23       	and	r24, r24
    1b3a:	2c f1       	brlt	.+74     	; 0x1b86 <_Z9Play_Noteff+0x10c>
		__ticks = 1;
	else if (__tmp > 65535)
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	c7 01       	movw	r24, r14
    1b46:	b6 01       	movw	r22, r12
    1b48:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__gesf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	b4 f4       	brge	.+44     	; 0x1b7c <_Z9Play_Noteff+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	69 81       	ldd	r22, Y+1	; 0x01
    1b5a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1b64:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fixunssfsi>
		while(__ticks)
    1b68:	61 15       	cp	r22, r1
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	89 f0       	breq	.+34     	; 0x1b90 <_Z9Play_Noteff+0x116>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1b6e:	89 e1       	ldi	r24, 0x19	; 25
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <_Z9Play_Noteff+0xf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b76:	61 50       	subi	r22, 0x01	; 1
    1b78:	71 09       	sbc	r23, r1
    1b7a:	f6 cf       	rjmp	.-20     	; 0x1b68 <_Z9Play_Noteff+0xee>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7c:	c7 01       	movw	r24, r14
    1b7e:	b6 01       	movw	r22, r12
    1b80:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fixunssfsi>
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <_Z9Play_Noteff+0x110>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <_Z9Play_Noteff+0x112>
		 {
			 //50% duty cycle
			 _delay_ms(half_period);
			 buzzer_PORT |= _BV(buzzer_PIN);
    1b90:	8b b1       	in	r24, 0x0b	; 11
    1b92:	84 60       	ori	r24, 0x04	; 4
    1b94:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	c7 01       	movw	r24, r14
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__cmpsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	2c f1       	brlt	.+74     	; 0x1bf4 <_Z9Play_Noteff+0x17a>
		__ticks = 1;
	else if (__tmp > 65535)
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__gesf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	b4 f4       	brge	.+44     	; 0x1bea <_Z9Play_Noteff+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	69 81       	ldd	r22, Y+1	; 0x01
    1bc8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1bd2:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fixunssfsi>
		while(__ticks)
    1bd6:	61 15       	cp	r22, r1
    1bd8:	71 05       	cpc	r23, r1
    1bda:	89 f0       	breq	.+34     	; 0x1bfe <_Z9Play_Noteff+0x184>
    1bdc:	89 e1       	ldi	r24, 0x19	; 25
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <_Z9Play_Noteff+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	61 50       	subi	r22, 0x01	; 1
    1be6:	71 09       	sbc	r23, r1
    1be8:	f6 cf       	rjmp	.-20     	; 0x1bd6 <_Z9Play_Noteff+0x15c>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bea:	c7 01       	movw	r24, r14
    1bec:	b6 01       	movw	r22, r12
    1bee:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fixunssfsi>
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <_Z9Play_Noteff+0x17e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <_Z9Play_Noteff+0x180>
			 _delay_ms(half_period);
			 buzzer_PORT &= ~ _BV(buzzer_PIN);
    1bfe:	8b b1       	in	r24, 0x0b	; 11
    1c00:	8b 7f       	andi	r24, 0xFB	; 251
    1c02:	8b b9       	out	0x0b, r24	; 11
	 if (freq != 0){
		 period=(1/freq)*1000;
		 cycles=dur/period;
		 half_period = period/2;

		 for (i=0;i<cycles;i++)
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	88 1a       	sub	r8, r24
    1c08:	98 0a       	sbc	r9, r24
    1c0a:	a8 0a       	sbc	r10, r24
    1c0c:	b8 0a       	sbc	r11, r24
    1c0e:	7c cf       	rjmp	.-264    	; 0x1b08 <_Z9Play_Noteff+0x8e>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a e7       	ldi	r20, 0x7A	; 122
    1c16:	53 e4       	ldi	r21, 0x43	; 67
    1c18:	c5 01       	movw	r24, r10
    1c1a:	b4 01       	movw	r22, r8
    1c1c:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1c20:	6b 01       	movw	r12, r22
    1c22:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__cmpsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	1c f1       	brlt	.+70     	; 0x1c7a <_Z9Play_Noteff+0x200>
		__ticks = 1;
	else if (__tmp > 65535)
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	c7 01       	movw	r24, r14
    1c3e:	b6 01       	movw	r22, r12
    1c40:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__gesf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	a4 f4       	brge	.+40     	; 0x1c70 <_Z9Play_Noteff+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	c5 01       	movw	r24, r10
    1c52:	b4 01       	movw	r22, r8
    1c54:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1c58:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fixunssfsi>
		while(__ticks)
    1c5c:	61 15       	cp	r22, r1
    1c5e:	71 05       	cpc	r23, r1
    1c60:	89 f0       	breq	.+34     	; 0x1c84 <_Z9Play_Noteff+0x20a>
    1c62:	89 e1       	ldi	r24, 0x19	; 25
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <_Z9Play_Noteff+0x1ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6a:	61 50       	subi	r22, 0x01	; 1
    1c6c:	71 09       	sbc	r23, r1
    1c6e:	f6 cf       	rjmp	.-20     	; 0x1c5c <_Z9Play_Noteff+0x1e2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	c7 01       	movw	r24, r14
    1c72:	b6 01       	movw	r22, r12
    1c74:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fixunssfsi>
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <_Z9Play_Noteff+0x204>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	cb 01       	movw	r24, r22
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <_Z9Play_Noteff+0x206>
	 }
	 else {
		 _delay_ms(dur);   // rest
	 }
	 return;
 }
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	df 90       	pop	r13
    1c96:	cf 90       	pop	r12
    1c98:	bf 90       	pop	r11
    1c9a:	af 90       	pop	r10
    1c9c:	9f 90       	pop	r9
    1c9e:	8f 90       	pop	r8
    1ca0:	7f 90       	pop	r7
    1ca2:	6f 90       	pop	r6
    1ca4:	5f 90       	pop	r5
    1ca6:	4f 90       	pop	r4
    1ca8:	08 95       	ret

00001caa <__vector_2>:
 
 /** External interrupt for INT0 (PD2) pin ISR function
 We will use this to stop currently playing melody **/

 ISR (INT1_vect)          //External interrupt Stop button ISR
 {
    1caa:	1f 92       	push	r1
    1cac:	0f 92       	push	r0
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	0f 92       	push	r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	8f 93       	push	r24
    1cb6:	9f 93       	push	r25
	 sp=0;
    1cb8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <sp+0x1>
    1cbc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sp>
    1cc0:	88 ea       	ldi	r24, 0xA8	; 168
    1cc2:	91 e6       	ldi	r25, 0x61	; 97
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <__vector_2+0x1a>
	 _delay_ms(100);
 }
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	0f 90       	pop	r0
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	0f 90       	pop	r0
    1cd2:	1f 90       	pop	r1
    1cd4:	18 95       	reti

00001cd6 <_Z11tempochoosei>:

int tempochoose(int number){
	if (number==0){return tempos[0];}
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	41 f0       	breq	.+16     	; 0x1cea <_Z11tempochoosei+0x14>
	else if (number==1){return tempos[1];}
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	91 05       	cpc	r25, r1
    1cde:	41 f0       	breq	.+16     	; 0x1cf0 <_Z11tempochoosei+0x1a>
	else if (number==2){return tempos[2];}
    1ce0:	02 97       	sbiw	r24, 0x02	; 2
    1ce2:	49 f4       	brne	.+18     	; 0x1cf6 <_Z11tempochoosei+0x20>
    1ce4:	85 e5       	ldi	r24, 0x55	; 85
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	08 95       	ret
	 sp=0;
	 _delay_ms(100);
 }

int tempochoose(int number){
	if (number==0){return tempos[0];}
    1cea:	81 ee       	ldi	r24, 0xE1	; 225
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	08 95       	ret
	else if (number==1){return tempos[1];}
    1cf0:	88 e7       	ldi	r24, 0x78	; 120
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	08 95       	ret
	else if (number==2){return tempos[2];}
	else{return tempos[3];}
    1cf6:	88 e7       	ldi	r24, 0x78	; 120
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	08 95       	ret

00001cfc <_Z4playi>:
		 _delay_ms(dur);   // rest
	 }
	 return;
 }
 
 void play(int number){
    1cfc:	2f 92       	push	r2
    1cfe:	3f 92       	push	r3
    1d00:	4f 92       	push	r4
    1d02:	5f 92       	push	r5
    1d04:	6f 92       	push	r6
    1d06:	7f 92       	push	r7
    1d08:	8f 92       	push	r8
    1d0a:	9f 92       	push	r9
    1d0c:	af 92       	push	r10
    1d0e:	bf 92       	push	r11
    1d10:	cf 92       	push	r12
    1d12:	df 92       	push	r13
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <_Z4playi+0x26>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <_Z4playi+0x28>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	1c 01       	movw	r2, r24
	 int tempo=tempochoose(number); // choose the right tempo from the list using the function
    1d2a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_Z11tempochoosei>
	 int notes = sizeof(melody0[number])/sizeof(melody0[number][0])/2;
	 int wholenote = (60000 * 2.5) / tempo;
    1d2e:	bc 01       	movw	r22, r24
    1d30:	99 0f       	add	r25, r25
    1d32:	88 0b       	sbc	r24, r24
    1d34:	99 0b       	sbc	r25, r25
    1d36:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__floatsisf>
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	7c e7       	ldi	r23, 0x7C	; 124
    1d42:	82 e1       	ldi	r24, 0x12	; 18
    1d44:	98 e4       	ldi	r25, 0x48	; 72
    1d46:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__divsf3>
    1d4a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__fixsfsi>
    1d4e:	7a 83       	std	Y+2, r23	; 0x02
    1d50:	69 83       	std	Y+1, r22	; 0x01
	 int divider = 0;
	 int noteDuration = 0;
	 
	 for (int thisNote = 0; thisNote < notes *2 ; thisNote = thisNote + 2) {
    1d52:	1c 82       	std	Y+4, r1	; 0x04
    1d54:	1b 82       	std	Y+3, r1	; 0x03
 void play(int number){
	 int tempo=tempochoose(number); // choose the right tempo from the list using the function
	 int notes = sizeof(melody0[number])/sizeof(melody0[number][0])/2;
	 int wholenote = (60000 * 2.5) / tempo;
	 int divider = 0;
	 int noteDuration = 0;
    1d56:	e1 2c       	mov	r14, r1
    1d58:	f1 2c       	mov	r15, r1
	 
	 for (int thisNote = 0; thisNote < notes *2 ; thisNote = thisNote + 2) {
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	80 39       	cpi	r24, 0x90	; 144
    1d60:	91 40       	sbci	r25, 0x01	; 1
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <_Z4playi+0x6a>
    1d64:	ad c0       	rjmp	.+346    	; 0x1ec0 <_Z4playi+0x1c4>
		 if (sp==1){
    1d66:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sp>
    1d6a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <sp+0x1>
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <_Z4playi+0x78>
    1d72:	a2 c0       	rjmp	.+324    	; 0x1eb8 <_Z4playi+0x1bc>
			 divider = pgm_read_word_near(melody0[number]+thisNote + 1);
    1d74:	80 e2       	ldi	r24, 0x20	; 32
    1d76:	93 e0       	ldi	r25, 0x03	; 3
    1d78:	28 9e       	mul	r2, r24
    1d7a:	80 01       	movw	r16, r0
    1d7c:	29 9e       	mul	r2, r25
    1d7e:	10 0d       	add	r17, r0
    1d80:	38 9e       	mul	r3, r24
    1d82:	10 0d       	add	r17, r0
    1d84:	11 24       	eor	r1, r1
    1d86:	08 59       	subi	r16, 0x98	; 152
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	cb 80       	ldd	r12, Y+3	; 0x03
    1d8c:	dc 80       	ldd	r13, Y+4	; 0x04
    1d8e:	f6 01       	movw	r30, r12
    1d90:	31 96       	adiw	r30, 0x01	; 1
    1d92:	ee 0f       	add	r30, r30
    1d94:	ff 1f       	adc	r31, r31
    1d96:	e0 0f       	add	r30, r16
    1d98:	f1 1f       	adc	r31, r17
    1d9a:	65 91       	lpm	r22, Z+
    1d9c:	74 91       	lpm	r23, Z
			 
			 if (divider > 0) { //positive divider ( positive duration)
    1d9e:	16 16       	cp	r1, r22
    1da0:	17 06       	cpc	r1, r23
    1da2:	34 f4       	brge	.+12     	; 0x1db0 <_Z4playi+0xb4>
				 // it is a regular note
			 noteDuration = (wholenote) / divider;}
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    1dac:	7b 01       	movw	r14, r22
    1dae:	1c c0       	rjmp	.+56     	; 0x1de8 <_Z4playi+0xec>
			 
			 else if (divider<0){
    1db0:	77 23       	and	r23, r23
    1db2:	bc f4       	brge	.+46     	; 0x1de2 <_Z4playi+0xe6>
				 noteDuration=(wholenote)/(divider);// negative durations need to be increased and made positive
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
				 noteDuration=noteDuration*1.5;
    1dbc:	07 2e       	mov	r0, r23
    1dbe:	00 0c       	add	r0, r0
    1dc0:	88 0b       	sbc	r24, r24
    1dc2:	99 0b       	sbc	r25, r25
    1dc4:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__floatsisf>
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 ec       	ldi	r20, 0xC0	; 192
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1dd4:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__fixsfsi>
				 noteDuration=-noteDuration;
    1dd8:	ee 24       	eor	r14, r14
    1dda:	ff 24       	eor	r15, r15
    1ddc:	e6 1a       	sub	r14, r22
    1dde:	f7 0a       	sbc	r15, r23
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <_Z4playi+0xec>
			 }
			 else if(divider==0){return;} // this will be used to stop playing
    1de2:	67 2b       	or	r22, r23
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <_Z4playi+0xec>
    1de6:	6c c0       	rjmp	.+216    	; 0x1ec0 <_Z4playi+0x1c4>
			 Play_Note((pgm_read_word_near(melody0[number]+thisNote)), noteDuration*0.9 ); // play the selected pitch
    1de8:	b7 01       	movw	r22, r14
    1dea:	0f 2c       	mov	r0, r15
    1dec:	00 0c       	add	r0, r0
    1dee:	88 0b       	sbc	r24, r24
    1df0:	99 0b       	sbc	r25, r25
    1df2:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__floatsisf>
    1df6:	2b 01       	movw	r4, r22
    1df8:	3c 01       	movw	r6, r24
    1dfa:	26 e6       	ldi	r18, 0x66	; 102
    1dfc:	36 e6       	ldi	r19, 0x66	; 102
    1dfe:	46 e6       	ldi	r20, 0x66	; 102
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1e06:	4b 01       	movw	r8, r22
    1e08:	5c 01       	movw	r10, r24
    1e0a:	f6 01       	movw	r30, r12
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	e0 0f       	add	r30, r16
    1e12:	f1 1f       	adc	r31, r17
    1e14:	65 91       	lpm	r22, Z+
    1e16:	74 91       	lpm	r23, Z
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatunsisf>
    1e20:	a5 01       	movw	r20, r10
    1e22:	94 01       	movw	r18, r8
    1e24:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_Z9Play_Noteff>
			 _delay_ms(noteDuration*0.5);
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	c3 01       	movw	r24, r6
    1e32:	b2 01       	movw	r22, r4
    1e34:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1e38:	2b 01       	movw	r4, r22
    1e3a:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a e7       	ldi	r20, 0x7A	; 122
    1e42:	53 e4       	ldi	r21, 0x43	; 67
    1e44:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1e48:	4b 01       	movw	r8, r22
    1e4a:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__cmpsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	1c f1       	brlt	.+70     	; 0x1ea2 <_Z4playi+0x1a6>
		__ticks = 1;
	else if (__tmp > 65535)
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	3f ef       	ldi	r19, 0xFF	; 255
    1e60:	4f e7       	ldi	r20, 0x7F	; 127
    1e62:	57 e4       	ldi	r21, 0x47	; 71
    1e64:	c5 01       	movw	r24, r10
    1e66:	b4 01       	movw	r22, r8
    1e68:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__gesf2>
    1e6c:	18 16       	cp	r1, r24
    1e6e:	a4 f4       	brge	.+40     	; 0x1e98 <_Z4playi+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e2       	ldi	r20, 0x20	; 32
    1e76:	51 e4       	ldi	r21, 0x41	; 65
    1e78:	c3 01       	movw	r24, r6
    1e7a:	b2 01       	movw	r22, r4
    1e7c:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <__mulsf3>
    1e80:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fixunssfsi>
		while(__ticks)
    1e84:	61 15       	cp	r22, r1
    1e86:	71 05       	cpc	r23, r1
    1e88:	89 f0       	breq	.+34     	; 0x1eac <_Z4playi+0x1b0>
    1e8a:	89 e1       	ldi	r24, 0x19	; 25
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <_Z4playi+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	61 50       	subi	r22, 0x01	; 1
    1e94:	71 09       	sbc	r23, r1
    1e96:	f6 cf       	rjmp	.-20     	; 0x1e84 <_Z4playi+0x188>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e98:	c5 01       	movw	r24, r10
    1e9a:	b4 01       	movw	r22, r8
    1e9c:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fixunssfsi>
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <_Z4playi+0x1aa>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1ea2:	61 e0       	ldi	r22, 0x01	; 1
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <_Z4playi+0x1ac>
	 int notes = sizeof(melody0[number])/sizeof(melody0[number][0])/2;
	 int wholenote = (60000 * 2.5) / tempo;
	 int divider = 0;
	 int noteDuration = 0;
	 
	 for (int thisNote = 0; thisNote < notes *2 ; thisNote = thisNote + 2) {
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	02 96       	adiw	r24, 0x02	; 2
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
    1eb6:	51 cf       	rjmp	.-350    	; 0x1d5a <_Z4playi+0x5e>
			 else if(divider==0){return;} // this will be used to stop playing
			 Play_Note((pgm_read_word_near(melody0[number]+thisNote)), noteDuration*0.9 ); // play the selected pitch
			 _delay_ms(noteDuration*0.5);
		 }
		 else{
			 sp=0;
    1eb8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <sp+0x1>
    1ebc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sp>
			 break;
		 }
	 }
 }
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	ff 90       	pop	r15
    1ed2:	ef 90       	pop	r14
    1ed4:	df 90       	pop	r13
    1ed6:	cf 90       	pop	r12
    1ed8:	bf 90       	pop	r11
    1eda:	af 90       	pop	r10
    1edc:	9f 90       	pop	r9
    1ede:	8f 90       	pop	r8
    1ee0:	7f 90       	pop	r7
    1ee2:	6f 90       	pop	r6
    1ee4:	5f 90       	pop	r5
    1ee6:	4f 90       	pop	r4
    1ee8:	3f 90       	pop	r3
    1eea:	2f 90       	pop	r2
    1eec:	08 95       	ret

00001eee <_Z11LCD_Commandh>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
    1eee:	9b b1       	in	r25, 0x0b	; 11
    1ef0:	9f 70       	andi	r25, 0x0F	; 15
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	20 7f       	andi	r18, 0xF0	; 240
    1ef6:	92 2b       	or	r25, r18
    1ef8:	9b b9       	out	0x0b, r25	; 11
    1efa:	9b b1       	in	r25, 0x0b	; 11
    1efc:	9e 7f       	andi	r25, 0xFE	; 254
    1efe:	9b b9       	out	0x0b, r25	; 11
    1f00:	9b b1       	in	r25, 0x0b	; 11
    1f02:	92 60       	ori	r25, 0x02	; 2
    1f04:	9b b9       	out	0x0b, r25	; 11
    1f06:	00 00       	nop
    1f08:	9b b1       	in	r25, 0x0b	; 11
    1f0a:	9d 7f       	andi	r25, 0xFD	; 253
    1f0c:	9b b9       	out	0x0b, r25	; 11
    1f0e:	32 e4       	ldi	r19, 0x42	; 66
    1f10:	3a 95       	dec	r19
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <_Z11LCD_Commandh+0x22>
    1f14:	00 c0       	rjmp	.+0      	; 0x1f16 <_Z11LCD_Commandh+0x28>
    1f16:	2b b1       	in	r18, 0x0b	; 11
    1f18:	30 e1       	ldi	r19, 0x10	; 16
    1f1a:	83 9f       	mul	r24, r19
    1f1c:	c0 01       	movw	r24, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	92 2f       	mov	r25, r18
    1f22:	9f 70       	andi	r25, 0x0F	; 15
    1f24:	89 2b       	or	r24, r25
    1f26:	8b b9       	out	0x0b, r24	; 11
    1f28:	8b b1       	in	r24, 0x0b	; 11
    1f2a:	82 60       	ori	r24, 0x02	; 2
    1f2c:	8b b9       	out	0x0b, r24	; 11
    1f2e:	00 00       	nop
    1f30:	8b b1       	in	r24, 0x0b	; 11
    1f32:	8d 7f       	andi	r24, 0xFD	; 253
    1f34:	8b b9       	out	0x0b, r24	; 11
    1f36:	83 ef       	ldi	r24, 0xF3	; 243
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <_Z11LCD_Commandh+0x4c>
    1f3e:	00 c0       	rjmp	.+0      	; 0x1f40 <_Z11LCD_Commandh+0x52>
    1f40:	00 00       	nop
    1f42:	08 95       	ret

00001f44 <_Z8LCD_Charh>:
    1f44:	9b b1       	in	r25, 0x0b	; 11
    1f46:	9f 70       	andi	r25, 0x0F	; 15
    1f48:	28 2f       	mov	r18, r24
    1f4a:	20 7f       	andi	r18, 0xF0	; 240
    1f4c:	92 2b       	or	r25, r18
    1f4e:	9b b9       	out	0x0b, r25	; 11
    1f50:	9b b1       	in	r25, 0x0b	; 11
    1f52:	91 60       	ori	r25, 0x01	; 1
    1f54:	9b b9       	out	0x0b, r25	; 11
    1f56:	9b b1       	in	r25, 0x0b	; 11
    1f58:	92 60       	ori	r25, 0x02	; 2
    1f5a:	9b b9       	out	0x0b, r25	; 11
    1f5c:	00 00       	nop
    1f5e:	9b b1       	in	r25, 0x0b	; 11
    1f60:	9d 7f       	andi	r25, 0xFD	; 253
    1f62:	9b b9       	out	0x0b, r25	; 11
    1f64:	32 e4       	ldi	r19, 0x42	; 66
    1f66:	3a 95       	dec	r19
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <_Z8LCD_Charh+0x22>
    1f6a:	00 c0       	rjmp	.+0      	; 0x1f6c <_Z8LCD_Charh+0x28>
    1f6c:	2b b1       	in	r18, 0x0b	; 11
    1f6e:	30 e1       	ldi	r19, 0x10	; 16
    1f70:	83 9f       	mul	r24, r19
    1f72:	c0 01       	movw	r24, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	92 2f       	mov	r25, r18
    1f78:	9f 70       	andi	r25, 0x0F	; 15
    1f7a:	89 2b       	or	r24, r25
    1f7c:	8b b9       	out	0x0b, r24	; 11
    1f7e:	8b b1       	in	r24, 0x0b	; 11
    1f80:	82 60       	ori	r24, 0x02	; 2
    1f82:	8b b9       	out	0x0b, r24	; 11
    1f84:	00 00       	nop
    1f86:	8b b1       	in	r24, 0x0b	; 11
    1f88:	8d 7f       	andi	r24, 0xFD	; 253
    1f8a:	8b b9       	out	0x0b, r24	; 11
    1f8c:	83 ef       	ldi	r24, 0xF3	; 243
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <_Z8LCD_Charh+0x4c>
    1f94:	00 c0       	rjmp	.+0      	; 0x1f96 <_Z8LCD_Charh+0x52>
    1f96:	00 00       	nop
    1f98:	08 95       	ret

00001f9a <_Z8LCD_Initv>:
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	8a b9       	out	0x0a, r24	; 10
    1f9e:	87 e8       	ldi	r24, 0x87	; 135
    1fa0:	93 e1       	ldi	r25, 0x13	; 19
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <_Z8LCD_Initv+0x8>
    1fa6:	00 c0       	rjmp	.+0      	; 0x1fa8 <_Z8LCD_Initv+0xe>
    1fa8:	00 00       	nop
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_Z11LCD_Commandh>
    1fb0:	88 e2       	ldi	r24, 0x28	; 40
    1fb2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_Z11LCD_Commandh>
    1fb6:	8c e0       	ldi	r24, 0x0C	; 12
    1fb8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_Z11LCD_Commandh>
    1fbc:	86 e0       	ldi	r24, 0x06	; 6
    1fbe:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_Z11LCD_Commandh>
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_Z11LCD_Commandh>
    1fc8:	83 ef       	ldi	r24, 0xF3	; 243
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <_Z8LCD_Initv+0x32>
    1fd0:	00 c0       	rjmp	.+0      	; 0x1fd2 <_Z8LCD_Initv+0x38>
    1fd2:	00 00       	nop
    1fd4:	08 95       	ret

00001fd6 <_Z10LCD_StringPc>:
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	8c 01       	movw	r16, r24
    1fe0:	c0 e0       	ldi	r28, 0x00	; 0
    1fe2:	d0 e0       	ldi	r29, 0x00	; 0
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	ec 0f       	add	r30, r28
    1fe8:	fd 1f       	adc	r31, r29
    1fea:	80 81       	ld	r24, Z
    1fec:	88 23       	and	r24, r24
    1fee:	21 f0       	breq	.+8      	; 0x1ff8 <_Z10LCD_StringPc+0x22>
    1ff0:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_Z8LCD_Charh>
    1ff4:	21 96       	adiw	r28, 0x01	; 1
    1ff6:	f6 cf       	rjmp	.-20     	; 0x1fe4 <_Z10LCD_StringPc+0xe>
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	08 95       	ret

00002002 <_Z9LCD_Clearv>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_Z11LCD_Commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2008:	83 ef       	ldi	r24, 0xF3	; 243
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <_Z9LCD_Clearv+0xa>
    2010:	00 c0       	rjmp	.+0      	; 0x2012 <_Z9LCD_Clearv+0x10>
    2012:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    2014:	80 e8       	ldi	r24, 0x80	; 128
    2016:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_Z11LCD_Commandh>
    201a:	08 95       	ret

0000201c <_Z8LCD_Homei>:
}
void LCD_Home(int r){
	if(r==0){
    201c:	89 2b       	or	r24, r25
    201e:	21 f4       	brne	.+8      	; 0x2028 <_Z8LCD_Homei+0xc>
		LCD_Command (0x80);
    2020:	80 e8       	ldi	r24, 0x80	; 128
    2022:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_Z11LCD_Commandh>
    2026:	08 95       	ret
	}
	else{
		LCD_Command (0xC0);
    2028:	80 ec       	ldi	r24, 0xC0	; 192
    202a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_Z11LCD_Commandh>
    202e:	08 95       	ret

00002030 <_Z9LCD_BlinkPc>:
	}
}
int blink_var=0;
void LCD_Blink(char ch[10]){
	if (blink_var==0){
    2030:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <blink_var>
    2034:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <blink_var+0x1>
    2038:	23 2b       	or	r18, r19
    203a:	79 f4       	brne	.+30     	; 0x205a <_Z9LCD_BlinkPc+0x2a>
		LCD_String(ch);
    203c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		blink_var=1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <blink_var+0x1>
    2048:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <blink_var>
    204c:	87 ea       	ldi	r24, 0xA7	; 167
    204e:	91 e6       	ldi	r25, 0x61	; 97
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <_Z9LCD_BlinkPc+0x20>
    2054:	00 c0       	rjmp	.+0      	; 0x2056 <_Z9LCD_BlinkPc+0x26>
    2056:	00 00       	nop
    2058:	08 95       	ret
		_delay_ms(100);
	}
	else{
		LCD_String(" ");
    205a:	8e e2       	ldi	r24, 0x2E	; 46
    205c:	92 e0       	ldi	r25, 0x02	; 2
    205e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		blink_var=0;
    2062:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <blink_var+0x1>
    2066:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <blink_var>
    206a:	87 ea       	ldi	r24, 0xA7	; 167
    206c:	91 e6       	ldi	r25, 0x61	; 97
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <_Z9LCD_BlinkPc+0x3e>
    2072:	00 c0       	rjmp	.+0      	; 0x2074 <_Z9LCD_BlinkPc+0x44>
    2074:	00 00       	nop
    2076:	08 95       	ret

00002078 <_Z13displayTypingii>:
		_delay_ms(100);
	}
}
void displayTyping(int val,int pos){
    2078:	ef 92       	push	r14
    207a:	ff 92       	push	r15
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	00 d0       	rcall	.+0      	; 0x2086 <_Z13displayTypingii+0xe>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <_Z13displayTypingii+0x10>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	8b 01       	movw	r16, r22
	char val0S[2];char val1S[2];
	itoa(val/10,val0S,10);itoa(val%10,val1S,10);
    208e:	6a e0       	ldi	r22, 0x0A	; 10
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    2096:	9b 01       	movw	r18, r22
    2098:	7c 01       	movw	r14, r24
    209a:	4a e0       	ldi	r20, 0x0A	; 10
    209c:	be 01       	movw	r22, r28
    209e:	6f 5f       	subi	r22, 0xFF	; 255
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	c9 01       	movw	r24, r18
    20a4:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__itoa_ncheck>
    20a8:	4a e0       	ldi	r20, 0x0A	; 10
    20aa:	be 01       	movw	r22, r28
    20ac:	6d 5f       	subi	r22, 0xFD	; 253
    20ae:	7f 4f       	sbci	r23, 0xFF	; 255
    20b0:	c7 01       	movw	r24, r14
    20b2:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__itoa_ncheck>
	if (pos==0){
    20b6:	01 15       	cp	r16, r1
    20b8:	11 05       	cpc	r17, r1
    20ba:	49 f4       	brne	.+18     	; 0x20ce <_Z13displayTypingii+0x56>
		LCD_Blink(val0S);
    20bc:	ce 01       	movw	r24, r28
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	0e 94 18 10 	call	0x2030	; 0x2030 <_Z9LCD_BlinkPc>
		LCD_String(val1S);
    20c4:	ce 01       	movw	r24, r28
    20c6:	03 96       	adiw	r24, 0x03	; 3
    20c8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <_Z13displayTypingii+0x7e>
	}
	else if (pos==1){
    20ce:	01 30       	cpi	r16, 0x01	; 1
    20d0:	11 05       	cpc	r17, r1
    20d2:	49 f4       	brne	.+18     	; 0x20e6 <_Z13displayTypingii+0x6e>
		LCD_String(val0S);
    20d4:	ce 01       	movw	r24, r28
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		LCD_Blink(val1S);
    20dc:	ce 01       	movw	r24, r28
    20de:	03 96       	adiw	r24, 0x03	; 3
    20e0:	0e 94 18 10 	call	0x2030	; 0x2030 <_Z9LCD_BlinkPc>
    20e4:	08 c0       	rjmp	.+16     	; 0x20f6 <_Z13displayTypingii+0x7e>
	}
	else{
		LCD_String(val0S);LCD_String(val1S);
    20e6:	ce 01       	movw	r24, r28
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    20ee:	ce 01       	movw	r24, r28
    20f0:	03 96       	adiw	r24, 0x03	; 3
    20f2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	}
}
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	08 95       	ret

0000210c <_Z11LCD_SetDateii>:
int clockTime[6];
int ClockState = 0;
int temp = 0;
int data = 0;
char dataS[10];
void LCD_SetDate(int key, int state){
    210c:	ef 92       	push	r14
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	8c 01       	movw	r16, r24
    211a:	7b 01       	movw	r14, r22
	LCD_Home(0);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
	LCD_String("   20");
    2124:	86 e9       	ldi	r24, 0x96	; 150
    2126:	91 e0       	ldi	r25, 0x01	; 1
    2128:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	for (int i=0;i<6;i++){
    212c:	c0 e0       	ldi	r28, 0x00	; 0
    212e:	d0 e0       	ldi	r29, 0x00	; 0
    2130:	c6 30       	cpi	r28, 0x06	; 6
    2132:	d1 05       	cpc	r29, r1
    2134:	f4 f5       	brge	.+124    	; 0x21b2 <_Z11LCD_SetDateii+0xa6>
		if (i==3){
    2136:	c3 30       	cpi	r28, 0x03	; 3
    2138:	d1 05       	cpc	r29, r1
    213a:	41 f4       	brne	.+16     	; 0x214c <_Z11LCD_SetDateii+0x40>
			LCD_Home(1);
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
			LCD_String("    ");
    2144:	8b e2       	ldi	r24, 0x2B	; 43
    2146:	92 e0       	ldi	r25, 0x02	; 2
    2148:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		}
		if ((i!=3) & (i!=0)){
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	c3 30       	cpi	r28, 0x03	; 3
    2150:	d1 05       	cpc	r29, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <_Z11LCD_SetDateii+0x4a>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	88 23       	and	r24, r24
    2158:	51 f0       	breq	.+20     	; 0x216e <_Z11LCD_SetDateii+0x62>
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	20 97       	sbiw	r28, 0x00	; 0
    215e:	09 f4       	brne	.+2      	; 0x2162 <_Z11LCD_SetDateii+0x56>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	88 23       	and	r24, r24
    2164:	21 f0       	breq	.+8      	; 0x216e <_Z11LCD_SetDateii+0x62>
			LCD_String(":");
    2166:	8e e9       	ldi	r24, 0x9E	; 158
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		}
		if (i==ClockState){
    216e:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <ClockState>
    2172:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <ClockState+0x1>
    2176:	c8 17       	cp	r28, r24
    2178:	d9 07       	cpc	r29, r25
    217a:	71 f4       	brne	.+28     	; 0x2198 <_Z11LCD_SetDateii+0x8c>
			displayTyping(clockTime[i],temp);
    217c:	fe 01       	movw	r30, r28
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	e7 55       	subi	r30, 0x57	; 87
    2184:	fd 4f       	sbci	r31, 0xFD	; 253
    2186:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <temp>
    218a:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <temp+0x1>
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
    2196:	0b c0       	rjmp	.+22     	; 0x21ae <_Z11LCD_SetDateii+0xa2>
		}
		else{
			displayTyping(clockTime[i],3);
    2198:	fe 01       	movw	r30, r28
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	e7 55       	subi	r30, 0x57	; 87
    21a0:	fd 4f       	sbci	r31, 0xFD	; 253
    21a2:	63 e0       	ldi	r22, 0x03	; 3
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
int data = 0;
char dataS[10];
void LCD_SetDate(int key, int state){
	LCD_Home(0);
	LCD_String("   20");
	for (int i=0;i<6;i++){
    21ae:	21 96       	adiw	r28, 0x01	; 1
    21b0:	bf cf       	rjmp	.-130    	; 0x2130 <_Z11LCD_SetDateii+0x24>
		}
		else{
			displayTyping(clockTime[i],3);
		}
	}
	if ((int(key)>47) & (int(key)<58) & (state ==2)){
    21b2:	21 e0       	ldi	r18, 0x01	; 1
    21b4:	c8 01       	movw	r24, r16
    21b6:	c0 97       	sbiw	r24, 0x30	; 48
    21b8:	0a 97       	sbiw	r24, 0x0a	; 10
    21ba:	08 f0       	brcs	.+2      	; 0x21be <_Z11LCD_SetDateii+0xb2>
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	92 e0       	ldi	r25, 0x02	; 2
    21c2:	e9 16       	cp	r14, r25
    21c4:	f1 04       	cpc	r15, r1
    21c6:	09 f0       	breq	.+2      	; 0x21ca <_Z11LCD_SetDateii+0xbe>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	22 23       	and	r18, r18
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <_Z11LCD_SetDateii+0xc4>
    21ce:	5e c0       	rjmp	.+188    	; 0x228c <_Z11LCD_SetDateii+0x180>
    21d0:	88 23       	and	r24, r24
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <_Z11LCD_SetDateii+0xca>
    21d4:	5b c0       	rjmp	.+182    	; 0x228c <_Z11LCD_SetDateii+0x180>
		data+=(int(key)-48);
    21d6:	00 53       	subi	r16, 0x30	; 48
    21d8:	11 09       	sbc	r17, r1
    21da:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <data>
    21de:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <data+0x1>
    21e2:	08 0f       	add	r16, r24
    21e4:	19 1f       	adc	r17, r25
    21e6:	10 93 a4 02 	sts	0x02A4, r17	; 0x8002a4 <data+0x1>
    21ea:	00 93 a3 02 	sts	0x02A3, r16	; 0x8002a3 <data>
    21ee:	2f e5       	ldi	r18, 0x5F	; 95
    21f0:	8a ee       	ldi	r24, 0xEA	; 234
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	21 50       	subi	r18, 0x01	; 1
    21f6:	80 40       	sbci	r24, 0x00	; 0
    21f8:	90 40       	sbci	r25, 0x00	; 0
    21fa:	e1 f7       	brne	.-8      	; 0x21f4 <_Z11LCD_SetDateii+0xe8>
    21fc:	00 c0       	rjmp	.+0      	; 0x21fe <_Z11LCD_SetDateii+0xf2>
    21fe:	00 00       	nop
		_delay_ms(BUTTON_DELAY);
		if (temp == 0){
    2200:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <temp>
    2204:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <temp+0x1>
    2208:	89 2b       	or	r24, r25
    220a:	21 f5       	brne	.+72     	; 0x2254 <_Z11LCD_SetDateii+0x148>
			data*=10;
    220c:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <data>
    2210:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <data+0x1>
    2214:	c9 01       	movw	r24, r18
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	22 0f       	add	r18, r18
    221c:	33 1f       	adc	r19, r19
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	22 0f       	add	r18, r18
    2224:	33 1f       	adc	r19, r19
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <data+0x1>
    222e:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <data>
			temp = 1;
    2232:	21 e0       	ldi	r18, 0x01	; 1
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	30 93 a6 02 	sts	0x02A6, r19	; 0x8002a6 <temp+0x1>
    223a:	20 93 a5 02 	sts	0x02A5, r18	; 0x8002a5 <temp>
			clockTime[ClockState] = data;
    223e:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <ClockState>
    2242:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <ClockState+0x1>
    2246:	ee 0f       	add	r30, r30
    2248:	ff 1f       	adc	r31, r31
    224a:	e7 55       	subi	r30, 0x57	; 87
    224c:	fd 4f       	sbci	r31, 0xFD	; 253
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	80 83       	st	Z, r24
    2252:	1c c0       	rjmp	.+56     	; 0x228c <_Z11LCD_SetDateii+0x180>
		}
		else{
			clockTime[ClockState] = data;
    2254:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <ClockState>
    2258:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <ClockState+0x1>
    225c:	fc 01       	movw	r30, r24
    225e:	ee 0f       	add	r30, r30
    2260:	ff 1f       	adc	r31, r31
    2262:	e7 55       	subi	r30, 0x57	; 87
    2264:	fd 4f       	sbci	r31, 0xFD	; 253
    2266:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <data>
    226a:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <data+0x1>
    226e:	31 83       	std	Z+1, r19	; 0x01
    2270:	20 83       	st	Z, r18
			ClockState++;
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <ClockState+0x1>
    2278:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <ClockState>
			data=0;
    227c:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <data+0x1>
    2280:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <data>
			temp = 0;
    2284:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <temp+0x1>
    2288:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <temp>
		}
	}
	if ((ClockState == 6) & (state==3)){
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	20 91 a7 02 	lds	r18, 0x02A7	; 0x8002a7 <ClockState>
    2292:	30 91 a8 02 	lds	r19, 0x02A8	; 0x8002a8 <ClockState+0x1>
    2296:	26 30       	cpi	r18, 0x06	; 6
    2298:	31 05       	cpc	r19, r1
    229a:	09 f0       	breq	.+2      	; 0x229e <_Z11LCD_SetDateii+0x192>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	88 23       	and	r24, r24
    22a0:	29 f1       	breq	.+74     	; 0x22ec <_Z11LCD_SetDateii+0x1e0>
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	23 e0       	ldi	r18, 0x03	; 3
    22a6:	e2 16       	cp	r14, r18
    22a8:	f1 04       	cpc	r15, r1
    22aa:	09 f0       	breq	.+2      	; 0x22ae <_Z11LCD_SetDateii+0x1a2>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	88 23       	and	r24, r24
    22b0:	e9 f0       	breq	.+58     	; 0x22ec <_Z11LCD_SetDateii+0x1e0>
		setClockTime(clockTime);
    22b2:	89 ea       	ldi	r24, 0xA9	; 169
    22b4:	92 e0       	ldi	r25, 0x02	; 2
    22b6:	0e 94 4e 09 	call	0x129c	; 0x129c <_Z12setClockTimePi>
		ClockState = 0;
    22ba:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <ClockState+0x1>
    22be:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <ClockState>
		LCD_Home(0);LCD_Clear();
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
    22ca:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
		LCD_String("      DONE!");
    22ce:	8e e1       	ldi	r24, 0x1E	; 30
    22d0:	92 e0       	ldi	r25, 0x02	; 2
    22d2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    22d6:	8f e7       	ldi	r24, 0x7F	; 127
    22d8:	9a e1       	ldi	r25, 0x1A	; 26
    22da:	26 e0       	ldi	r18, 0x06	; 6
    22dc:	81 50       	subi	r24, 0x01	; 1
    22de:	90 40       	sbci	r25, 0x00	; 0
    22e0:	20 40       	sbci	r18, 0x00	; 0
    22e2:	e1 f7       	brne	.-8      	; 0x22dc <_Z11LCD_SetDateii+0x1d0>
    22e4:	00 c0       	rjmp	.+0      	; 0x22e6 <_Z11LCD_SetDateii+0x1da>
    22e6:	00 00       	nop
		_delay_ms(2000);
		LCD_Clear();
    22e8:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
	}
}
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	08 95       	ret

000022fa <_Z8LCD_Toneci>:
char tone_List[5][10] = {"DOOM     ","STAR WARS","GOT      ","PANTHER  ","GODFATHER"};
int tone_Var = 0;
void LCD_Tone(char key,int state){
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	18 2f       	mov	r17, r24
    2302:	eb 01       	movw	r28, r22
	LCD_Home(0);
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
	if ((key=='8') & (state==2)){
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	c2 30       	cpi	r28, 0x02	; 2
    2310:	d1 05       	cpc	r29, r1
    2312:	09 f0       	breq	.+2      	; 0x2316 <_Z8LCD_Toneci+0x1c>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	18 33       	cpi	r17, 0x38	; 56
    231a:	09 f0       	breq	.+2      	; 0x231e <_Z8LCD_Toneci+0x24>
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	99 23       	and	r25, r25
    2320:	a9 f0       	breq	.+42     	; 0x234c <_Z8LCD_Toneci+0x52>
    2322:	88 23       	and	r24, r24
    2324:	99 f0       	breq	.+38     	; 0x234c <_Z8LCD_Toneci+0x52>
		tone_Var++;
    2326:	20 91 a1 02 	lds	r18, 0x02A1	; 0x8002a1 <tone_Var>
    232a:	30 91 a2 02 	lds	r19, 0x02A2	; 0x8002a2 <tone_Var+0x1>
    232e:	2f 5f       	subi	r18, 0xFF	; 255
    2330:	3f 4f       	sbci	r19, 0xFF	; 255
    2332:	30 93 a2 02 	sts	0x02A2, r19	; 0x8002a2 <tone_Var+0x1>
    2336:	20 93 a1 02 	sts	0x02A1, r18	; 0x8002a1 <tone_Var>
    233a:	2f e5       	ldi	r18, 0x5F	; 95
    233c:	3a ee       	ldi	r19, 0xEA	; 234
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	21 50       	subi	r18, 0x01	; 1
    2342:	30 40       	sbci	r19, 0x00	; 0
    2344:	90 40       	sbci	r25, 0x00	; 0
    2346:	e1 f7       	brne	.-8      	; 0x2340 <_Z8LCD_Toneci+0x46>
    2348:	00 c0       	rjmp	.+0      	; 0x234a <_Z8LCD_Toneci+0x50>
    234a:	00 00       	nop
		//LCD_Clear();
		_delay_ms(BUTTON_DELAY);
	}
	if ((key=='2') & (state ==2)){
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	12 33       	cpi	r17, 0x32	; 50
    2350:	09 f0       	breq	.+2      	; 0x2354 <_Z8LCD_Toneci+0x5a>
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	99 23       	and	r25, r25
    2356:	a1 f0       	breq	.+40     	; 0x2380 <_Z8LCD_Toneci+0x86>
    2358:	88 23       	and	r24, r24
    235a:	91 f0       	breq	.+36     	; 0x2380 <_Z8LCD_Toneci+0x86>
		tone_Var--;
    235c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <tone_Var>
    2360:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <tone_Var+0x1>
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <tone_Var+0x1>
    236a:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <tone_Var>
    236e:	2f e5       	ldi	r18, 0x5F	; 95
    2370:	3a ee       	ldi	r19, 0xEA	; 234
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	21 50       	subi	r18, 0x01	; 1
    2376:	30 40       	sbci	r19, 0x00	; 0
    2378:	80 40       	sbci	r24, 0x00	; 0
    237a:	e1 f7       	brne	.-8      	; 0x2374 <_Z8LCD_Toneci+0x7a>
    237c:	00 c0       	rjmp	.+0      	; 0x237e <_Z8LCD_Toneci+0x84>
    237e:	00 00       	nop
		//LCD_Clear();
		_delay_ms(BUTTON_DELAY);
	}
	if (tone_Var>4){
    2380:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <tone_Var>
    2384:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <tone_Var+0x1>
    2388:	05 97       	sbiw	r24, 0x05	; 5
    238a:	24 f0       	brlt	.+8      	; 0x2394 <_Z8LCD_Toneci+0x9a>
		tone_Var=0;
    238c:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <tone_Var+0x1>
    2390:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <tone_Var>
	}
	if (tone_Var<0){
    2394:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <tone_Var>
    2398:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <tone_Var+0x1>
    239c:	99 23       	and	r25, r25
    239e:	34 f4       	brge	.+12     	; 0x23ac <_Z8LCD_Toneci+0xb2>
		tone_Var=4;
    23a0:	84 e0       	ldi	r24, 0x04	; 4
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <tone_Var+0x1>
    23a8:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <tone_Var>
	}
	if (state==2){
    23ac:	c2 30       	cpi	r28, 0x02	; 2
    23ae:	d1 05       	cpc	r29, r1
    23b0:	f9 f4       	brne	.+62     	; 0x23f0 <_Z8LCD_Toneci+0xf6>
		LCD_Home(0);LCD_String(">>");
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
    23ba:	8e ed       	ldi	r24, 0xDE	; 222
    23bc:	91 e0       	ldi	r25, 0x01	; 1
    23be:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		LCD_String(tone_List[tone_Var%5]);
    23c2:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <tone_Var>
    23c6:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <tone_Var+0x1>
    23ca:	65 e0       	ldi	r22, 0x05	; 5
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    23d2:	9c 01       	movw	r18, r24
    23d4:	22 0f       	add	r18, r18
    23d6:	33 1f       	adc	r19, r19
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	82 0f       	add	r24, r18
    23e6:	93 1f       	adc	r25, r19
    23e8:	88 5b       	subi	r24, 0xB8	; 184
    23ea:	9e 4f       	sbci	r25, 0xFE	; 254
    23ec:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		// 	LCD_Home(1);
		// 	LCD_String(menu_List[(menu_Var+1)%3]);
	}
	 if (state==3){
    23f0:	23 97       	sbiw	r28, 0x03	; 3
    23f2:	31 f4       	brne	.+12     	; 0x2400 <_Z8LCD_Toneci+0x106>
		 setTone(tone_Var);
    23f4:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <tone_Var>
    23f8:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <tone_Var+0x1>
    23fc:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_Z7setTonei>
	 }

}
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	08 95       	ret

00002408 <_Z12LCD_SetAlarmci>:
	}
}
int clkTime = 0;
int num = 0;
signed int p = 3;
void LCD_SetAlarm(char key,int state){
    2408:	ef 92       	push	r14
    240a:	ff 92       	push	r15
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	18 2f       	mov	r17, r24
    2414:	eb 01       	movw	r28, r22
	if (p!=-1){
    2416:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <p>
    241a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <p+0x1>
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	b1 f1       	breq	.+108    	; 0x248e <_Z12LCD_SetAlarmci+0x86>
		LCD_Home(0);
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
		LCD_String("     ");
    242a:	8a e2       	ldi	r24, 0x2A	; 42
    242c:	92 e0       	ldi	r25, 0x02	; 2
    242e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		displayTyping(clkTime/100,3-p);
    2432:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <p>
    2436:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <p+0x1>
    243a:	23 e0       	ldi	r18, 0x03	; 3
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	28 1b       	sub	r18, r24
    2440:	39 0b       	sbc	r19, r25
    2442:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <clkTime>
    2446:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <clkTime+0x1>
    244a:	0f 2e       	mov	r0, r31
    244c:	f4 e6       	ldi	r31, 0x64	; 100
    244e:	ef 2e       	mov	r14, r31
    2450:	f1 2c       	mov	r15, r1
    2452:	f0 2d       	mov	r31, r0
    2454:	b7 01       	movw	r22, r14
    2456:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    245a:	cb 01       	movw	r24, r22
    245c:	b9 01       	movw	r22, r18
    245e:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
		LCD_String(":");
    2462:	8e e9       	ldi	r24, 0x9E	; 158
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		displayTyping(clkTime%100,1-p);
    246a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <p>
    246e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <p+0x1>
    2472:	21 e0       	ldi	r18, 0x01	; 1
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	28 1b       	sub	r18, r24
    2478:	39 0b       	sbc	r19, r25
    247a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <clkTime>
    247e:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <clkTime+0x1>
    2482:	b7 01       	movw	r22, r14
    2484:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    2488:	b9 01       	movw	r22, r18
    248a:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
	}
	//LCD_String("0000");
	if ((int(key)>47) & (int(key)<58) & (state ==2) & (p!=-1)){
    248e:	21 e0       	ldi	r18, 0x01	; 1
    2490:	90 ed       	ldi	r25, 0xD0	; 208
    2492:	91 0f       	add	r25, r17
    2494:	9a 30       	cpi	r25, 0x0A	; 10
    2496:	08 f0       	brcs	.+2      	; 0x249a <_Z12LCD_SetAlarmci+0x92>
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	c2 30       	cpi	r28, 0x02	; 2
    249e:	d1 05       	cpc	r29, r1
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <_Z12LCD_SetAlarmci+0x9c>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <p>
    24a8:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <p+0x1>
    24ac:	91 e0       	ldi	r25, 0x01	; 1
    24ae:	6f 3f       	cpi	r22, 0xFF	; 255
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	73 07       	cpc	r23, r19
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <_Z12LCD_SetAlarmci+0xb0>
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	82 23       	and	r24, r18
    24ba:	09 f4       	brne	.+2      	; 0x24be <_Z12LCD_SetAlarmci+0xb6>
    24bc:	7b c0       	rjmp	.+246    	; 0x25b4 <_Z12LCD_SetAlarmci+0x1ac>
    24be:	99 23       	and	r25, r25
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <_Z12LCD_SetAlarmci+0xbc>
    24c2:	78 c0       	rjmp	.+240    	; 0x25b4 <_Z12LCD_SetAlarmci+0x1ac>
		clkTime += (int(key)-48)*powerOf(10,p);
    24c4:	e1 2e       	mov	r14, r17
    24c6:	f1 2c       	mov	r15, r1
    24c8:	80 e3       	ldi	r24, 0x30	; 48
    24ca:	e8 1a       	sub	r14, r24
    24cc:	f1 08       	sbc	r15, r1
    24ce:	8a e0       	ldi	r24, 0x0A	; 10
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 23 08 	call	0x1046	; 0x1046 <_Z7powerOfii>
    24d6:	9c 01       	movw	r18, r24
    24d8:	e2 9e       	mul	r14, r18
    24da:	c0 01       	movw	r24, r0
    24dc:	e3 9e       	mul	r14, r19
    24de:	90 0d       	add	r25, r0
    24e0:	f2 9e       	mul	r15, r18
    24e2:	90 0d       	add	r25, r0
    24e4:	11 24       	eor	r1, r1
    24e6:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <clkTime>
    24ea:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <clkTime+0x1>
    24ee:	82 0f       	add	r24, r18
    24f0:	93 1f       	adc	r25, r19
    24f2:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <clkTime+0x1>
    24f6:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <clkTime>
		p--;
    24fa:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <p>
    24fe:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <p+0x1>
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <p+0x1>
    2508:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <p>
    250c:	3f e5       	ldi	r19, 0x5F	; 95
    250e:	8a ee       	ldi	r24, 0xEA	; 234
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	31 50       	subi	r19, 0x01	; 1
    2514:	80 40       	sbci	r24, 0x00	; 0
    2516:	90 40       	sbci	r25, 0x00	; 0
    2518:	e1 f7       	brne	.-8      	; 0x2512 <_Z12LCD_SetAlarmci+0x10a>
    251a:	00 c0       	rjmp	.+0      	; 0x251c <_Z12LCD_SetAlarmci+0x114>
    251c:	00 00       	nop
		_delay_ms(BUTTON_DELAY);
		if (p==-1){
    251e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <p>
    2522:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <p+0x1>
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	09 f0       	breq	.+2      	; 0x252c <_Z12LCD_SetAlarmci+0x124>
    252a:	44 c0       	rjmp	.+136    	; 0x25b4 <_Z12LCD_SetAlarmci+0x1ac>
			LCD_Home(0);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
			LCD_String("     ");
    2534:	8a e2       	ldi	r24, 0x2A	; 42
    2536:	92 e0       	ldi	r25, 0x02	; 2
    2538:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
			displayTyping(clkTime/100,3);LCD_String(":");displayTyping(clkTime%100,3);
    253c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <clkTime>
    2540:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <clkTime+0x1>
    2544:	0f 2e       	mov	r0, r31
    2546:	f4 e6       	ldi	r31, 0x64	; 100
    2548:	ef 2e       	mov	r14, r31
    254a:	f1 2c       	mov	r15, r1
    254c:	f0 2d       	mov	r31, r0
    254e:	b7 01       	movw	r22, r14
    2550:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    2554:	cb 01       	movw	r24, r22
    2556:	63 e0       	ldi	r22, 0x03	; 3
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
    255e:	8e e9       	ldi	r24, 0x9E	; 158
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    2566:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <clkTime>
    256a:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <clkTime+0x1>
    256e:	b7 01       	movw	r22, r14
    2570:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    2574:	63 e0       	ldi	r22, 0x03	; 3
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
    257c:	3f e3       	ldi	r19, 0x3F	; 63
    257e:	8d e0       	ldi	r24, 0x0D	; 13
    2580:	93 e0       	ldi	r25, 0x03	; 3
    2582:	31 50       	subi	r19, 0x01	; 1
    2584:	80 40       	sbci	r24, 0x00	; 0
    2586:	90 40       	sbci	r25, 0x00	; 0
    2588:	e1 f7       	brne	.-8      	; 0x2582 <_Z12LCD_SetAlarmci+0x17a>
    258a:	00 c0       	rjmp	.+0      	; 0x258c <_Z12LCD_SetAlarmci+0x184>
    258c:	00 00       	nop
			_delay_ms(1000);
			LCD_Home(0);
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
			LCD_String("SELECT THE TONE");
    2596:	80 e3       	ldi	r24, 0x30	; 48
    2598:	92 e0       	ldi	r25, 0x02	; 2
    259a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    259e:	2f e7       	ldi	r18, 0x7F	; 127
    25a0:	3a e1       	ldi	r19, 0x1A	; 26
    25a2:	86 e0       	ldi	r24, 0x06	; 6
    25a4:	21 50       	subi	r18, 0x01	; 1
    25a6:	30 40       	sbci	r19, 0x00	; 0
    25a8:	80 40       	sbci	r24, 0x00	; 0
    25aa:	e1 f7       	brne	.-8      	; 0x25a4 <_Z12LCD_SetAlarmci+0x19c>
    25ac:	00 c0       	rjmp	.+0      	; 0x25ae <_Z12LCD_SetAlarmci+0x1a6>
    25ae:	00 00       	nop
			_delay_ms(2000);
			LCD_Clear();
    25b0:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
		}
	}
	if (p==-1){
    25b4:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <p>
    25b8:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <p+0x1>
    25bc:	01 96       	adiw	r24, 0x01	; 1
    25be:	21 f4       	brne	.+8      	; 0x25c8 <_Z12LCD_SetAlarmci+0x1c0>
		LCD_Tone(key,state);
    25c0:	be 01       	movw	r22, r28
    25c2:	81 2f       	mov	r24, r17
    25c4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <_Z8LCD_Toneci>
	}
	if (state==3){
    25c8:	23 97       	sbiw	r28, 0x03	; 3
    25ca:	09 f0       	breq	.+2      	; 0x25ce <_Z12LCD_SetAlarmci+0x1c6>
    25cc:	48 c0       	rjmp	.+144    	; 0x265e <_Z12LCD_SetAlarmci+0x256>
		setAlarm(clkTime);
    25ce:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <clkTime>
    25d2:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <clkTime+0x1>
    25d6:	0e 94 44 08 	call	0x1088	; 0x1088 <_Z8setAlarmi>
		LCD_Home(0);
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
		LCD_String("ALARM IS SET TO");
    25e2:	80 e4       	ldi	r24, 0x40	; 64
    25e4:	92 e0       	ldi	r25, 0x02	; 2
    25e6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		LCD_Home(1);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
		displayTyping(clkTime/100,3);LCD_String(":");displayTyping(clkTime%100,3);
    25f2:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <clkTime>
    25f6:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <clkTime+0x1>
    25fa:	c4 e6       	ldi	r28, 0x64	; 100
    25fc:	d0 e0       	ldi	r29, 0x00	; 0
    25fe:	be 01       	movw	r22, r28
    2600:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    2604:	cb 01       	movw	r24, r22
    2606:	63 e0       	ldi	r22, 0x03	; 3
    2608:	70 e0       	ldi	r23, 0x00	; 0
    260a:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
    260e:	8e e9       	ldi	r24, 0x9E	; 158
    2610:	91 e0       	ldi	r25, 0x01	; 1
    2612:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
    2616:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <clkTime>
    261a:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <clkTime+0x1>
    261e:	be 01       	movw	r22, r28
    2620:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__divmodhi4>
    2624:	63 e0       	ldi	r22, 0x03	; 3
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z13displayTypingii>
		clkTime=0;num=0;p=3;
    262c:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <clkTime+0x1>
    2630:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <clkTime>
    2634:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <num+0x1>
    2638:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <num>
    263c:	83 e0       	ldi	r24, 0x03	; 3
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <p+0x1>
    2644:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <p>
    2648:	3f e7       	ldi	r19, 0x7F	; 127
    264a:	8a e1       	ldi	r24, 0x1A	; 26
    264c:	96 e0       	ldi	r25, 0x06	; 6
    264e:	31 50       	subi	r19, 0x01	; 1
    2650:	80 40       	sbci	r24, 0x00	; 0
    2652:	90 40       	sbci	r25, 0x00	; 0
    2654:	e1 f7       	brne	.-8      	; 0x264e <_Z12LCD_SetAlarmci+0x246>
    2656:	00 c0       	rjmp	.+0      	; 0x2658 <_Z12LCD_SetAlarmci+0x250>
    2658:	00 00       	nop
		_delay_ms(2000);
		LCD_Clear();
    265a:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
	}
}
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	ff 90       	pop	r15
    2666:	ef 90       	pop	r14
    2668:	08 95       	ret

0000266a <_Z14resetVariablesv>:
	if ((state >1) & (menu_Var==3)){
		timer(key,state);
	}
}
void resetVariables(){
	resetAlarmVariables();
    266a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_Z19resetAlarmVariablesv>
	tone_Var=0;
    266e:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <tone_Var+0x1>
    2672:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <tone_Var>
	clockTime[0]=0;clockTime[1]=0;clockTime[2]=0;clockTime[3]=0;clockTime[4]=0;clockTime[5]=0;
    2676:	e9 ea       	ldi	r30, 0xA9	; 169
    2678:	f2 e0       	ldi	r31, 0x02	; 2
    267a:	11 82       	std	Z+1, r1	; 0x01
    267c:	10 82       	st	Z, r1
    267e:	13 82       	std	Z+3, r1	; 0x03
    2680:	12 82       	std	Z+2, r1	; 0x02
    2682:	15 82       	std	Z+5, r1	; 0x05
    2684:	14 82       	std	Z+4, r1	; 0x04
    2686:	17 82       	std	Z+7, r1	; 0x07
    2688:	16 82       	std	Z+6, r1	; 0x06
    268a:	11 86       	std	Z+9, r1	; 0x09
    268c:	10 86       	std	Z+8, r1	; 0x08
    268e:	13 86       	std	Z+11, r1	; 0x0b
    2690:	12 86       	std	Z+10, r1	; 0x0a
	ClockState = 0;
    2692:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <ClockState+0x1>
    2696:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <ClockState>
	temp = 0;
    269a:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <temp+0x1>
    269e:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <temp>
	data = 0;
    26a2:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <data+0x1>
    26a6:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <data>
	clkTime = 0;
    26aa:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <clkTime+0x1>
    26ae:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <clkTime>
	num = 0;
    26b2:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <num+0x1>
    26b6:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <num>
	p = 3;
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <p+0x1>
    26c2:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <p>
    26c6:	08 95       	ret

000026c8 <_Z8LCD_Menuci>:
	 }

}
char menu_List[4][11] = {"SET ALARM ","SET TIME  ","SEE ALARMS","TIMER     "};
int menu_Var = 0;
void LCD_Menu(char key,int state){
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	18 2f       	mov	r17, r24
    26d2:	eb 01       	movw	r28, r22
	LCD_Home(0);
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
	if ((key=='8') & (state==1)){
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	c1 30       	cpi	r28, 0x01	; 1
    26e0:	d1 05       	cpc	r29, r1
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <_Z8LCD_Menuci+0x1e>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	91 e0       	ldi	r25, 0x01	; 1
    26e8:	18 33       	cpi	r17, 0x38	; 56
    26ea:	09 f0       	breq	.+2      	; 0x26ee <_Z8LCD_Menuci+0x26>
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	99 23       	and	r25, r25
    26f0:	a9 f0       	breq	.+42     	; 0x271c <_Z8LCD_Menuci+0x54>
    26f2:	88 23       	and	r24, r24
    26f4:	99 f0       	breq	.+38     	; 0x271c <_Z8LCD_Menuci+0x54>
		menu_Var++;
    26f6:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <menu_Var>
    26fa:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <menu_Var+0x1>
    26fe:	2f 5f       	subi	r18, 0xFF	; 255
    2700:	3f 4f       	sbci	r19, 0xFF	; 255
    2702:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <menu_Var+0x1>
    2706:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <menu_Var>
    270a:	2f e5       	ldi	r18, 0x5F	; 95
    270c:	3a ee       	ldi	r19, 0xEA	; 234
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	21 50       	subi	r18, 0x01	; 1
    2712:	30 40       	sbci	r19, 0x00	; 0
    2714:	90 40       	sbci	r25, 0x00	; 0
    2716:	e1 f7       	brne	.-8      	; 0x2710 <_Z8LCD_Menuci+0x48>
    2718:	00 c0       	rjmp	.+0      	; 0x271a <_Z8LCD_Menuci+0x52>
    271a:	00 00       	nop
		//LCD_Clear();
		_delay_ms(BUTTON_DELAY);
	}
	if ((key=='2') & (state ==1)){
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	12 33       	cpi	r17, 0x32	; 50
    2720:	09 f0       	breq	.+2      	; 0x2724 <_Z8LCD_Menuci+0x5c>
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	99 23       	and	r25, r25
    2726:	a1 f0       	breq	.+40     	; 0x2750 <_Z8LCD_Menuci+0x88>
    2728:	88 23       	and	r24, r24
    272a:	91 f0       	breq	.+36     	; 0x2750 <_Z8LCD_Menuci+0x88>
		menu_Var--;
    272c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <menu_Var>
    2730:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <menu_Var+0x1>
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <menu_Var+0x1>
    273a:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <menu_Var>
    273e:	2f e5       	ldi	r18, 0x5F	; 95
    2740:	3a ee       	ldi	r19, 0xEA	; 234
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	21 50       	subi	r18, 0x01	; 1
    2746:	30 40       	sbci	r19, 0x00	; 0
    2748:	80 40       	sbci	r24, 0x00	; 0
    274a:	e1 f7       	brne	.-8      	; 0x2744 <_Z8LCD_Menuci+0x7c>
    274c:	00 c0       	rjmp	.+0      	; 0x274e <_Z8LCD_Menuci+0x86>
    274e:	00 00       	nop
		//LCD_Clear();
		_delay_ms(BUTTON_DELAY);
	}
	if (menu_Var>3){
    2750:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <menu_Var>
    2754:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <menu_Var+0x1>
    2758:	04 97       	sbiw	r24, 0x04	; 4
    275a:	24 f0       	brlt	.+8      	; 0x2764 <_Z8LCD_Menuci+0x9c>
		menu_Var=0;
    275c:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <menu_Var+0x1>
    2760:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <menu_Var>
	}
	if (menu_Var<0){
    2764:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <menu_Var>
    2768:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <menu_Var+0x1>
    276c:	99 23       	and	r25, r25
    276e:	34 f4       	brge	.+12     	; 0x277c <_Z8LCD_Menuci+0xb4>
		menu_Var=3;
    2770:	83 e0       	ldi	r24, 0x03	; 3
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <menu_Var+0x1>
    2778:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <menu_Var>
	}
	if (state==1){
    277c:	c1 30       	cpi	r28, 0x01	; 1
    277e:	d1 05       	cpc	r29, r1
    2780:	11 f5       	brne	.+68     	; 0x27c6 <_Z8LCD_Menuci+0xfe>
		LCD_Home(0);LCD_String(">>");
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z8LCD_Homei>
    278a:	8e ed       	ldi	r24, 0xDE	; 222
    278c:	91 e0       	ldi	r25, 0x01	; 1
    278e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		LCD_String(menu_List[menu_Var%4]);
    2792:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <menu_Var>
    2796:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <menu_Var+0x1>
    279a:	23 70       	andi	r18, 0x03	; 3
    279c:	30 78       	andi	r19, 0x80	; 128
    279e:	33 23       	and	r19, r19
    27a0:	34 f4       	brge	.+12     	; 0x27ae <_Z8LCD_Menuci+0xe6>
    27a2:	21 50       	subi	r18, 0x01	; 1
    27a4:	31 09       	sbc	r19, r1
    27a6:	2c 6f       	ori	r18, 0xFC	; 252
    27a8:	3f 6f       	ori	r19, 0xFF	; 255
    27aa:	2f 5f       	subi	r18, 0xFF	; 255
    27ac:	3f 4f       	sbci	r19, 0xFF	; 255
    27ae:	4b e0       	ldi	r20, 0x0B	; 11
    27b0:	42 9f       	mul	r20, r18
    27b2:	c0 01       	movw	r24, r0
    27b4:	43 9f       	mul	r20, r19
    27b6:	90 0d       	add	r25, r0
    27b8:	11 24       	eor	r1, r1
    27ba:	84 5e       	subi	r24, 0xE4	; 228
    27bc:	9e 4f       	sbci	r25, 0xFE	; 254
    27be:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
		resetVariables();
    27c2:	0e 94 35 13 	call	0x266a	; 0x266a <_Z14resetVariablesv>
	// 	LCD_Home(1);
	// 	LCD_String(menu_List[(menu_Var+1)%3]);
	}
	if ((state >1) & (menu_Var==0)){
    27c6:	01 e0       	ldi	r16, 0x01	; 1
    27c8:	c2 30       	cpi	r28, 0x02	; 2
    27ca:	d1 05       	cpc	r29, r1
    27cc:	0c f4       	brge	.+2      	; 0x27d0 <_Z8LCD_Menuci+0x108>
    27ce:	00 e0       	ldi	r16, 0x00	; 0
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <menu_Var>
    27d6:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <menu_Var+0x1>
    27da:	23 2b       	or	r18, r19
    27dc:	09 f0       	breq	.+2      	; 0x27e0 <_Z8LCD_Menuci+0x118>
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	88 23       	and	r24, r24
    27e2:	31 f0       	breq	.+12     	; 0x27f0 <_Z8LCD_Menuci+0x128>
    27e4:	00 23       	and	r16, r16
    27e6:	21 f0       	breq	.+8      	; 0x27f0 <_Z8LCD_Menuci+0x128>
		LCD_SetAlarm(key,state);
    27e8:	be 01       	movw	r22, r28
    27ea:	81 2f       	mov	r24, r17
    27ec:	0e 94 04 12 	call	0x2408	; 0x2408 <_Z12LCD_SetAlarmci>
	}
	if ((state >1) & (menu_Var==1)){
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <menu_Var>
    27f6:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <menu_Var+0x1>
    27fa:	21 30       	cpi	r18, 0x01	; 1
    27fc:	31 05       	cpc	r19, r1
    27fe:	09 f0       	breq	.+2      	; 0x2802 <_Z8LCD_Menuci+0x13a>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	88 23       	and	r24, r24
    2804:	39 f0       	breq	.+14     	; 0x2814 <_Z8LCD_Menuci+0x14c>
    2806:	00 23       	and	r16, r16
    2808:	29 f0       	breq	.+10     	; 0x2814 <_Z8LCD_Menuci+0x14c>
		LCD_SetDate(key,state);
    280a:	be 01       	movw	r22, r28
    280c:	81 2f       	mov	r24, r17
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	0e 94 86 10 	call	0x210c	; 0x210c <_Z11LCD_SetDateii>
	}
	if ((state >1) & (menu_Var==2)){
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <menu_Var>
    281a:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <menu_Var+0x1>
    281e:	22 30       	cpi	r18, 0x02	; 2
    2820:	31 05       	cpc	r19, r1
    2822:	09 f0       	breq	.+2      	; 0x2826 <_Z8LCD_Menuci+0x15e>
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	88 23       	and	r24, r24
    2828:	31 f0       	breq	.+12     	; 0x2836 <_Z8LCD_Menuci+0x16e>
    282a:	00 23       	and	r16, r16
    282c:	21 f0       	breq	.+8      	; 0x2836 <_Z8LCD_Menuci+0x16e>
		showAlarms(key,state);
    282e:	be 01       	movw	r22, r28
    2830:	81 2f       	mov	r24, r17
    2832:	0e 94 6f 0a 	call	0x14de	; 0x14de <_Z10showAlarmsci>
	}
	if ((state >1) & (menu_Var==3)){
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <menu_Var>
    283c:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <menu_Var+0x1>
    2840:	23 30       	cpi	r18, 0x03	; 3
    2842:	31 05       	cpc	r19, r1
    2844:	09 f0       	breq	.+2      	; 0x2848 <_Z8LCD_Menuci+0x180>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	88 23       	and	r24, r24
    284a:	31 f0       	breq	.+12     	; 0x2858 <_Z8LCD_Menuci+0x190>
    284c:	00 23       	and	r16, r16
    284e:	21 f0       	breq	.+8      	; 0x2858 <_Z8LCD_Menuci+0x190>
		timer(key,state);
    2850:	be 01       	movw	r22, r28
    2852:	81 2f       	mov	r24, r17
    2854:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_Z5timerci>
	}
}
    2858:	df 91       	pop	r29
    285a:	cf 91       	pop	r28
    285c:	1f 91       	pop	r17
    285e:	0f 91       	pop	r16
    2860:	08 95       	ret

00002862 <_Z14ds1307_dec2bcdh>:
#define F_CPU 1000000UL
#endif


uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
    2862:	9d ec       	ldi	r25, 0xCD	; 205
    2864:	89 9f       	mul	r24, r25
    2866:	91 2d       	mov	r25, r1
    2868:	11 24       	eor	r1, r1
    286a:	96 95       	lsr	r25
    286c:	96 95       	lsr	r25
    286e:	96 95       	lsr	r25
    2870:	29 2f       	mov	r18, r25
    2872:	22 0f       	add	r18, r18
    2874:	92 0f       	add	r25, r18
    2876:	29 2f       	mov	r18, r25
    2878:	22 0f       	add	r18, r18
}
    287a:	82 0f       	add	r24, r18
    287c:	08 95       	ret

0000287e <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	35 95       	asr	r19
    2884:	27 95       	ror	r18
    2886:	35 95       	asr	r19
    2888:	27 95       	ror	r18
    288a:	35 95       	asr	r19
    288c:	27 95       	ror	r18
    288e:	35 95       	asr	r19
    2890:	27 95       	ror	r18
    2892:	92 2f       	mov	r25, r18
    2894:	99 0f       	add	r25, r25
    2896:	29 0f       	add	r18, r25
    2898:	92 2f       	mov	r25, r18
    289a:	99 0f       	add	r25, r25
}
    289c:	89 1b       	sub	r24, r25
    289e:	08 95       	ret

000028a0 <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
    28a0:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28a4:	83 e0       	ldi	r24, 0x03	; 3
    28a6:	8a 95       	dec	r24
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <_Z11ds1307_initv+0x6>
    28aa:	00 00       	nop
    28ac:	08 95       	ret

000028ae <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
    28ae:	cf 92       	push	r12
    28b0:	ef 92       	push	r14
    28b2:	ff 92       	push	r15
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	c8 2f       	mov	r28, r24
    28be:	d6 2f       	mov	r29, r22
    28c0:	14 2f       	mov	r17, r20
    28c2:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
    28c4:	80 ed       	ldi	r24, 0xD0	; 208
    28c6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_Z14i2c_start_waith>
	i2c_write(0x00);
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
    28d0:	8c 2d       	mov	r24, r12
    28d2:	0e 94 31 14 	call	0x2862	; 0x2862 <_Z14ds1307_dec2bcdh>
    28d6:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
    28da:	8e 2d       	mov	r24, r14
    28dc:	0e 94 31 14 	call	0x2862	; 0x2862 <_Z14ds1307_dec2bcdh>
    28e0:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
    28e4:	80 2f       	mov	r24, r16
    28e6:	0e 94 31 14 	call	0x2862	; 0x2862 <_Z14ds1307_dec2bcdh>
    28ea:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
    28ee:	8f 2d       	mov	r24, r15
    28f0:	0e 94 31 14 	call	0x2862	; 0x2862 <_Z14ds1307_dec2bcdh>
    28f4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
    28f8:	81 2f       	mov	r24, r17
    28fa:	0e 94 31 14 	call	0x2862	; 0x2862 <_Z14ds1307_dec2bcdh>
    28fe:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
    2902:	8d 2f       	mov	r24, r29
    2904:	0e 94 31 14 	call	0x2862	; 0x2862 <_Z14ds1307_dec2bcdh>
    2908:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
    290c:	8c 2f       	mov	r24, r28
    290e:	0e 94 31 14 	call	0x2862	; 0x2862 <_Z14ds1307_dec2bcdh>
    2912:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_write(0x00);
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_stop();
    291c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_Z8i2c_stopv>
}
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	cf 90       	pop	r12
    292e:	08 95       	ret

00002930 <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
    2930:	6f 92       	push	r6
    2932:	7f 92       	push	r7
    2934:	8f 92       	push	r8
    2936:	9f 92       	push	r9
    2938:	af 92       	push	r10
    293a:	bf 92       	push	r11
    293c:	cf 92       	push	r12
    293e:	df 92       	push	r13
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	ec 01       	movw	r28, r24
    294e:	3b 01       	movw	r6, r22
    2950:	5a 01       	movw	r10, r20
    2952:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
    2954:	80 ed       	ldi	r24, 0xD0	; 208
    2956:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_Z14i2c_start_waith>
	i2c_write(0x00);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_Z9i2c_writeh>
	i2c_stop();
    2960:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
    2964:	81 ed       	ldi	r24, 0xD1	; 209
    2966:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
    296a:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_Z11i2c_readAckv>
    296e:	8f 77       	andi	r24, 0x7F	; 127
    2970:	0e 94 3f 14 	call	0x287e	; 0x287e <_Z14ds1307_bcd2dech>
    2974:	f6 01       	movw	r30, r12
    2976:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
    2978:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_Z11i2c_readAckv>
    297c:	0e 94 3f 14 	call	0x287e	; 0x287e <_Z14ds1307_bcd2dech>
    2980:	f7 01       	movw	r30, r14
    2982:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
    2984:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_Z11i2c_readAckv>
    2988:	0e 94 3f 14 	call	0x287e	; 0x287e <_Z14ds1307_bcd2dech>
    298c:	f8 01       	movw	r30, r16
    298e:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
    2990:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_Z11i2c_readAckv>
    2994:	0e 94 3f 14 	call	0x287e	; 0x287e <_Z14ds1307_bcd2dech>
    2998:	f4 01       	movw	r30, r8
    299a:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
    299c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_Z11i2c_readAckv>
    29a0:	0e 94 3f 14 	call	0x287e	; 0x287e <_Z14ds1307_bcd2dech>
    29a4:	f5 01       	movw	r30, r10
    29a6:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
    29a8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_Z11i2c_readAckv>
    29ac:	0e 94 3f 14 	call	0x287e	; 0x287e <_Z14ds1307_bcd2dech>
    29b0:	f3 01       	movw	r30, r6
    29b2:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
    29b4:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <_Z11i2c_readNakv>
    29b8:	0e 94 3f 14 	call	0x287e	; 0x287e <_Z14ds1307_bcd2dech>
    29bc:	88 83       	st	Y, r24
	i2c_stop();
    29be:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_Z8i2c_stopv>
}
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	ff 90       	pop	r15
    29cc:	ef 90       	pop	r14
    29ce:	df 90       	pop	r13
    29d0:	cf 90       	pop	r12
    29d2:	bf 90       	pop	r11
    29d4:	af 90       	pop	r10
    29d6:	9f 90       	pop	r9
    29d8:	8f 90       	pop	r8
    29da:	7f 90       	pop	r7
    29dc:	6f 90       	pop	r6
    29de:	08 95       	ret

000029e0 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    29e0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    29e4:	8d ef       	ldi	r24, 0xFD	; 253
    29e6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    29ea:	08 95       	ret

000029ec <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    29ec:	94 ea       	ldi	r25, 0xA4	; 164
    29ee:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    29f2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    29f6:	99 23       	and	r25, r25
    29f8:	e4 f7       	brge	.-8      	; 0x29f2 <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    29fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    29fe:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2a00:	98 30       	cpi	r25, 0x08	; 8
    2a02:	11 f0       	breq	.+4      	; 0x2a08 <_Z9i2c_starth+0x1c>
    2a04:	90 31       	cpi	r25, 0x10	; 16
    2a06:	91 f4       	brne	.+36     	; 0x2a2c <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
    2a08:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    2a0c:	84 e8       	ldi	r24, 0x84	; 132
    2a0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2a12:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2a16:	88 23       	and	r24, r24
    2a18:	e4 f7       	brge	.-8      	; 0x2a12 <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2a1a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2a1e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2a20:	88 31       	cpi	r24, 0x18	; 24
    2a22:	31 f0       	breq	.+12     	; 0x2a30 <_Z9i2c_starth+0x44>
    2a24:	80 34       	cpi	r24, 0x40	; 64
    2a26:	31 f4       	brne	.+12     	; 0x2a34 <_Z9i2c_starth+0x48>

	return 0;
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2a34:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    2a36:	08 95       	ret

00002a38 <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2a38:	94 ea       	ldi	r25, 0xA4	; 164
    2a3a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2a3e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2a42:	99 23       	and	r25, r25
    2a44:	e4 f7       	brge	.-8      	; 0x2a3e <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2a46:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2a4a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2a4c:	98 30       	cpi	r25, 0x08	; 8
    2a4e:	11 f0       	breq	.+4      	; 0x2a54 <_Z14i2c_start_waith+0x1c>
    2a50:	90 31       	cpi	r25, 0x10	; 16
    2a52:	91 f7       	brne	.-28     	; 0x2a38 <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
    2a54:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2a58:	94 e8       	ldi	r25, 0x84	; 132
    2a5a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2a5e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2a62:	99 23       	and	r25, r25
    2a64:	e4 f7       	brge	.-8      	; 0x2a5e <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2a66:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2a6a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2a6c:	90 32       	cpi	r25, 0x20	; 32
    2a6e:	11 f0       	breq	.+4      	; 0x2a74 <_Z14i2c_start_waith+0x3c>
    2a70:	98 35       	cpi	r25, 0x58	; 88
    2a72:	41 f4       	brne	.+16     	; 0x2a84 <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2a74:	94 e9       	ldi	r25, 0x94	; 148
    2a76:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2a7a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2a7e:	94 fd       	sbrc	r25, 4
    2a80:	fc cf       	rjmp	.-8      	; 0x2a7a <_Z14i2c_start_waith+0x42>
    2a82:	da cf       	rjmp	.-76     	; 0x2a38 <_Z14i2c_start_waith>
    2a84:	08 95       	ret

00002a86 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    2a86:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_Z9i2c_starth>

}/* i2c_rep_start */
    2a8a:	08 95       	ret

00002a8c <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2a8c:	84 e9       	ldi	r24, 0x94	; 148
    2a8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2a92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2a96:	84 fd       	sbrc	r24, 4
    2a98:	fc cf       	rjmp	.-8      	; 0x2a92 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    2a9a:	08 95       	ret

00002a9c <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2a9c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    2aa0:	84 e8       	ldi	r24, 0x84	; 132
    2aa2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2aa6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2aaa:	88 23       	and	r24, r24
    2aac:	e4 f7       	brge	.-8      	; 0x2aa6 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2aae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2ab2:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2ab4:	88 32       	cpi	r24, 0x28	; 40
    2ab6:	11 f0       	breq	.+4      	; 0x2abc <_Z9i2c_writeh+0x20>
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	08 95       	ret
	return 0;
    2abc:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    2abe:	08 95       	ret

00002ac0 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2ac0:	84 ec       	ldi	r24, 0xC4	; 196
    2ac2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
    2ac6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2aca:	88 23       	and	r24, r24
    2acc:	e4 f7       	brge	.-8      	; 0x2ac6 <_Z11i2c_readAckv+0x6>

    return TWDR;
    2ace:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
    2ad2:	08 95       	ret

00002ad4 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2ad4:	84 e8       	ldi	r24, 0x84	; 132
    2ad6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
    2ada:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2ade:	88 23       	and	r24, r24
    2ae0:	e4 f7       	brge	.-8      	; 0x2ada <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    2ae2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
    2ae6:	08 95       	ret

00002ae8 <_Z8btnPressv>:
{
} //~Keypad


char btnPress(){
	keyDir = 0x0F;
    2ae8:	8f e0       	ldi	r24, 0x0F	; 15
    2aea:	87 b9       	out	0x07, r24	; 7
	for (int i=0;i<4;i++){
    2aec:	60 e0       	ldi	r22, 0x00	; 0
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	64 30       	cpi	r22, 0x04	; 4
    2af2:	71 05       	cpc	r23, r1
    2af4:	94 f5       	brge	.+100    	; 0x2b5a <_Z8btnPressv+0x72>
		keyPort = 1<<row[i];
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	fb 01       	movw	r30, r22
    2afc:	e1 58       	subi	r30, 0x81	; 129
    2afe:	fe 4f       	sbci	r31, 0xFE	; 254
    2b00:	00 80       	ld	r0, Z
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <_Z8btnPressv+0x20>
    2b04:	88 0f       	add	r24, r24
    2b06:	99 1f       	adc	r25, r25
    2b08:	0a 94       	dec	r0
    2b0a:	e2 f7       	brpl	.-8      	; 0x2b04 <_Z8btnPressv+0x1c>
    2b0c:	88 b9       	out	0x08, r24	; 8
		for (int j = 0;j<3;j++){
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	83 30       	cpi	r24, 0x03	; 3
    2b14:	91 05       	cpc	r25, r1
    2b16:	f4 f4       	brge	.+60     	; 0x2b54 <_Z8btnPressv+0x6c>
			if (keyPin==(1<<colomn[j])){
    2b18:	43 b1       	in	r20, 0x03	; 3
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	21 e0       	ldi	r18, 0x01	; 1
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	fc 01       	movw	r30, r24
    2b22:	e4 58       	subi	r30, 0x84	; 132
    2b24:	fe 4f       	sbci	r31, 0xFE	; 254
    2b26:	00 80       	ld	r0, Z
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <_Z8btnPressv+0x46>
    2b2a:	22 0f       	add	r18, r18
    2b2c:	33 1f       	adc	r19, r19
    2b2e:	0a 94       	dec	r0
    2b30:	e2 f7       	brpl	.-8      	; 0x2b2a <_Z8btnPressv+0x42>
    2b32:	42 17       	cp	r20, r18
    2b34:	53 07       	cpc	r21, r19
    2b36:	61 f4       	brne	.+24     	; 0x2b50 <_Z8btnPressv+0x68>
				//_delay_ms(100);
				return keys[i][j];
    2b38:	9b 01       	movw	r18, r22
    2b3a:	22 0f       	add	r18, r18
    2b3c:	33 1f       	adc	r19, r19
    2b3e:	62 0f       	add	r22, r18
    2b40:	73 1f       	adc	r23, r19
    2b42:	6d 57       	subi	r22, 0x7D	; 125
    2b44:	7e 4f       	sbci	r23, 0xFE	; 254
    2b46:	fb 01       	movw	r30, r22
    2b48:	e8 0f       	add	r30, r24
    2b4a:	f9 1f       	adc	r31, r25
    2b4c:	80 81       	ld	r24, Z
    2b4e:	08 95       	ret

char btnPress(){
	keyDir = 0x0F;
	for (int i=0;i<4;i++){
		keyPort = 1<<row[i];
		for (int j = 0;j<3;j++){
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	df cf       	rjmp	.-66     	; 0x2b12 <_Z8btnPressv+0x2a>
} //~Keypad


char btnPress(){
	keyDir = 0x0F;
	for (int i=0;i<4;i++){
    2b54:	6f 5f       	subi	r22, 0xFF	; 255
    2b56:	7f 4f       	sbci	r23, 0xFF	; 255
    2b58:	cb cf       	rjmp	.-106    	; 0x2af0 <_Z8btnPressv+0x8>
				//_delay_ms(100);
				return keys[i][j];
			}
		}
	}
	return '&';
    2b5a:	86 e2       	ldi	r24, 0x26	; 38
    2b5c:	08 95       	ret

00002b5e <main>:
#ifndef F_CPU
#define F_CPU 1000000UL
#endif
int main()
{
	init_buzzer();		// Initialize pins used for buzzer and Interrupt button
    2b5e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <_Z11init_buzzerv>
	LCD_Init();			/* Initialization of LCD*/
    2b62:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_Z8LCD_Initv>
	LCD_String("   WELCOME!!!");
    2b66:	80 e5       	ldi	r24, 0x50	; 80
    2b68:	92 e0       	ldi	r25, 0x02	; 2
    2b6a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_Z10LCD_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b6e:	2f eb       	ldi	r18, 0xBF	; 191
    2b70:	87 e2       	ldi	r24, 0x27	; 39
    2b72:	99 e0       	ldi	r25, 0x09	; 9
    2b74:	21 50       	subi	r18, 0x01	; 1
    2b76:	80 40       	sbci	r24, 0x00	; 0
    2b78:	90 40       	sbci	r25, 0x00	; 0
    2b7a:	e1 f7       	brne	.-8      	; 0x2b74 <main+0x16>
    2b7c:	00 c0       	rjmp	.+0      	; 0x2b7e <main+0x20>
    2b7e:	00 00       	nop
	_delay_ms(3000);
	ds1307_init();
    2b80:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_Z11ds1307_initv>
	//int clocktime[6] = {21,05,4,12,8,35};
	//setClockTime(clocktime);
	//setAlarm(1209);setAlarm(1223);
	int menu = 0;
    2b84:	c0 e0       	ldi	r28, 0x00	; 0
    2b86:	d0 e0       	ldi	r29, 0x00	; 0
	char key;
	while(1){
		checkAlarm();
    2b88:	0e 94 91 08 	call	0x1122	; 0x1122 <_Z10checkAlarmv>
		key = btnPress();
    2b8c:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_Z8btnPressv>
    2b90:	18 2f       	mov	r17, r24
		if (menu==0){
    2b92:	20 97       	sbiw	r28, 0x00	; 0
    2b94:	11 f4       	brne	.+4      	; 0x2b9a <main+0x3c>
			displayTime();
    2b96:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_Z11displayTimev>
		}
		if (key=='*'){
    2b9a:	1a 32       	cpi	r17, 0x2A	; 42
    2b9c:	61 f4       	brne	.+24     	; 0x2bb6 <main+0x58>
    2b9e:	2f e5       	ldi	r18, 0x5F	; 95
    2ba0:	8a ee       	ldi	r24, 0xEA	; 234
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	21 50       	subi	r18, 0x01	; 1
    2ba6:	80 40       	sbci	r24, 0x00	; 0
    2ba8:	90 40       	sbci	r25, 0x00	; 0
    2baa:	e1 f7       	brne	.-8      	; 0x2ba4 <main+0x46>
    2bac:	00 c0       	rjmp	.+0      	; 0x2bae <main+0x50>
    2bae:	00 00       	nop
			_delay_ms(BUTTON_DELAY);
			menu ++;
    2bb0:	21 96       	adiw	r28, 0x01	; 1
			LCD_Clear();
    2bb2:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
		}
		if (menu>0){
    2bb6:	1c 16       	cp	r1, r28
    2bb8:	1d 06       	cpc	r1, r29
    2bba:	24 f4       	brge	.+8      	; 0x2bc4 <main+0x66>
			LCD_Menu(key,menu);
    2bbc:	be 01       	movw	r22, r28
    2bbe:	81 2f       	mov	r24, r17
    2bc0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_Z8LCD_Menuci>
		}
		if (menu==3 | menu==-1){
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	c3 30       	cpi	r28, 0x03	; 3
    2bc8:	d1 05       	cpc	r29, r1
    2bca:	09 f0       	breq	.+2      	; 0x2bce <main+0x70>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	81 11       	cpse	r24, r1
    2bd0:	08 c0       	rjmp	.+16     	; 0x2be2 <main+0x84>
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	cf 3f       	cpi	r28, 0xFF	; 255
    2bd6:	2f ef       	ldi	r18, 0xFF	; 255
    2bd8:	d2 07       	cpc	r29, r18
    2bda:	09 f0       	breq	.+2      	; 0x2bde <main+0x80>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	88 23       	and	r24, r24
    2be0:	11 f0       	breq	.+4      	; 0x2be6 <main+0x88>
			menu = 0;
    2be2:	c0 e0       	ldi	r28, 0x00	; 0
    2be4:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (key=='#'){
    2be6:	13 32       	cpi	r17, 0x23	; 35
    2be8:	79 f6       	brne	.-98     	; 0x2b88 <main+0x2a>
    2bea:	8f e5       	ldi	r24, 0x5F	; 95
    2bec:	9a ee       	ldi	r25, 0xEA	; 234
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	81 50       	subi	r24, 0x01	; 1
    2bf2:	90 40       	sbci	r25, 0x00	; 0
    2bf4:	20 40       	sbci	r18, 0x00	; 0
    2bf6:	e1 f7       	brne	.-8      	; 0x2bf0 <main+0x92>
    2bf8:	00 c0       	rjmp	.+0      	; 0x2bfa <main+0x9c>
    2bfa:	00 00       	nop
			_delay_ms(BUTTON_DELAY);
			menu --;
    2bfc:	21 97       	sbiw	r28, 0x01	; 1
			LCD_Clear();
    2bfe:	0e 94 01 10 	call	0x2002	; 0x2002 <_Z9LCD_Clearv>
    2c02:	c2 cf       	rjmp	.-124    	; 0x2b88 <main+0x2a>

00002c04 <__cmpsf2>:
    2c04:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__fp_cmp>
    2c08:	08 f4       	brcc	.+2      	; 0x2c0c <__cmpsf2+0x8>
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	08 95       	ret

00002c0e <__divsf3>:
    2c0e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <__divsf3x>
    2c12:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__fp_round>
    2c16:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__fp_pscB>
    2c1a:	58 f0       	brcs	.+22     	; 0x2c32 <__divsf3+0x24>
    2c1c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__fp_pscA>
    2c20:	40 f0       	brcs	.+16     	; 0x2c32 <__divsf3+0x24>
    2c22:	29 f4       	brne	.+10     	; 0x2c2e <__divsf3+0x20>
    2c24:	5f 3f       	cpi	r21, 0xFF	; 255
    2c26:	29 f0       	breq	.+10     	; 0x2c32 <__divsf3+0x24>
    2c28:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__fp_inf>
    2c2c:	51 11       	cpse	r21, r1
    2c2e:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_szero>
    2c32:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__fp_nan>

00002c36 <__divsf3x>:
    2c36:	0e 94 38 17 	call	0x2e70	; 0x2e70 <__fp_split3>
    2c3a:	68 f3       	brcs	.-38     	; 0x2c16 <__divsf3+0x8>

00002c3c <__divsf3_pse>:
    2c3c:	99 23       	and	r25, r25
    2c3e:	b1 f3       	breq	.-20     	; 0x2c2c <__divsf3+0x1e>
    2c40:	55 23       	and	r21, r21
    2c42:	91 f3       	breq	.-28     	; 0x2c28 <__divsf3+0x1a>
    2c44:	95 1b       	sub	r25, r21
    2c46:	55 0b       	sbc	r21, r21
    2c48:	bb 27       	eor	r27, r27
    2c4a:	aa 27       	eor	r26, r26
    2c4c:	62 17       	cp	r22, r18
    2c4e:	73 07       	cpc	r23, r19
    2c50:	84 07       	cpc	r24, r20
    2c52:	38 f0       	brcs	.+14     	; 0x2c62 <__divsf3_pse+0x26>
    2c54:	9f 5f       	subi	r25, 0xFF	; 255
    2c56:	5f 4f       	sbci	r21, 0xFF	; 255
    2c58:	22 0f       	add	r18, r18
    2c5a:	33 1f       	adc	r19, r19
    2c5c:	44 1f       	adc	r20, r20
    2c5e:	aa 1f       	adc	r26, r26
    2c60:	a9 f3       	breq	.-22     	; 0x2c4c <__divsf3_pse+0x10>
    2c62:	35 d0       	rcall	.+106    	; 0x2cce <__divsf3_pse+0x92>
    2c64:	0e 2e       	mov	r0, r30
    2c66:	3a f0       	brmi	.+14     	; 0x2c76 <__divsf3_pse+0x3a>
    2c68:	e0 e8       	ldi	r30, 0x80	; 128
    2c6a:	32 d0       	rcall	.+100    	; 0x2cd0 <__divsf3_pse+0x94>
    2c6c:	91 50       	subi	r25, 0x01	; 1
    2c6e:	50 40       	sbci	r21, 0x00	; 0
    2c70:	e6 95       	lsr	r30
    2c72:	00 1c       	adc	r0, r0
    2c74:	ca f7       	brpl	.-14     	; 0x2c68 <__divsf3_pse+0x2c>
    2c76:	2b d0       	rcall	.+86     	; 0x2cce <__divsf3_pse+0x92>
    2c78:	fe 2f       	mov	r31, r30
    2c7a:	29 d0       	rcall	.+82     	; 0x2cce <__divsf3_pse+0x92>
    2c7c:	66 0f       	add	r22, r22
    2c7e:	77 1f       	adc	r23, r23
    2c80:	88 1f       	adc	r24, r24
    2c82:	bb 1f       	adc	r27, r27
    2c84:	26 17       	cp	r18, r22
    2c86:	37 07       	cpc	r19, r23
    2c88:	48 07       	cpc	r20, r24
    2c8a:	ab 07       	cpc	r26, r27
    2c8c:	b0 e8       	ldi	r27, 0x80	; 128
    2c8e:	09 f0       	breq	.+2      	; 0x2c92 <__divsf3_pse+0x56>
    2c90:	bb 0b       	sbc	r27, r27
    2c92:	80 2d       	mov	r24, r0
    2c94:	bf 01       	movw	r22, r30
    2c96:	ff 27       	eor	r31, r31
    2c98:	93 58       	subi	r25, 0x83	; 131
    2c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9c:	3a f0       	brmi	.+14     	; 0x2cac <__divsf3_pse+0x70>
    2c9e:	9e 3f       	cpi	r25, 0xFE	; 254
    2ca0:	51 05       	cpc	r21, r1
    2ca2:	78 f0       	brcs	.+30     	; 0x2cc2 <__divsf3_pse+0x86>
    2ca4:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__fp_inf>
    2ca8:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_szero>
    2cac:	5f 3f       	cpi	r21, 0xFF	; 255
    2cae:	e4 f3       	brlt	.-8      	; 0x2ca8 <__divsf3_pse+0x6c>
    2cb0:	98 3e       	cpi	r25, 0xE8	; 232
    2cb2:	d4 f3       	brlt	.-12     	; 0x2ca8 <__divsf3_pse+0x6c>
    2cb4:	86 95       	lsr	r24
    2cb6:	77 95       	ror	r23
    2cb8:	67 95       	ror	r22
    2cba:	b7 95       	ror	r27
    2cbc:	f7 95       	ror	r31
    2cbe:	9f 5f       	subi	r25, 0xFF	; 255
    2cc0:	c9 f7       	brne	.-14     	; 0x2cb4 <__divsf3_pse+0x78>
    2cc2:	88 0f       	add	r24, r24
    2cc4:	91 1d       	adc	r25, r1
    2cc6:	96 95       	lsr	r25
    2cc8:	87 95       	ror	r24
    2cca:	97 f9       	bld	r25, 7
    2ccc:	08 95       	ret
    2cce:	e1 e0       	ldi	r30, 0x01	; 1
    2cd0:	66 0f       	add	r22, r22
    2cd2:	77 1f       	adc	r23, r23
    2cd4:	88 1f       	adc	r24, r24
    2cd6:	bb 1f       	adc	r27, r27
    2cd8:	62 17       	cp	r22, r18
    2cda:	73 07       	cpc	r23, r19
    2cdc:	84 07       	cpc	r24, r20
    2cde:	ba 07       	cpc	r27, r26
    2ce0:	20 f0       	brcs	.+8      	; 0x2cea <__divsf3_pse+0xae>
    2ce2:	62 1b       	sub	r22, r18
    2ce4:	73 0b       	sbc	r23, r19
    2ce6:	84 0b       	sbc	r24, r20
    2ce8:	ba 0b       	sbc	r27, r26
    2cea:	ee 1f       	adc	r30, r30
    2cec:	88 f7       	brcc	.-30     	; 0x2cd0 <__divsf3_pse+0x94>
    2cee:	e0 95       	com	r30
    2cf0:	08 95       	ret

00002cf2 <__fixsfsi>:
    2cf2:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fixunssfsi>
    2cf6:	68 94       	set
    2cf8:	b1 11       	cpse	r27, r1
    2cfa:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_szero>
    2cfe:	08 95       	ret

00002d00 <__fixunssfsi>:
    2d00:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__fp_splitA>
    2d04:	88 f0       	brcs	.+34     	; 0x2d28 <__fixunssfsi+0x28>
    2d06:	9f 57       	subi	r25, 0x7F	; 127
    2d08:	98 f0       	brcs	.+38     	; 0x2d30 <__fixunssfsi+0x30>
    2d0a:	b9 2f       	mov	r27, r25
    2d0c:	99 27       	eor	r25, r25
    2d0e:	b7 51       	subi	r27, 0x17	; 23
    2d10:	b0 f0       	brcs	.+44     	; 0x2d3e <__fixunssfsi+0x3e>
    2d12:	e1 f0       	breq	.+56     	; 0x2d4c <__fixunssfsi+0x4c>
    2d14:	66 0f       	add	r22, r22
    2d16:	77 1f       	adc	r23, r23
    2d18:	88 1f       	adc	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	1a f0       	brmi	.+6      	; 0x2d24 <__fixunssfsi+0x24>
    2d1e:	ba 95       	dec	r27
    2d20:	c9 f7       	brne	.-14     	; 0x2d14 <__fixunssfsi+0x14>
    2d22:	14 c0       	rjmp	.+40     	; 0x2d4c <__fixunssfsi+0x4c>
    2d24:	b1 30       	cpi	r27, 0x01	; 1
    2d26:	91 f0       	breq	.+36     	; 0x2d4c <__fixunssfsi+0x4c>
    2d28:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__fp_zero>
    2d2c:	b1 e0       	ldi	r27, 0x01	; 1
    2d2e:	08 95       	ret
    2d30:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_zero>
    2d34:	67 2f       	mov	r22, r23
    2d36:	78 2f       	mov	r23, r24
    2d38:	88 27       	eor	r24, r24
    2d3a:	b8 5f       	subi	r27, 0xF8	; 248
    2d3c:	39 f0       	breq	.+14     	; 0x2d4c <__fixunssfsi+0x4c>
    2d3e:	b9 3f       	cpi	r27, 0xF9	; 249
    2d40:	cc f3       	brlt	.-14     	; 0x2d34 <__fixunssfsi+0x34>
    2d42:	86 95       	lsr	r24
    2d44:	77 95       	ror	r23
    2d46:	67 95       	ror	r22
    2d48:	b3 95       	inc	r27
    2d4a:	d9 f7       	brne	.-10     	; 0x2d42 <__fixunssfsi+0x42>
    2d4c:	3e f4       	brtc	.+14     	; 0x2d5c <__fixunssfsi+0x5c>
    2d4e:	90 95       	com	r25
    2d50:	80 95       	com	r24
    2d52:	70 95       	com	r23
    2d54:	61 95       	neg	r22
    2d56:	7f 4f       	sbci	r23, 0xFF	; 255
    2d58:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5c:	08 95       	ret

00002d5e <__floatunsisf>:
    2d5e:	e8 94       	clt
    2d60:	09 c0       	rjmp	.+18     	; 0x2d74 <__floatsisf+0x12>

00002d62 <__floatsisf>:
    2d62:	97 fb       	bst	r25, 7
    2d64:	3e f4       	brtc	.+14     	; 0x2d74 <__floatsisf+0x12>
    2d66:	90 95       	com	r25
    2d68:	80 95       	com	r24
    2d6a:	70 95       	com	r23
    2d6c:	61 95       	neg	r22
    2d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d70:	8f 4f       	sbci	r24, 0xFF	; 255
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    2d74:	99 23       	and	r25, r25
    2d76:	a9 f0       	breq	.+42     	; 0x2da2 <__floatsisf+0x40>
    2d78:	f9 2f       	mov	r31, r25
    2d7a:	96 e9       	ldi	r25, 0x96	; 150
    2d7c:	bb 27       	eor	r27, r27
    2d7e:	93 95       	inc	r25
    2d80:	f6 95       	lsr	r31
    2d82:	87 95       	ror	r24
    2d84:	77 95       	ror	r23
    2d86:	67 95       	ror	r22
    2d88:	b7 95       	ror	r27
    2d8a:	f1 11       	cpse	r31, r1
    2d8c:	f8 cf       	rjmp	.-16     	; 0x2d7e <__floatsisf+0x1c>
    2d8e:	fa f4       	brpl	.+62     	; 0x2dce <__floatsisf+0x6c>
    2d90:	bb 0f       	add	r27, r27
    2d92:	11 f4       	brne	.+4      	; 0x2d98 <__floatsisf+0x36>
    2d94:	60 ff       	sbrs	r22, 0
    2d96:	1b c0       	rjmp	.+54     	; 0x2dce <__floatsisf+0x6c>
    2d98:	6f 5f       	subi	r22, 0xFF	; 255
    2d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2da0:	16 c0       	rjmp	.+44     	; 0x2dce <__floatsisf+0x6c>
    2da2:	88 23       	and	r24, r24
    2da4:	11 f0       	breq	.+4      	; 0x2daa <__floatsisf+0x48>
    2da6:	96 e9       	ldi	r25, 0x96	; 150
    2da8:	11 c0       	rjmp	.+34     	; 0x2dcc <__floatsisf+0x6a>
    2daa:	77 23       	and	r23, r23
    2dac:	21 f0       	breq	.+8      	; 0x2db6 <__floatsisf+0x54>
    2dae:	9e e8       	ldi	r25, 0x8E	; 142
    2db0:	87 2f       	mov	r24, r23
    2db2:	76 2f       	mov	r23, r22
    2db4:	05 c0       	rjmp	.+10     	; 0x2dc0 <__floatsisf+0x5e>
    2db6:	66 23       	and	r22, r22
    2db8:	71 f0       	breq	.+28     	; 0x2dd6 <__floatsisf+0x74>
    2dba:	96 e8       	ldi	r25, 0x86	; 134
    2dbc:	86 2f       	mov	r24, r22
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	2a f0       	brmi	.+10     	; 0x2dce <__floatsisf+0x6c>
    2dc4:	9a 95       	dec	r25
    2dc6:	66 0f       	add	r22, r22
    2dc8:	77 1f       	adc	r23, r23
    2dca:	88 1f       	adc	r24, r24
    2dcc:	da f7       	brpl	.-10     	; 0x2dc4 <__floatsisf+0x62>
    2dce:	88 0f       	add	r24, r24
    2dd0:	96 95       	lsr	r25
    2dd2:	87 95       	ror	r24
    2dd4:	97 f9       	bld	r25, 7
    2dd6:	08 95       	ret

00002dd8 <__fp_cmp>:
    2dd8:	99 0f       	add	r25, r25
    2dda:	00 08       	sbc	r0, r0
    2ddc:	55 0f       	add	r21, r21
    2dde:	aa 0b       	sbc	r26, r26
    2de0:	e0 e8       	ldi	r30, 0x80	; 128
    2de2:	fe ef       	ldi	r31, 0xFE	; 254
    2de4:	16 16       	cp	r1, r22
    2de6:	17 06       	cpc	r1, r23
    2de8:	e8 07       	cpc	r30, r24
    2dea:	f9 07       	cpc	r31, r25
    2dec:	c0 f0       	brcs	.+48     	; 0x2e1e <__fp_cmp+0x46>
    2dee:	12 16       	cp	r1, r18
    2df0:	13 06       	cpc	r1, r19
    2df2:	e4 07       	cpc	r30, r20
    2df4:	f5 07       	cpc	r31, r21
    2df6:	98 f0       	brcs	.+38     	; 0x2e1e <__fp_cmp+0x46>
    2df8:	62 1b       	sub	r22, r18
    2dfa:	73 0b       	sbc	r23, r19
    2dfc:	84 0b       	sbc	r24, r20
    2dfe:	95 0b       	sbc	r25, r21
    2e00:	39 f4       	brne	.+14     	; 0x2e10 <__fp_cmp+0x38>
    2e02:	0a 26       	eor	r0, r26
    2e04:	61 f0       	breq	.+24     	; 0x2e1e <__fp_cmp+0x46>
    2e06:	23 2b       	or	r18, r19
    2e08:	24 2b       	or	r18, r20
    2e0a:	25 2b       	or	r18, r21
    2e0c:	21 f4       	brne	.+8      	; 0x2e16 <__fp_cmp+0x3e>
    2e0e:	08 95       	ret
    2e10:	0a 26       	eor	r0, r26
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <__fp_cmp+0x3e>
    2e14:	a1 40       	sbci	r26, 0x01	; 1
    2e16:	a6 95       	lsr	r26
    2e18:	8f ef       	ldi	r24, 0xFF	; 255
    2e1a:	81 1d       	adc	r24, r1
    2e1c:	81 1d       	adc	r24, r1
    2e1e:	08 95       	ret

00002e20 <__fp_inf>:
    2e20:	97 f9       	bld	r25, 7
    2e22:	9f 67       	ori	r25, 0x7F	; 127
    2e24:	80 e8       	ldi	r24, 0x80	; 128
    2e26:	70 e0       	ldi	r23, 0x00	; 0
    2e28:	60 e0       	ldi	r22, 0x00	; 0
    2e2a:	08 95       	ret

00002e2c <__fp_nan>:
    2e2c:	9f ef       	ldi	r25, 0xFF	; 255
    2e2e:	80 ec       	ldi	r24, 0xC0	; 192
    2e30:	08 95       	ret

00002e32 <__fp_pscA>:
    2e32:	00 24       	eor	r0, r0
    2e34:	0a 94       	dec	r0
    2e36:	16 16       	cp	r1, r22
    2e38:	17 06       	cpc	r1, r23
    2e3a:	18 06       	cpc	r1, r24
    2e3c:	09 06       	cpc	r0, r25
    2e3e:	08 95       	ret

00002e40 <__fp_pscB>:
    2e40:	00 24       	eor	r0, r0
    2e42:	0a 94       	dec	r0
    2e44:	12 16       	cp	r1, r18
    2e46:	13 06       	cpc	r1, r19
    2e48:	14 06       	cpc	r1, r20
    2e4a:	05 06       	cpc	r0, r21
    2e4c:	08 95       	ret

00002e4e <__fp_round>:
    2e4e:	09 2e       	mov	r0, r25
    2e50:	03 94       	inc	r0
    2e52:	00 0c       	add	r0, r0
    2e54:	11 f4       	brne	.+4      	; 0x2e5a <__fp_round+0xc>
    2e56:	88 23       	and	r24, r24
    2e58:	52 f0       	brmi	.+20     	; 0x2e6e <__fp_round+0x20>
    2e5a:	bb 0f       	add	r27, r27
    2e5c:	40 f4       	brcc	.+16     	; 0x2e6e <__fp_round+0x20>
    2e5e:	bf 2b       	or	r27, r31
    2e60:	11 f4       	brne	.+4      	; 0x2e66 <__fp_round+0x18>
    2e62:	60 ff       	sbrs	r22, 0
    2e64:	04 c0       	rjmp	.+8      	; 0x2e6e <__fp_round+0x20>
    2e66:	6f 5f       	subi	r22, 0xFF	; 255
    2e68:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6e:	08 95       	ret

00002e70 <__fp_split3>:
    2e70:	57 fd       	sbrc	r21, 7
    2e72:	90 58       	subi	r25, 0x80	; 128
    2e74:	44 0f       	add	r20, r20
    2e76:	55 1f       	adc	r21, r21
    2e78:	59 f0       	breq	.+22     	; 0x2e90 <__fp_splitA+0x10>
    2e7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e7c:	71 f0       	breq	.+28     	; 0x2e9a <__fp_splitA+0x1a>
    2e7e:	47 95       	ror	r20

00002e80 <__fp_splitA>:
    2e80:	88 0f       	add	r24, r24
    2e82:	97 fb       	bst	r25, 7
    2e84:	99 1f       	adc	r25, r25
    2e86:	61 f0       	breq	.+24     	; 0x2ea0 <__fp_splitA+0x20>
    2e88:	9f 3f       	cpi	r25, 0xFF	; 255
    2e8a:	79 f0       	breq	.+30     	; 0x2eaa <__fp_splitA+0x2a>
    2e8c:	87 95       	ror	r24
    2e8e:	08 95       	ret
    2e90:	12 16       	cp	r1, r18
    2e92:	13 06       	cpc	r1, r19
    2e94:	14 06       	cpc	r1, r20
    2e96:	55 1f       	adc	r21, r21
    2e98:	f2 cf       	rjmp	.-28     	; 0x2e7e <__fp_split3+0xe>
    2e9a:	46 95       	lsr	r20
    2e9c:	f1 df       	rcall	.-30     	; 0x2e80 <__fp_splitA>
    2e9e:	08 c0       	rjmp	.+16     	; 0x2eb0 <__fp_splitA+0x30>
    2ea0:	16 16       	cp	r1, r22
    2ea2:	17 06       	cpc	r1, r23
    2ea4:	18 06       	cpc	r1, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	f1 cf       	rjmp	.-30     	; 0x2e8c <__fp_splitA+0xc>
    2eaa:	86 95       	lsr	r24
    2eac:	71 05       	cpc	r23, r1
    2eae:	61 05       	cpc	r22, r1
    2eb0:	08 94       	sec
    2eb2:	08 95       	ret

00002eb4 <__fp_zero>:
    2eb4:	e8 94       	clt

00002eb6 <__fp_szero>:
    2eb6:	bb 27       	eor	r27, r27
    2eb8:	66 27       	eor	r22, r22
    2eba:	77 27       	eor	r23, r23
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	97 f9       	bld	r25, 7
    2ec0:	08 95       	ret

00002ec2 <__gesf2>:
    2ec2:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__fp_cmp>
    2ec6:	08 f4       	brcc	.+2      	; 0x2eca <__gesf2+0x8>
    2ec8:	8f ef       	ldi	r24, 0xFF	; 255
    2eca:	08 95       	ret

00002ecc <__mulsf3>:
    2ecc:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__mulsf3x>
    2ed0:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__fp_round>
    2ed4:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__fp_pscA>
    2ed8:	38 f0       	brcs	.+14     	; 0x2ee8 <__mulsf3+0x1c>
    2eda:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__fp_pscB>
    2ede:	20 f0       	brcs	.+8      	; 0x2ee8 <__mulsf3+0x1c>
    2ee0:	95 23       	and	r25, r21
    2ee2:	11 f0       	breq	.+4      	; 0x2ee8 <__mulsf3+0x1c>
    2ee4:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__fp_inf>
    2ee8:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__fp_nan>
    2eec:	11 24       	eor	r1, r1
    2eee:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_szero>

00002ef2 <__mulsf3x>:
    2ef2:	0e 94 38 17 	call	0x2e70	; 0x2e70 <__fp_split3>
    2ef6:	70 f3       	brcs	.-36     	; 0x2ed4 <__mulsf3+0x8>

00002ef8 <__mulsf3_pse>:
    2ef8:	95 9f       	mul	r25, r21
    2efa:	c1 f3       	breq	.-16     	; 0x2eec <__mulsf3+0x20>
    2efc:	95 0f       	add	r25, r21
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	55 1f       	adc	r21, r21
    2f02:	62 9f       	mul	r22, r18
    2f04:	f0 01       	movw	r30, r0
    2f06:	72 9f       	mul	r23, r18
    2f08:	bb 27       	eor	r27, r27
    2f0a:	f0 0d       	add	r31, r0
    2f0c:	b1 1d       	adc	r27, r1
    2f0e:	63 9f       	mul	r22, r19
    2f10:	aa 27       	eor	r26, r26
    2f12:	f0 0d       	add	r31, r0
    2f14:	b1 1d       	adc	r27, r1
    2f16:	aa 1f       	adc	r26, r26
    2f18:	64 9f       	mul	r22, r20
    2f1a:	66 27       	eor	r22, r22
    2f1c:	b0 0d       	add	r27, r0
    2f1e:	a1 1d       	adc	r26, r1
    2f20:	66 1f       	adc	r22, r22
    2f22:	82 9f       	mul	r24, r18
    2f24:	22 27       	eor	r18, r18
    2f26:	b0 0d       	add	r27, r0
    2f28:	a1 1d       	adc	r26, r1
    2f2a:	62 1f       	adc	r22, r18
    2f2c:	73 9f       	mul	r23, r19
    2f2e:	b0 0d       	add	r27, r0
    2f30:	a1 1d       	adc	r26, r1
    2f32:	62 1f       	adc	r22, r18
    2f34:	83 9f       	mul	r24, r19
    2f36:	a0 0d       	add	r26, r0
    2f38:	61 1d       	adc	r22, r1
    2f3a:	22 1f       	adc	r18, r18
    2f3c:	74 9f       	mul	r23, r20
    2f3e:	33 27       	eor	r19, r19
    2f40:	a0 0d       	add	r26, r0
    2f42:	61 1d       	adc	r22, r1
    2f44:	23 1f       	adc	r18, r19
    2f46:	84 9f       	mul	r24, r20
    2f48:	60 0d       	add	r22, r0
    2f4a:	21 1d       	adc	r18, r1
    2f4c:	82 2f       	mov	r24, r18
    2f4e:	76 2f       	mov	r23, r22
    2f50:	6a 2f       	mov	r22, r26
    2f52:	11 24       	eor	r1, r1
    2f54:	9f 57       	subi	r25, 0x7F	; 127
    2f56:	50 40       	sbci	r21, 0x00	; 0
    2f58:	9a f0       	brmi	.+38     	; 0x2f80 <__mulsf3_pse+0x88>
    2f5a:	f1 f0       	breq	.+60     	; 0x2f98 <__mulsf3_pse+0xa0>
    2f5c:	88 23       	and	r24, r24
    2f5e:	4a f0       	brmi	.+18     	; 0x2f72 <__mulsf3_pse+0x7a>
    2f60:	ee 0f       	add	r30, r30
    2f62:	ff 1f       	adc	r31, r31
    2f64:	bb 1f       	adc	r27, r27
    2f66:	66 1f       	adc	r22, r22
    2f68:	77 1f       	adc	r23, r23
    2f6a:	88 1f       	adc	r24, r24
    2f6c:	91 50       	subi	r25, 0x01	; 1
    2f6e:	50 40       	sbci	r21, 0x00	; 0
    2f70:	a9 f7       	brne	.-22     	; 0x2f5c <__mulsf3_pse+0x64>
    2f72:	9e 3f       	cpi	r25, 0xFE	; 254
    2f74:	51 05       	cpc	r21, r1
    2f76:	80 f0       	brcs	.+32     	; 0x2f98 <__mulsf3_pse+0xa0>
    2f78:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__fp_inf>
    2f7c:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__fp_szero>
    2f80:	5f 3f       	cpi	r21, 0xFF	; 255
    2f82:	e4 f3       	brlt	.-8      	; 0x2f7c <__mulsf3_pse+0x84>
    2f84:	98 3e       	cpi	r25, 0xE8	; 232
    2f86:	d4 f3       	brlt	.-12     	; 0x2f7c <__mulsf3_pse+0x84>
    2f88:	86 95       	lsr	r24
    2f8a:	77 95       	ror	r23
    2f8c:	67 95       	ror	r22
    2f8e:	b7 95       	ror	r27
    2f90:	f7 95       	ror	r31
    2f92:	e7 95       	ror	r30
    2f94:	9f 5f       	subi	r25, 0xFF	; 255
    2f96:	c1 f7       	brne	.-16     	; 0x2f88 <__mulsf3_pse+0x90>
    2f98:	fe 2b       	or	r31, r30
    2f9a:	88 0f       	add	r24, r24
    2f9c:	91 1d       	adc	r25, r1
    2f9e:	96 95       	lsr	r25
    2fa0:	87 95       	ror	r24
    2fa2:	97 f9       	bld	r25, 7
    2fa4:	08 95       	ret

00002fa6 <__divmodhi4>:
    2fa6:	97 fb       	bst	r25, 7
    2fa8:	07 2e       	mov	r0, r23
    2faa:	16 f4       	brtc	.+4      	; 0x2fb0 <__divmodhi4+0xa>
    2fac:	00 94       	com	r0
    2fae:	07 d0       	rcall	.+14     	; 0x2fbe <__divmodhi4_neg1>
    2fb0:	77 fd       	sbrc	r23, 7
    2fb2:	09 d0       	rcall	.+18     	; 0x2fc6 <__divmodhi4_neg2>
    2fb4:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__udivmodhi4>
    2fb8:	07 fc       	sbrc	r0, 7
    2fba:	05 d0       	rcall	.+10     	; 0x2fc6 <__divmodhi4_neg2>
    2fbc:	3e f4       	brtc	.+14     	; 0x2fcc <__divmodhi4_exit>

00002fbe <__divmodhi4_neg1>:
    2fbe:	90 95       	com	r25
    2fc0:	81 95       	neg	r24
    2fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc4:	08 95       	ret

00002fc6 <__divmodhi4_neg2>:
    2fc6:	70 95       	com	r23
    2fc8:	61 95       	neg	r22
    2fca:	7f 4f       	sbci	r23, 0xFF	; 255

00002fcc <__divmodhi4_exit>:
    2fcc:	08 95       	ret

00002fce <__udivmodhi4>:
    2fce:	aa 1b       	sub	r26, r26
    2fd0:	bb 1b       	sub	r27, r27
    2fd2:	51 e1       	ldi	r21, 0x11	; 17
    2fd4:	07 c0       	rjmp	.+14     	; 0x2fe4 <__udivmodhi4_ep>

00002fd6 <__udivmodhi4_loop>:
    2fd6:	aa 1f       	adc	r26, r26
    2fd8:	bb 1f       	adc	r27, r27
    2fda:	a6 17       	cp	r26, r22
    2fdc:	b7 07       	cpc	r27, r23
    2fde:	10 f0       	brcs	.+4      	; 0x2fe4 <__udivmodhi4_ep>
    2fe0:	a6 1b       	sub	r26, r22
    2fe2:	b7 0b       	sbc	r27, r23

00002fe4 <__udivmodhi4_ep>:
    2fe4:	88 1f       	adc	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	5a 95       	dec	r21
    2fea:	a9 f7       	brne	.-22     	; 0x2fd6 <__udivmodhi4_loop>
    2fec:	80 95       	com	r24
    2fee:	90 95       	com	r25
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	08 95       	ret

00002ff6 <__itoa_ncheck>:
    2ff6:	bb 27       	eor	r27, r27
    2ff8:	4a 30       	cpi	r20, 0x0A	; 10
    2ffa:	31 f4       	brne	.+12     	; 0x3008 <__itoa_ncheck+0x12>
    2ffc:	99 23       	and	r25, r25
    2ffe:	22 f4       	brpl	.+8      	; 0x3008 <__itoa_ncheck+0x12>
    3000:	bd e2       	ldi	r27, 0x2D	; 45
    3002:	90 95       	com	r25
    3004:	81 95       	neg	r24
    3006:	9f 4f       	sbci	r25, 0xFF	; 255
    3008:	0c 94 07 18 	jmp	0x300e	; 0x300e <__utoa_common>

0000300c <__utoa_ncheck>:
    300c:	bb 27       	eor	r27, r27

0000300e <__utoa_common>:
    300e:	fb 01       	movw	r30, r22
    3010:	55 27       	eor	r21, r21
    3012:	aa 27       	eor	r26, r26
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	aa 1f       	adc	r26, r26
    301a:	a4 17       	cp	r26, r20
    301c:	10 f0       	brcs	.+4      	; 0x3022 <__utoa_common+0x14>
    301e:	a4 1b       	sub	r26, r20
    3020:	83 95       	inc	r24
    3022:	50 51       	subi	r21, 0x10	; 16
    3024:	b9 f7       	brne	.-18     	; 0x3014 <__utoa_common+0x6>
    3026:	a0 5d       	subi	r26, 0xD0	; 208
    3028:	aa 33       	cpi	r26, 0x3A	; 58
    302a:	08 f0       	brcs	.+2      	; 0x302e <__utoa_common+0x20>
    302c:	a9 5d       	subi	r26, 0xD9	; 217
    302e:	a1 93       	st	Z+, r26
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	79 f7       	brne	.-34     	; 0x3012 <__utoa_common+0x4>
    3034:	b1 11       	cpse	r27, r1
    3036:	b1 93       	st	Z+, r27
    3038:	11 92       	st	Z+, r1
    303a:	cb 01       	movw	r24, r22
    303c:	0c 94 20 18 	jmp	0x3040	; 0x3040 <strrev>

00003040 <strrev>:
    3040:	dc 01       	movw	r26, r24
    3042:	fc 01       	movw	r30, r24
    3044:	67 2f       	mov	r22, r23
    3046:	71 91       	ld	r23, Z+
    3048:	77 23       	and	r23, r23
    304a:	e1 f7       	brne	.-8      	; 0x3044 <strrev+0x4>
    304c:	32 97       	sbiw	r30, 0x02	; 2
    304e:	04 c0       	rjmp	.+8      	; 0x3058 <strrev+0x18>
    3050:	7c 91       	ld	r23, X
    3052:	6d 93       	st	X+, r22
    3054:	70 83       	st	Z, r23
    3056:	62 91       	ld	r22, -Z
    3058:	ae 17       	cp	r26, r30
    305a:	bf 07       	cpc	r27, r31
    305c:	c8 f3       	brcs	.-14     	; 0x3050 <strrev+0x10>
    305e:	08 95       	ret

00003060 <_exit>:
    3060:	f8 94       	cli

00003062 <__stop_program>:
    3062:	ff cf       	rjmp	.-2      	; 0x3062 <__stop_program>
