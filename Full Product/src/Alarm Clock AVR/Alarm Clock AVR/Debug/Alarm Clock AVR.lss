
Alarm Clock AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000c88  00000d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800182  00800182  00000d9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002774  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001091  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010b1  00000000  00000000  000047dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00005890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a36  00000000  00000000  00005ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a8  00000000  00000000  0000671a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 38       	cpi	r26, 0x82	; 130
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e8       	ldi	r26, 0x82	; 130
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 3a       	cpi	r26, 0xAF	; 175
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 05 	call	0xb02	; 0xb02 <main>
  9e:	0c 94 42 06 	jmp	0xc84	; 0xc84 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z7powerOfii>:
		return true;
	}
	else{
		return false;
	}
}
  a6:	9c 01       	movw	r18, r24
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	61 15       	cp	r22, r1
  ae:	71 05       	cpc	r23, r1
  b0:	59 f0       	breq	.+22     	; 0xc8 <_Z7powerOfii+0x22>
  b2:	ac 01       	movw	r20, r24
  b4:	42 9f       	mul	r20, r18
  b6:	c0 01       	movw	r24, r0
  b8:	43 9f       	mul	r20, r19
  ba:	90 0d       	add	r25, r0
  bc:	52 9f       	mul	r21, r18
  be:	90 0d       	add	r25, r0
  c0:	11 24       	eor	r1, r1
  c2:	61 50       	subi	r22, 0x01	; 1
  c4:	71 09       	sbc	r23, r1
  c6:	f2 cf       	rjmp	.-28     	; 0xac <_Z7powerOfii+0x6>
  c8:	08 95       	ret

000000ca <_Z9ringAlarmv>:
void ringAlarm(){
	LCD_Clear();
  ca:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z9LCD_Clearv>
	LCD_String("RING!!");
  ce:	87 e5       	ldi	r24, 0x57	; 87
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	8a e1       	ldi	r24, 0x1A	; 26
  da:	96 e0       	ldi	r25, 0x06	; 6
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <_Z9ringAlarmv+0x12>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_Z9ringAlarmv+0x1c>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <_Z8setAlarmi>:
	_delay_ms(2000);
}
void setAlarm(int alarm_time){
	if (alarm_time<2400){
  ea:	80 36       	cpi	r24, 0x60	; 96
  ec:	29 e0       	ldi	r18, 0x09	; 9
  ee:	92 07       	cpc	r25, r18
  f0:	8c f4       	brge	.+34     	; 0x114 <_Z8setAlarmi+0x2a>
		alarmArray[numberOfAlarms] = alarm_time;
  f2:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <numberOfAlarms>
  f6:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <numberOfAlarms+0x1>
  fa:	f9 01       	movw	r30, r18
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	e7 57       	subi	r30, 0x77	; 119
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	91 83       	std	Z+1, r25	; 0x01
 106:	80 83       	st	Z, r24
		numberOfAlarms++;
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	30 93 9e 01 	sts	0x019E, r19	; 0x80019e <numberOfAlarms+0x1>
 110:	20 93 9d 01 	sts	0x019D, r18	; 0x80019d <numberOfAlarms>
 114:	08 95       	ret

00000116 <_Z16updateAlarmArrayi>:
	}
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <numberOfAlarms>
 11e:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <numberOfAlarms+0x1>
 122:	24 17       	cp	r18, r20
 124:	35 07       	cpc	r19, r21
 126:	ac f4       	brge	.+42     	; 0x152 <_Z16updateAlarmArrayi+0x3c>
		if (i<removeAlarm){
 128:	28 17       	cp	r18, r24
 12a:	39 07       	cpc	r19, r25
 12c:	7c f0       	brlt	.+30     	; 0x14c <_Z16updateAlarmArrayi+0x36>
			alarmArray[i] = alarmArray[i];
		}
		else{
			alarmArray[i] = alarmArray[i+1];
 12e:	f9 01       	movw	r30, r18
 130:	31 96       	adiw	r30, 0x01	; 1
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	e7 57       	subi	r30, 0x77	; 119
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	40 81       	ld	r20, Z
 13c:	51 81       	ldd	r21, Z+1	; 0x01
 13e:	f9 01       	movw	r30, r18
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	e7 57       	subi	r30, 0x77	; 119
 146:	fe 4f       	sbci	r31, 0xFE	; 254
 148:	51 83       	std	Z+1, r21	; 0x01
 14a:	40 83       	st	Z, r20
		alarmArray[numberOfAlarms] = alarm_time;
		numberOfAlarms++;
	}
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
 14c:	2f 5f       	subi	r18, 0xFF	; 255
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
 150:	e4 cf       	rjmp	.-56     	; 0x11a <_Z16updateAlarmArrayi+0x4>
 152:	08 95       	ret

00000154 <_Z10checkAlarmv>:
		else{
			alarmArray[i] = alarmArray[i+1];
		}
	}
}
void checkAlarm(){
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
	if (numberOfAlarms != 0){
 164:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <numberOfAlarms>
 168:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <numberOfAlarms+0x1>
 16c:	89 2b       	or	r24, r25
 16e:	09 f4       	brne	.+2      	; 0x172 <_Z10checkAlarmv+0x1e>
 170:	4e c0       	rjmp	.+156    	; 0x20e <_Z10checkAlarmv+0xba>
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
 172:	0f 2e       	mov	r0, r31
 174:	f2 e8       	ldi	r31, 0x82	; 130
 176:	cf 2e       	mov	r12, r31
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	df 2e       	mov	r13, r31
 17c:	f0 2d       	mov	r31, r0
 17e:	0f 2e       	mov	r0, r31
 180:	f3 e8       	ldi	r31, 0x83	; 131
 182:	ef 2e       	mov	r14, r31
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	ff 2e       	mov	r15, r31
 188:	f0 2d       	mov	r31, r0
 18a:	04 e8       	ldi	r16, 0x84	; 132
 18c:	11 e0       	ldi	r17, 0x01	; 1
 18e:	25 e8       	ldi	r18, 0x85	; 133
 190:	31 e0       	ldi	r19, 0x01	; 1
 192:	46 e8       	ldi	r20, 0x86	; 134
 194:	51 e0       	ldi	r21, 0x01	; 1
 196:	67 e8       	ldi	r22, 0x87	; 135
 198:	71 e0       	ldi	r23, 0x01	; 1
 19a:	88 e8       	ldi	r24, 0x88	; 136
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
		for (int i = 0; i <= numberOfAlarms;i++){
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <numberOfAlarms>
 1aa:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <numberOfAlarms+0x1>
 1ae:	8c 17       	cp	r24, r28
 1b0:	9d 07       	cpc	r25, r29
 1b2:	6c f1       	brlt	.+90     	; 0x20e <_Z10checkAlarmv+0xba>
			if (alarmArray[i]/100 == hour && alarmArray[i]%100 == minute){
 1b4:	fe 01       	movw	r30, r28
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	e7 57       	subi	r30, 0x77	; 119
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	20 81       	ld	r18, Z
 1c0:	31 81       	ldd	r19, Z+1	; 0x01
 1c2:	c9 01       	movw	r24, r18
 1c4:	64 e6       	ldi	r22, 0x64	; 100
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	0e 94 e5 05 	call	0xbca	; 0xbca <__divmodhi4>
 1cc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <hour>
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	68 17       	cp	r22, r24
 1d4:	79 07       	cpc	r23, r25
 1d6:	c9 f4       	brne	.+50     	; 0x20a <_Z10checkAlarmv+0xb6>
 1d8:	c9 01       	movw	r24, r18
 1da:	64 e6       	ldi	r22, 0x64	; 100
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	0e 94 e5 05 	call	0xbca	; 0xbca <__divmodhi4>
 1e2:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <minute>
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	82 17       	cp	r24, r18
 1ea:	93 07       	cpc	r25, r19
 1ec:	71 f4       	brne	.+28     	; 0x20a <_Z10checkAlarmv+0xb6>
				ringAlarm();
 1ee:	0e 94 65 00 	call	0xca	; 0xca <_Z9ringAlarmv>
				updateAlarmArray(i);
 1f2:	ce 01       	movw	r24, r28
 1f4:	0e 94 8b 00 	call	0x116	; 0x116 <_Z16updateAlarmArrayi>
				numberOfAlarms--;
 1f8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <numberOfAlarms>
 1fc:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <numberOfAlarms+0x1>
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <numberOfAlarms+0x1>
 206:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <numberOfAlarms>
	}
}
void checkAlarm(){
	if (numberOfAlarms != 0){
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
		for (int i = 0; i <= numberOfAlarms;i++){
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	cc cf       	rjmp	.-104    	; 0x1a6 <_Z10checkAlarmv+0x52>
				numberOfAlarms--;
			}
		}
		
	}
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	df 90       	pop	r13
 21c:	cf 90       	pop	r12
 21e:	08 95       	ret

00000220 <_Z6getDayiii>:
	int s = clockTime[5];
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
	int days = 0;
	for (int i = 1;i<=y;i++){
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
 22a:	e0 e0       	ldi	r30, 0x00	; 0
 22c:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 1;i<=y;i++){
 22e:	c2 17       	cp	r28, r18
 230:	d3 07       	cpc	r29, r19
 232:	6c f0       	brlt	.+26     	; 0x24e <_Z6getDayiii+0x2e>
		if (i%4 == 0){
 234:	c9 01       	movw	r24, r18
 236:	83 70       	andi	r24, 0x03	; 3
 238:	99 27       	eor	r25, r25
 23a:	89 2b       	or	r24, r25
 23c:	19 f4       	brne	.+6      	; 0x244 <_Z6getDayiii+0x24>
			days+= 366;
 23e:	e2 59       	subi	r30, 0x92	; 146
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	02 c0       	rjmp	.+4      	; 0x248 <_Z6getDayiii+0x28>
		}
		else{
			days+= 365;
 244:	e3 59       	subi	r30, 0x93	; 147
 246:	fe 4f       	sbci	r31, 0xFE	; 254
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
	for (int i = 1;i<=y;i++){
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	3f 4f       	sbci	r19, 0xFF	; 255
 24c:	f0 cf       	rjmp	.-32     	; 0x22e <_Z6getDayiii+0xe>
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
 252:	db 01       	movw	r26, r22
 254:	11 97       	sbiw	r26, 0x01	; 1
 256:	2a 17       	cp	r18, r26
 258:	3b 07       	cpc	r19, r27
 25a:	3c f5       	brge	.+78     	; 0x2aa <_Z6getDayiii+0x8a>
		if ((y%4==0) & (j == 1)){
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	de 01       	movw	r26, r28
 260:	a3 70       	andi	r26, 0x03	; 3
 262:	bb 27       	eor	r27, r27
 264:	ab 2b       	or	r26, r27
 266:	09 f0       	breq	.+2      	; 0x26a <_Z6getDayiii+0x4a>
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	99 23       	and	r25, r25
 26c:	91 f0       	breq	.+36     	; 0x292 <_Z6getDayiii+0x72>
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	21 30       	cpi	r18, 0x01	; 1
 272:	31 05       	cpc	r19, r1
 274:	09 f0       	breq	.+2      	; 0x278 <_Z6getDayiii+0x58>
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	99 23       	and	r25, r25
 27a:	59 f0       	breq	.+22     	; 0x292 <_Z6getDayiii+0x72>
			days+=monthsDays[j];
 27c:	d9 01       	movw	r26, r18
 27e:	aa 0f       	add	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	a0 50       	subi	r26, 0x00	; 0
 284:	bf 4f       	sbci	r27, 0xFF	; 255
 286:	8d 91       	ld	r24, X+
 288:	9c 91       	ld	r25, X
 28a:	e8 0f       	add	r30, r24
 28c:	f9 1f       	adc	r31, r25
			days+=1;
 28e:	31 96       	adiw	r30, 0x01	; 1
 290:	09 c0       	rjmp	.+18     	; 0x2a4 <_Z6getDayiii+0x84>
		}
		else{
			days +=monthsDays[j];
 292:	d9 01       	movw	r26, r18
 294:	aa 0f       	add	r26, r26
 296:	bb 1f       	adc	r27, r27
 298:	a0 50       	subi	r26, 0x00	; 0
 29a:	bf 4f       	sbci	r27, 0xFF	; 255
 29c:	8d 91       	ld	r24, X+
 29e:	9c 91       	ld	r25, X
 2a0:	e8 0f       	add	r30, r24
 2a2:	f9 1f       	adc	r31, r25
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
 2a4:	2f 5f       	subi	r18, 0xFF	; 255
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	d4 cf       	rjmp	.-88     	; 0x252 <_Z6getDayiii+0x32>
		}
		else{
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
 2aa:	4e 0f       	add	r20, r30
 2ac:	5f 1f       	adc	r21, r31
 2ae:	ca 01       	movw	r24, r20
 2b0:	05 96       	adiw	r24, 0x05	; 5
 2b2:	67 e0       	ldi	r22, 0x07	; 7
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	0e 94 e5 05 	call	0xbca	; 0xbca <__divmodhi4>
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <_Z12setClockTimePi>:
			}
		}
		
	}
}
void setClockTime(int clockTime[6]){
 2c0:	6f 92       	push	r6
 2c2:	7f 92       	push	r7
 2c4:	8f 92       	push	r8
 2c6:	9f 92       	push	r9
 2c8:	af 92       	push	r10
 2ca:	bf 92       	push	r11
 2cc:	cf 92       	push	r12
 2ce:	df 92       	push	r13
 2d0:	ef 92       	push	r14
 2d2:	ff 92       	push	r15
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	ec 01       	movw	r28, r24
	int y = clockTime[0];
 2de:	88 80       	ld	r8, Y
 2e0:	99 80       	ldd	r9, Y+1	; 0x01
	int m = clockTime[1];
 2e2:	aa 80       	ldd	r10, Y+2	; 0x02
 2e4:	bb 80       	ldd	r11, Y+3	; 0x03
	int d = clockTime[2];
 2e6:	6c 80       	ldd	r6, Y+4	; 0x04
 2e8:	7d 80       	ldd	r7, Y+5	; 0x05
	int D = getDay(y,m,d);
 2ea:	a3 01       	movw	r20, r6
 2ec:	b5 01       	movw	r22, r10
 2ee:	c4 01       	movw	r24, r8
 2f0:	0e 94 10 01 	call	0x220	; 0x220 <_Z6getDayiii>
	int h = clockTime[3];
 2f4:	0e 81       	ldd	r16, Y+6	; 0x06
 2f6:	1f 81       	ldd	r17, Y+7	; 0x07
	int M = clockTime[4];
 2f8:	e8 84       	ldd	r14, Y+8	; 0x08
 2fa:	f9 84       	ldd	r15, Y+9	; 0x09
	int s = clockTime[5];
 2fc:	ca 84       	ldd	r12, Y+10	; 0x0a
 2fe:	db 84       	ldd	r13, Y+11	; 0x0b
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
 300:	94 01       	movw	r18, r8
 302:	21 50       	subi	r18, 0x01	; 1
 304:	31 09       	sbc	r19, r1
 306:	c1 e0       	ldi	r28, 0x01	; 1
 308:	22 36       	cpi	r18, 0x62	; 98
 30a:	31 05       	cpc	r19, r1
 30c:	08 f0       	brcs	.+2      	; 0x310 <_Z12setClockTimePi+0x50>
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	1a 14       	cp	r1, r10
 314:	1b 04       	cpc	r1, r11
 316:	0c f0       	brlt	.+2      	; 0x31a <_Z12setClockTimePi+0x5a>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	9d e0       	ldi	r25, 0x0D	; 13
 31e:	a9 16       	cp	r10, r25
 320:	b1 04       	cpc	r11, r1
 322:	0c f0       	brlt	.+2      	; 0x326 <_Z12setClockTimePi+0x66>
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	71 e0       	ldi	r23, 0x01	; 1
 328:	16 14       	cp	r1, r6
 32a:	17 04       	cpc	r1, r7
 32c:	0c f0       	brlt	.+2      	; 0x330 <_Z12setClockTimePi+0x70>
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	51 e0       	ldi	r21, 0x01	; 1
 332:	90 e2       	ldi	r25, 0x20	; 32
 334:	69 16       	cp	r6, r25
 336:	71 04       	cpc	r7, r1
 338:	0c f0       	brlt	.+2      	; 0x33c <_Z12setClockTimePi+0x7c>
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	31 2f       	mov	r19, r17
 33e:	30 95       	com	r19
 340:	33 1f       	adc	r19, r19
 342:	33 27       	eor	r19, r19
 344:	33 1f       	adc	r19, r19
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	08 31       	cpi	r16, 0x18	; 24
 34a:	11 05       	cpc	r17, r1
 34c:	0c f0       	brlt	.+2      	; 0x350 <_Z12setClockTimePi+0x90>
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	af 2d       	mov	r26, r15
 352:	a0 95       	com	r26
 354:	aa 1f       	adc	r26, r26
 356:	aa 27       	eor	r26, r26
 358:	aa 1f       	adc	r26, r26
 35a:	b1 e0       	ldi	r27, 0x01	; 1
 35c:	9c e3       	ldi	r25, 0x3C	; 60
 35e:	e9 16       	cp	r14, r25
 360:	f1 04       	cpc	r15, r1
 362:	0c f0       	brlt	.+2      	; 0x366 <_Z12setClockTimePi+0xa6>
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	9d 2d       	mov	r25, r13
 368:	90 95       	com	r25
 36a:	e9 2f       	mov	r30, r25
 36c:	ee 1f       	adc	r30, r30
 36e:	ee 27       	eor	r30, r30
 370:	ee 1f       	adc	r30, r30
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	9c e3       	ldi	r25, 0x3C	; 60
 376:	c9 16       	cp	r12, r25
 378:	d1 04       	cpc	r13, r1
 37a:	0c f0       	brlt	.+2      	; 0x37e <_Z12setClockTimePi+0xbe>
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	2c 23       	and	r18, r28
 380:	62 23       	and	r22, r18
 382:	67 23       	and	r22, r23
 384:	56 23       	and	r21, r22
 386:	95 2f       	mov	r25, r21
 388:	93 23       	and	r25, r19
 38a:	49 23       	and	r20, r25
 38c:	4a 23       	and	r20, r26
 38e:	94 2f       	mov	r25, r20
 390:	9b 23       	and	r25, r27
 392:	9e 23       	and	r25, r30
 394:	41 f0       	breq	.+16     	; 0x3a6 <_Z12setClockTimePi+0xe6>
 396:	ff 23       	and	r31, r31
 398:	31 f0       	breq	.+12     	; 0x3a6 <_Z12setClockTimePi+0xe6>
		ds1307_setdate(y, m, d, D, h, M, s);
 39a:	28 2f       	mov	r18, r24
 39c:	46 2d       	mov	r20, r6
 39e:	6a 2d       	mov	r22, r10
 3a0:	88 2d       	mov	r24, r8
 3a2:	0e 94 29 04 	call	0x852	; 0x852 <_Z14ds1307_setdatehhhhhhh>
	}
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	df 90       	pop	r13
 3b4:	cf 90       	pop	r12
 3b6:	bf 90       	pop	r11
 3b8:	af 90       	pop	r10
 3ba:	9f 90       	pop	r9
 3bc:	8f 90       	pop	r8
 3be:	7f 90       	pop	r7
 3c0:	6f 90       	pop	r6
 3c2:	08 95       	ret

000003c4 <_Z11displayTimev>:
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
}
void displayTime(){
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	6e 97       	sbiw	r28, 0x1e	; 30
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
	ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
 3e4:	0f 2e       	mov	r0, r31
 3e6:	f2 e8       	ldi	r31, 0x82	; 130
 3e8:	cf 2e       	mov	r12, r31
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	df 2e       	mov	r13, r31
 3ee:	f0 2d       	mov	r31, r0
 3f0:	0f 2e       	mov	r0, r31
 3f2:	f3 e8       	ldi	r31, 0x83	; 131
 3f4:	ef 2e       	mov	r14, r31
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	ff 2e       	mov	r15, r31
 3fa:	f0 2d       	mov	r31, r0
 3fc:	04 e8       	ldi	r16, 0x84	; 132
 3fe:	11 e0       	ldi	r17, 0x01	; 1
 400:	25 e8       	ldi	r18, 0x85	; 133
 402:	31 e0       	ldi	r19, 0x01	; 1
 404:	46 e8       	ldi	r20, 0x86	; 134
 406:	51 e0       	ldi	r21, 0x01	; 1
 408:	67 e8       	ldi	r22, 0x87	; 135
 40a:	71 e0       	ldi	r23, 0x01	; 1
 40c:	88 e8       	ldi	r24, 0x88	; 136
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
	char secondS[10];char minuteS[10];char hourS[10];
	itoa(second,secondS,10);itoa(minute,minuteS,10);itoa(hour,hourS,10);
 414:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 418:	4a e0       	ldi	r20, 0x0A	; 10
 41a:	be 01       	movw	r22, r28
 41c:	6f 5f       	subi	r22, 0xFF	; 255
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
 426:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <minute>
 42a:	4a e0       	ldi	r20, 0x0A	; 10
 42c:	be 01       	movw	r22, r28
 42e:	65 5f       	subi	r22, 0xF5	; 245
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
 438:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <hour>
 43c:	4a e0       	ldi	r20, 0x0A	; 10
 43e:	be 01       	movw	r22, r28
 440:	6b 5e       	subi	r22, 0xEB	; 235
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
	LCD_Home(0);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z8LCD_Homei>
	LCD_String(hourS);
 452:	ce 01       	movw	r24, r28
 454:	45 96       	adiw	r24, 0x15	; 21
 456:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
	LCD_String(":");
 45a:	8e e5       	ldi	r24, 0x5E	; 94
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
	LCD_String(minuteS);
 462:	ce 01       	movw	r24, r28
 464:	0b 96       	adiw	r24, 0x0b	; 11
 466:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
	LCD_String(":");
 46a:	8e e5       	ldi	r24, 0x5E	; 94
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
	LCD_String(secondS);
 472:	ce 01       	movw	r24, r28
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
	//_delay_ms(1);

 47a:	6e 96       	adiw	r28, 0x1e	; 30
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	08 95       	ret

00000498 <_Z11LCD_Commandh>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
 498:	95 b1       	in	r25, 0x05	; 5
 49a:	9f 70       	andi	r25, 0x0F	; 15
 49c:	28 2f       	mov	r18, r24
 49e:	20 7f       	andi	r18, 0xF0	; 240
 4a0:	92 2b       	or	r25, r18
 4a2:	95 b9       	out	0x05, r25	; 5
 4a4:	95 b1       	in	r25, 0x05	; 5
 4a6:	9e 7f       	andi	r25, 0xFE	; 254
 4a8:	95 b9       	out	0x05, r25	; 5
 4aa:	95 b1       	in	r25, 0x05	; 5
 4ac:	92 60       	ori	r25, 0x02	; 2
 4ae:	95 b9       	out	0x05, r25	; 5
 4b0:	00 00       	nop
 4b2:	95 b1       	in	r25, 0x05	; 5
 4b4:	9d 7f       	andi	r25, 0xFD	; 253
 4b6:	95 b9       	out	0x05, r25	; 5
 4b8:	32 e4       	ldi	r19, 0x42	; 66
 4ba:	3a 95       	dec	r19
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <_Z11LCD_Commandh+0x22>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <_Z11LCD_Commandh+0x28>
 4c0:	25 b1       	in	r18, 0x05	; 5
 4c2:	30 e1       	ldi	r19, 0x10	; 16
 4c4:	83 9f       	mul	r24, r19
 4c6:	c0 01       	movw	r24, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	92 2f       	mov	r25, r18
 4cc:	9f 70       	andi	r25, 0x0F	; 15
 4ce:	89 2b       	or	r24, r25
 4d0:	85 b9       	out	0x05, r24	; 5
 4d2:	85 b1       	in	r24, 0x05	; 5
 4d4:	82 60       	ori	r24, 0x02	; 2
 4d6:	85 b9       	out	0x05, r24	; 5
 4d8:	00 00       	nop
 4da:	85 b1       	in	r24, 0x05	; 5
 4dc:	8d 7f       	andi	r24, 0xFD	; 253
 4de:	85 b9       	out	0x05, r24	; 5
 4e0:	83 ef       	ldi	r24, 0xF3	; 243
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <_Z11LCD_Commandh+0x4c>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <_Z11LCD_Commandh+0x52>
 4ea:	00 00       	nop
 4ec:	08 95       	ret

000004ee <_Z8LCD_Charh>:
 4ee:	95 b1       	in	r25, 0x05	; 5
 4f0:	9f 70       	andi	r25, 0x0F	; 15
 4f2:	28 2f       	mov	r18, r24
 4f4:	20 7f       	andi	r18, 0xF0	; 240
 4f6:	92 2b       	or	r25, r18
 4f8:	95 b9       	out	0x05, r25	; 5
 4fa:	95 b1       	in	r25, 0x05	; 5
 4fc:	91 60       	ori	r25, 0x01	; 1
 4fe:	95 b9       	out	0x05, r25	; 5
 500:	95 b1       	in	r25, 0x05	; 5
 502:	92 60       	ori	r25, 0x02	; 2
 504:	95 b9       	out	0x05, r25	; 5
 506:	00 00       	nop
 508:	95 b1       	in	r25, 0x05	; 5
 50a:	9d 7f       	andi	r25, 0xFD	; 253
 50c:	95 b9       	out	0x05, r25	; 5
 50e:	32 e4       	ldi	r19, 0x42	; 66
 510:	3a 95       	dec	r19
 512:	f1 f7       	brne	.-4      	; 0x510 <_Z8LCD_Charh+0x22>
 514:	00 c0       	rjmp	.+0      	; 0x516 <_Z8LCD_Charh+0x28>
 516:	25 b1       	in	r18, 0x05	; 5
 518:	30 e1       	ldi	r19, 0x10	; 16
 51a:	83 9f       	mul	r24, r19
 51c:	c0 01       	movw	r24, r0
 51e:	11 24       	eor	r1, r1
 520:	92 2f       	mov	r25, r18
 522:	9f 70       	andi	r25, 0x0F	; 15
 524:	89 2b       	or	r24, r25
 526:	85 b9       	out	0x05, r24	; 5
 528:	85 b1       	in	r24, 0x05	; 5
 52a:	82 60       	ori	r24, 0x02	; 2
 52c:	85 b9       	out	0x05, r24	; 5
 52e:	00 00       	nop
 530:	85 b1       	in	r24, 0x05	; 5
 532:	8d 7f       	andi	r24, 0xFD	; 253
 534:	85 b9       	out	0x05, r24	; 5
 536:	83 ef       	ldi	r24, 0xF3	; 243
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <_Z8LCD_Charh+0x4c>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <_Z8LCD_Charh+0x52>
 540:	00 00       	nop
 542:	08 95       	ret

00000544 <_Z8LCD_Initv>:
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	84 b9       	out	0x04, r24	; 4
 548:	87 e8       	ldi	r24, 0x87	; 135
 54a:	93 e1       	ldi	r25, 0x13	; 19
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <_Z8LCD_Initv+0x8>
 550:	00 c0       	rjmp	.+0      	; 0x552 <_Z8LCD_Initv+0xe>
 552:	00 00       	nop
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	0e 94 4c 02 	call	0x498	; 0x498 <_Z11LCD_Commandh>
 55a:	88 e2       	ldi	r24, 0x28	; 40
 55c:	0e 94 4c 02 	call	0x498	; 0x498 <_Z11LCD_Commandh>
 560:	8c e0       	ldi	r24, 0x0C	; 12
 562:	0e 94 4c 02 	call	0x498	; 0x498 <_Z11LCD_Commandh>
 566:	86 e0       	ldi	r24, 0x06	; 6
 568:	0e 94 4c 02 	call	0x498	; 0x498 <_Z11LCD_Commandh>
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	0e 94 4c 02 	call	0x498	; 0x498 <_Z11LCD_Commandh>
 572:	83 ef       	ldi	r24, 0xF3	; 243
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <_Z8LCD_Initv+0x32>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <_Z8LCD_Initv+0x38>
 57c:	00 00       	nop
 57e:	08 95       	ret

00000580 <_Z10LCD_StringPc>:
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	8c 01       	movw	r16, r24
 58a:	c0 e0       	ldi	r28, 0x00	; 0
 58c:	d0 e0       	ldi	r29, 0x00	; 0
 58e:	f8 01       	movw	r30, r16
 590:	ec 0f       	add	r30, r28
 592:	fd 1f       	adc	r31, r29
 594:	80 81       	ld	r24, Z
 596:	88 23       	and	r24, r24
 598:	21 f0       	breq	.+8      	; 0x5a2 <_Z10LCD_StringPc+0x22>
 59a:	0e 94 77 02 	call	0x4ee	; 0x4ee <_Z8LCD_Charh>
 59e:	21 96       	adiw	r28, 0x01	; 1
 5a0:	f6 cf       	rjmp	.-20     	; 0x58e <_Z10LCD_StringPc+0xe>
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	08 95       	ret

000005ac <_Z9LCD_Clearv>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 4c 02 	call	0x498	; 0x498 <_Z11LCD_Commandh>
 5b2:	83 ef       	ldi	r24, 0xF3	; 243
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <_Z9LCD_Clearv+0xa>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <_Z9LCD_Clearv+0x10>
 5bc:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 5be:	80 e8       	ldi	r24, 0x80	; 128
 5c0:	0e 94 4c 02 	call	0x498	; 0x498 <_Z11LCD_Commandh>
 5c4:	08 95       	ret

000005c6 <_Z8LCD_Homei>:
}
void LCD_Home(int r){
	if(r==0){
 5c6:	89 2b       	or	r24, r25
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <_Z8LCD_Homei+0xc>
		LCD_Command (0x80);
 5ca:	80 e8       	ldi	r24, 0x80	; 128
 5cc:	0e 94 4c 02 	call	0x498	; 0x498 <_Z11LCD_Commandh>
 5d0:	08 95       	ret
	}
	else{
		LCD_Command (0xC0);
 5d2:	80 ec       	ldi	r24, 0xC0	; 192
 5d4:	0e 94 4c 02 	call	0x498	; 0x498 <_Z11LCD_Commandh>
 5d8:	08 95       	ret

000005da <_Z12LCD_SetAlarmci>:

int clkTime = 0;
int num = 0;
int p = 3;
char clkTimeS[10];
void LCD_SetAlarm(char key,int state){
 5da:	0f 93       	push	r16
 5dc:	1f 93       	push	r17
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	c8 2f       	mov	r28, r24
 5e4:	8b 01       	movw	r16, r22
	LCD_Home(0);
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z8LCD_Homei>
	//LCD_String("0000");
	if (int(key)>47 & int(key)<58 & state ==2){
 5ee:	90 ed       	ldi	r25, 0xD0	; 208
 5f0:	9c 0f       	add	r25, r28
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	9a 30       	cpi	r25, 0x0A	; 10
 5f6:	08 f0       	brcs	.+2      	; 0x5fa <_Z12LCD_SetAlarmci+0x20>
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	02 30       	cpi	r16, 0x02	; 2
 5fe:	11 05       	cpc	r17, r1
 600:	09 f0       	breq	.+2      	; 0x604 <_Z12LCD_SetAlarmci+0x2a>
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	88 23       	and	r24, r24
 606:	d1 f1       	breq	.+116    	; 0x67c <_Z12LCD_SetAlarmci+0xa2>
 608:	99 23       	and	r25, r25
 60a:	c1 f1       	breq	.+112    	; 0x67c <_Z12LCD_SetAlarmci+0xa2>
		LCD_Home(0);
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z8LCD_Homei>
		clkTime += (int(key)-48)*powerOf(10,p);
 614:	d0 e0       	ldi	r29, 0x00	; 0
 616:	e0 97       	sbiw	r28, 0x30	; 48
 618:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <p>
 61c:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <p+0x1>
 620:	8a e0       	ldi	r24, 0x0A	; 10
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z7powerOfii>
 628:	9c 01       	movw	r18, r24
 62a:	c2 9f       	mul	r28, r18
 62c:	c0 01       	movw	r24, r0
 62e:	c3 9f       	mul	r28, r19
 630:	90 0d       	add	r25, r0
 632:	d2 9f       	mul	r29, r18
 634:	90 0d       	add	r25, r0
 636:	11 24       	eor	r1, r1
 638:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <clkTime>
 63c:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <clkTime+0x1>
 640:	82 0f       	add	r24, r18
 642:	93 1f       	adc	r25, r19
 644:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <clkTime+0x1>
 648:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <clkTime>
 64c:	4a e0       	ldi	r20, 0x0A	; 10
 64e:	61 ea       	ldi	r22, 0xA1	; 161
 650:	71 e0       	ldi	r23, 0x01	; 1
 652:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
		itoa(clkTime,clkTimeS,10);
		LCD_String(clkTimeS);
 656:	81 ea       	ldi	r24, 0xA1	; 161
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
		p--;
 65e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <p>
 662:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <p+0x1>
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <p+0x1>
 66c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <p>
 670:	87 ea       	ldi	r24, 0xA7	; 167
 672:	91 e6       	ldi	r25, 0x61	; 97
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <_Z12LCD_SetAlarmci+0x9a>
 678:	00 c0       	rjmp	.+0      	; 0x67a <_Z12LCD_SetAlarmci+0xa0>
 67a:	00 00       	nop
		_delay_ms(100);
	}
	if (state==3){
 67c:	03 30       	cpi	r16, 0x03	; 3
 67e:	11 05       	cpc	r17, r1
 680:	79 f5       	brne	.+94     	; 0x6e0 <_Z12LCD_SetAlarmci+0x106>
		setAlarm(clkTime);
 682:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <clkTime>
 686:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <clkTime+0x1>
 68a:	0e 94 75 00 	call	0xea	; 0xea <_Z8setAlarmi>
		LCD_Home(0);
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z8LCD_Homei>
		LCD_String("ALARM IS SET TO");
 696:	80 e6       	ldi	r24, 0x60	; 96
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
		LCD_Home(1);
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z8LCD_Homei>
		LCD_String(clkTimeS);
 6a6:	81 ea       	ldi	r24, 0xA1	; 161
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
		clkTime=0;num=0;p=3;
 6ae:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <clkTime+0x1>
 6b2:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <clkTime>
 6b6:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <num+0x1>
 6ba:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <num>
 6be:	83 e0       	ldi	r24, 0x03	; 3
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <p+0x1>
 6c6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <p>
 6ca:	9f e9       	ldi	r25, 0x9F	; 159
 6cc:	26 e8       	ldi	r18, 0x86	; 134
 6ce:	31 e0       	ldi	r19, 0x01	; 1
 6d0:	91 50       	subi	r25, 0x01	; 1
 6d2:	20 40       	sbci	r18, 0x00	; 0
 6d4:	30 40       	sbci	r19, 0x00	; 0
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <_Z12LCD_SetAlarmci+0xf6>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <_Z12LCD_SetAlarmci+0x100>
 6da:	00 00       	nop
		_delay_ms(500);
		LCD_Clear();
 6dc:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z9LCD_Clearv>
	}


}
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	1f 91       	pop	r17
 6e6:	0f 91       	pop	r16
 6e8:	08 95       	ret

000006ea <_Z8LCD_Menuci>:

char menu_List[3][10] = {"SET ALARM","SET TIME ","SET TONE "};
int menu_Var = 0;

void LCD_Menu(char key,int state){
 6ea:	1f 93       	push	r17
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	18 2f       	mov	r17, r24
 6f2:	eb 01       	movw	r28, r22
	LCD_Home(0);
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z8LCD_Homei>
	if (key=='8' & state==1){
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	c1 30       	cpi	r28, 0x01	; 1
 700:	d1 05       	cpc	r29, r1
 702:	09 f0       	breq	.+2      	; 0x706 <_Z8LCD_Menuci+0x1c>
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	18 33       	cpi	r17, 0x38	; 56
 70a:	09 f0       	breq	.+2      	; 0x70e <_Z8LCD_Menuci+0x24>
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	99 23       	and	r25, r25
 710:	91 f0       	breq	.+36     	; 0x736 <_Z8LCD_Menuci+0x4c>
 712:	88 23       	and	r24, r24
 714:	81 f0       	breq	.+32     	; 0x736 <_Z8LCD_Menuci+0x4c>
		menu_Var++;
 716:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <menu_Var>
 71a:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <menu_Var+0x1>
 71e:	2f 5f       	subi	r18, 0xFF	; 255
 720:	3f 4f       	sbci	r19, 0xFF	; 255
 722:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <menu_Var+0x1>
 726:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <menu_Var>
 72a:	e3 ec       	ldi	r30, 0xC3	; 195
 72c:	f9 e0       	ldi	r31, 0x09	; 9
 72e:	31 97       	sbiw	r30, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <_Z8LCD_Menuci+0x44>
 732:	00 c0       	rjmp	.+0      	; 0x734 <_Z8LCD_Menuci+0x4a>
 734:	00 00       	nop
		//LCD_Clear();
		_delay_ms(10);
	}
	if (key=='2' & state ==1){
 736:	91 e0       	ldi	r25, 0x01	; 1
 738:	12 33       	cpi	r17, 0x32	; 50
 73a:	09 f0       	breq	.+2      	; 0x73e <_Z8LCD_Menuci+0x54>
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	99 23       	and	r25, r25
 740:	89 f0       	breq	.+34     	; 0x764 <_Z8LCD_Menuci+0x7a>
 742:	88 23       	and	r24, r24
 744:	79 f0       	breq	.+30     	; 0x764 <_Z8LCD_Menuci+0x7a>
		menu_Var--;
 746:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <menu_Var>
 74a:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <menu_Var+0x1>
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <menu_Var+0x1>
 754:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <menu_Var>
 758:	83 ec       	ldi	r24, 0xC3	; 195
 75a:	99 e0       	ldi	r25, 0x09	; 9
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	f1 f7       	brne	.-4      	; 0x75c <_Z8LCD_Menuci+0x72>
 760:	00 c0       	rjmp	.+0      	; 0x762 <_Z8LCD_Menuci+0x78>
 762:	00 00       	nop
		//LCD_Clear();
		_delay_ms(10);
	}
	if (menu_Var>2){
 764:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <menu_Var>
 768:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <menu_Var+0x1>
 76c:	03 97       	sbiw	r24, 0x03	; 3
 76e:	24 f0       	brlt	.+8      	; 0x778 <_Z8LCD_Menuci+0x8e>
		menu_Var=0;
 770:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <menu_Var+0x1>
 774:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <menu_Var>
	}
	if (menu_Var<0){
 778:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <menu_Var>
 77c:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <menu_Var+0x1>
 780:	99 23       	and	r25, r25
 782:	34 f4       	brge	.+12     	; 0x790 <_Z8LCD_Menuci+0xa6>
		menu_Var=2;
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <menu_Var+0x1>
 78c:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <menu_Var>
	}
	if (state==1){
 790:	c1 30       	cpi	r28, 0x01	; 1
 792:	d1 05       	cpc	r29, r1
 794:	f9 f4       	brne	.+62     	; 0x7d4 <_Z8LCD_Menuci+0xea>
		LCD_Home(0);LCD_String(">>");
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z8LCD_Homei>
 79e:	80 e7       	ldi	r24, 0x70	; 112
 7a0:	91 e0       	ldi	r25, 0x01	; 1
 7a2:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
		LCD_String(menu_List[menu_Var%3]);
 7a6:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <menu_Var>
 7aa:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <menu_Var+0x1>
 7ae:	63 e0       	ldi	r22, 0x03	; 3
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	0e 94 e5 05 	call	0xbca	; 0xbca <__divmodhi4>
 7b6:	9c 01       	movw	r18, r24
 7b8:	22 0f       	add	r18, r18
 7ba:	33 1f       	adc	r19, r19
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	82 0f       	add	r24, r18
 7ca:	93 1f       	adc	r25, r19
 7cc:	88 5e       	subi	r24, 0xE8	; 232
 7ce:	9e 4f       	sbci	r25, 0xFE	; 254
 7d0:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
	// 	LCD_Home(1);
	// 	LCD_String(menu_List[(menu_Var+1)%3]);
	}
	if ((state >1) & (menu_Var==0)){
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <menu_Var>
 7da:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <menu_Var+0x1>
 7de:	23 2b       	or	r18, r19
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <_Z8LCD_Menuci+0xfa>
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	88 23       	and	r24, r24
 7e6:	59 f0       	breq	.+22     	; 0x7fe <_Z8LCD_Menuci+0x114>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	c2 30       	cpi	r28, 0x02	; 2
 7ec:	d1 05       	cpc	r29, r1
 7ee:	0c f4       	brge	.+2      	; 0x7f2 <_Z8LCD_Menuci+0x108>
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	88 23       	and	r24, r24
 7f4:	21 f0       	breq	.+8      	; 0x7fe <_Z8LCD_Menuci+0x114>
		LCD_SetAlarm(key,state);
 7f6:	be 01       	movw	r22, r28
 7f8:	81 2f       	mov	r24, r17
 7fa:	0e 94 ed 02 	call	0x5da	; 0x5da <_Z12LCD_SetAlarmci>
	}
}
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	1f 91       	pop	r17
 804:	08 95       	ret

00000806 <_Z14ds1307_dec2bcdh>:
#define F_CPU 1000000UL
#endif


uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
 806:	9d ec       	ldi	r25, 0xCD	; 205
 808:	89 9f       	mul	r24, r25
 80a:	91 2d       	mov	r25, r1
 80c:	11 24       	eor	r1, r1
 80e:	96 95       	lsr	r25
 810:	96 95       	lsr	r25
 812:	96 95       	lsr	r25
 814:	29 2f       	mov	r18, r25
 816:	22 0f       	add	r18, r18
 818:	92 0f       	add	r25, r18
 81a:	29 2f       	mov	r18, r25
 81c:	22 0f       	add	r18, r18
}
 81e:	82 0f       	add	r24, r18
 820:	08 95       	ret

00000822 <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 822:	28 2f       	mov	r18, r24
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	35 95       	asr	r19
 828:	27 95       	ror	r18
 82a:	35 95       	asr	r19
 82c:	27 95       	ror	r18
 82e:	35 95       	asr	r19
 830:	27 95       	ror	r18
 832:	35 95       	asr	r19
 834:	27 95       	ror	r18
 836:	92 2f       	mov	r25, r18
 838:	99 0f       	add	r25, r25
 83a:	29 0f       	add	r18, r25
 83c:	92 2f       	mov	r25, r18
 83e:	99 0f       	add	r25, r25
}
 840:	89 1b       	sub	r24, r25
 842:	08 95       	ret

00000844 <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
 844:	0e 94 c2 04 	call	0x984	; 0x984 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 848:	83 e0       	ldi	r24, 0x03	; 3
 84a:	8a 95       	dec	r24
 84c:	f1 f7       	brne	.-4      	; 0x84a <_Z11ds1307_initv+0x6>
 84e:	00 00       	nop
 850:	08 95       	ret

00000852 <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
 852:	cf 92       	push	r12
 854:	ef 92       	push	r14
 856:	ff 92       	push	r15
 858:	0f 93       	push	r16
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	c8 2f       	mov	r28, r24
 862:	d6 2f       	mov	r29, r22
 864:	14 2f       	mov	r17, r20
 866:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
 868:	80 ed       	ldi	r24, 0xD0	; 208
 86a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z14i2c_start_waith>
	i2c_write(0x00);
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
 874:	8c 2d       	mov	r24, r12
 876:	0e 94 03 04 	call	0x806	; 0x806 <_Z14ds1307_dec2bcdh>
 87a:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
 87e:	8e 2d       	mov	r24, r14
 880:	0e 94 03 04 	call	0x806	; 0x806 <_Z14ds1307_dec2bcdh>
 884:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
 888:	80 2f       	mov	r24, r16
 88a:	0e 94 03 04 	call	0x806	; 0x806 <_Z14ds1307_dec2bcdh>
 88e:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
 892:	8f 2d       	mov	r24, r15
 894:	0e 94 03 04 	call	0x806	; 0x806 <_Z14ds1307_dec2bcdh>
 898:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
 89c:	81 2f       	mov	r24, r17
 89e:	0e 94 03 04 	call	0x806	; 0x806 <_Z14ds1307_dec2bcdh>
 8a2:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
 8a6:	8d 2f       	mov	r24, r29
 8a8:	0e 94 03 04 	call	0x806	; 0x806 <_Z14ds1307_dec2bcdh>
 8ac:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
 8b0:	8c 2f       	mov	r24, r28
 8b2:	0e 94 03 04 	call	0x806	; 0x806 <_Z14ds1307_dec2bcdh>
 8b6:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_write(0x00);
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_stop();
 8c0:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z8i2c_stopv>
}
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	cf 90       	pop	r12
 8d2:	08 95       	ret

000008d4 <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
 8d4:	6f 92       	push	r6
 8d6:	7f 92       	push	r7
 8d8:	8f 92       	push	r8
 8da:	9f 92       	push	r9
 8dc:	af 92       	push	r10
 8de:	bf 92       	push	r11
 8e0:	cf 92       	push	r12
 8e2:	df 92       	push	r13
 8e4:	ef 92       	push	r14
 8e6:	ff 92       	push	r15
 8e8:	0f 93       	push	r16
 8ea:	1f 93       	push	r17
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	ec 01       	movw	r28, r24
 8f2:	3b 01       	movw	r6, r22
 8f4:	5a 01       	movw	r10, r20
 8f6:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
 8f8:	80 ed       	ldi	r24, 0xD0	; 208
 8fa:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z14i2c_start_waith>
	i2c_write(0x00);
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	0e 94 20 05 	call	0xa40	; 0xa40 <_Z9i2c_writeh>
	i2c_stop();
 904:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
 908:	81 ed       	ldi	r24, 0xD1	; 209
 90a:	0e 94 15 05 	call	0xa2a	; 0xa2a <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
 90e:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z11i2c_readAckv>
 912:	8f 77       	andi	r24, 0x7F	; 127
 914:	0e 94 11 04 	call	0x822	; 0x822 <_Z14ds1307_bcd2dech>
 918:	f6 01       	movw	r30, r12
 91a:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
 91c:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z11i2c_readAckv>
 920:	0e 94 11 04 	call	0x822	; 0x822 <_Z14ds1307_bcd2dech>
 924:	f7 01       	movw	r30, r14
 926:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
 928:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z11i2c_readAckv>
 92c:	0e 94 11 04 	call	0x822	; 0x822 <_Z14ds1307_bcd2dech>
 930:	f8 01       	movw	r30, r16
 932:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
 934:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z11i2c_readAckv>
 938:	0e 94 11 04 	call	0x822	; 0x822 <_Z14ds1307_bcd2dech>
 93c:	f4 01       	movw	r30, r8
 93e:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
 940:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z11i2c_readAckv>
 944:	0e 94 11 04 	call	0x822	; 0x822 <_Z14ds1307_bcd2dech>
 948:	f5 01       	movw	r30, r10
 94a:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
 94c:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z11i2c_readAckv>
 950:	0e 94 11 04 	call	0x822	; 0x822 <_Z14ds1307_bcd2dech>
 954:	f3 01       	movw	r30, r6
 956:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
 958:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z11i2c_readNakv>
 95c:	0e 94 11 04 	call	0x822	; 0x822 <_Z14ds1307_bcd2dech>
 960:	88 83       	st	Y, r24
	i2c_stop();
 962:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z8i2c_stopv>
}
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	1f 91       	pop	r17
 96c:	0f 91       	pop	r16
 96e:	ff 90       	pop	r15
 970:	ef 90       	pop	r14
 972:	df 90       	pop	r13
 974:	cf 90       	pop	r12
 976:	bf 90       	pop	r11
 978:	af 90       	pop	r10
 97a:	9f 90       	pop	r9
 97c:	8f 90       	pop	r8
 97e:	7f 90       	pop	r7
 980:	6f 90       	pop	r6
 982:	08 95       	ret

00000984 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 984:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 988:	8d ef       	ldi	r24, 0xFD	; 253
 98a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 98e:	08 95       	ret

00000990 <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 990:	94 ea       	ldi	r25, 0xA4	; 164
 992:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 996:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 99a:	99 23       	and	r25, r25
 99c:	e4 f7       	brge	.-8      	; 0x996 <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 99e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 9a2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 9a4:	98 30       	cpi	r25, 0x08	; 8
 9a6:	11 f0       	breq	.+4      	; 0x9ac <_Z9i2c_starth+0x1c>
 9a8:	90 31       	cpi	r25, 0x10	; 16
 9aa:	91 f4       	brne	.+36     	; 0x9d0 <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
 9ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 9b0:	84 e8       	ldi	r24, 0x84	; 132
 9b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 9b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9ba:	88 23       	and	r24, r24
 9bc:	e4 f7       	brge	.-8      	; 0x9b6 <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 9be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 9c2:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 9c4:	88 31       	cpi	r24, 0x18	; 24
 9c6:	31 f0       	breq	.+12     	; 0x9d4 <_Z9i2c_starth+0x44>
 9c8:	80 34       	cpi	r24, 0x40	; 64
 9ca:	31 f4       	brne	.+12     	; 0x9d8 <_Z9i2c_starth+0x48>

	return 0;
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 9d8:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
 9da:	08 95       	ret

000009dc <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 9dc:	94 ea       	ldi	r25, 0xA4	; 164
 9de:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 9e2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9e6:	99 23       	and	r25, r25
 9e8:	e4 f7       	brge	.-8      	; 0x9e2 <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 9ea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 9ee:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 9f0:	98 30       	cpi	r25, 0x08	; 8
 9f2:	11 f0       	breq	.+4      	; 0x9f8 <_Z14i2c_start_waith+0x1c>
 9f4:	90 31       	cpi	r25, 0x10	; 16
 9f6:	91 f7       	brne	.-28     	; 0x9dc <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
 9f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
 9fc:	94 e8       	ldi	r25, 0x84	; 132
 9fe:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 a02:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a06:	99 23       	and	r25, r25
 a08:	e4 f7       	brge	.-8      	; 0xa02 <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 a0a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 a0e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 a10:	90 32       	cpi	r25, 0x20	; 32
 a12:	11 f0       	breq	.+4      	; 0xa18 <_Z14i2c_start_waith+0x3c>
 a14:	98 35       	cpi	r25, 0x58	; 88
 a16:	41 f4       	brne	.+16     	; 0xa28 <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 a18:	94 e9       	ldi	r25, 0x94	; 148
 a1a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 a1e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a22:	94 fd       	sbrc	r25, 4
 a24:	fc cf       	rjmp	.-8      	; 0xa1e <_Z14i2c_start_waith+0x42>
 a26:	da cf       	rjmp	.-76     	; 0x9dc <_Z14i2c_start_waith>
 a28:	08 95       	ret

00000a2a <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 a2a:	0e 94 c8 04 	call	0x990	; 0x990 <_Z9i2c_starth>

}/* i2c_rep_start */
 a2e:	08 95       	ret

00000a30 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 a30:	84 e9       	ldi	r24, 0x94	; 148
 a32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 a36:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a3a:	84 fd       	sbrc	r24, 4
 a3c:	fc cf       	rjmp	.-8      	; 0xa36 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
 a3e:	08 95       	ret

00000a40 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 a40:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 a44:	84 e8       	ldi	r24, 0x84	; 132
 a46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 a4a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a4e:	88 23       	and	r24, r24
 a50:	e4 f7       	brge	.-8      	; 0xa4a <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 a52:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 a56:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 a58:	88 32       	cpi	r24, 0x28	; 40
 a5a:	11 f0       	breq	.+4      	; 0xa60 <_Z9i2c_writeh+0x20>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	08 95       	ret
	return 0;
 a60:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 a62:	08 95       	ret

00000a64 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 a64:	84 ec       	ldi	r24, 0xC4	; 196
 a66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
 a6a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a6e:	88 23       	and	r24, r24
 a70:	e4 f7       	brge	.-8      	; 0xa6a <_Z11i2c_readAckv+0x6>

    return TWDR;
 a72:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
 a76:	08 95       	ret

00000a78 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 a78:	84 e8       	ldi	r24, 0x84	; 132
 a7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 a7e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a82:	88 23       	and	r24, r24
 a84:	e4 f7       	brge	.-8      	; 0xa7e <_Z11i2c_readNakv+0x6>
	
    return TWDR;
 a86:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
 a8a:	08 95       	ret

00000a8c <_Z8btnPressv>:
{
} //~Keypad


char btnPress(){
	DDRC = 0x0F;
 a8c:	8f e0       	ldi	r24, 0x0F	; 15
 a8e:	87 b9       	out	0x07, r24	; 7
	for (int i=0;i<4;i++){
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	64 30       	cpi	r22, 0x04	; 4
 a96:	71 05       	cpc	r23, r1
 a98:	94 f5       	brge	.+100    	; 0xafe <_Z8btnPressv+0x72>
		PORTC = 1<<row[i];
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	fb 01       	movw	r30, r22
 aa0:	e5 5c       	subi	r30, 0xC5	; 197
 aa2:	fe 4f       	sbci	r31, 0xFE	; 254
 aa4:	00 80       	ld	r0, Z
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <_Z8btnPressv+0x20>
 aa8:	88 0f       	add	r24, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	0a 94       	dec	r0
 aae:	e2 f7       	brpl	.-8      	; 0xaa8 <_Z8btnPressv+0x1c>
 ab0:	88 b9       	out	0x08, r24	; 8
		for (int j = 0;j<3;j++){
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	83 30       	cpi	r24, 0x03	; 3
 ab8:	91 05       	cpc	r25, r1
 aba:	f4 f4       	brge	.+60     	; 0xaf8 <_Z8btnPressv+0x6c>
			if (PIND==(1<<colomn[j])){
 abc:	49 b1       	in	r20, 0x09	; 9
 abe:	50 e0       	ldi	r21, 0x00	; 0
 ac0:	21 e0       	ldi	r18, 0x01	; 1
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	fc 01       	movw	r30, r24
 ac6:	e8 5c       	subi	r30, 0xC8	; 200
 ac8:	fe 4f       	sbci	r31, 0xFE	; 254
 aca:	00 80       	ld	r0, Z
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <_Z8btnPressv+0x46>
 ace:	22 0f       	add	r18, r18
 ad0:	33 1f       	adc	r19, r19
 ad2:	0a 94       	dec	r0
 ad4:	e2 f7       	brpl	.-8      	; 0xace <_Z8btnPressv+0x42>
 ad6:	42 17       	cp	r20, r18
 ad8:	53 07       	cpc	r21, r19
 ada:	61 f4       	brne	.+24     	; 0xaf4 <_Z8btnPressv+0x68>
				//_delay_ms(100);
				return keys[i][j];
 adc:	9b 01       	movw	r18, r22
 ade:	22 0f       	add	r18, r18
 ae0:	33 1f       	adc	r19, r19
 ae2:	62 0f       	add	r22, r18
 ae4:	73 1f       	adc	r23, r19
 ae6:	61 5c       	subi	r22, 0xC1	; 193
 ae8:	7e 4f       	sbci	r23, 0xFE	; 254
 aea:	fb 01       	movw	r30, r22
 aec:	e8 0f       	add	r30, r24
 aee:	f9 1f       	adc	r31, r25
 af0:	80 81       	ld	r24, Z
 af2:	08 95       	ret

char btnPress(){
	DDRC = 0x0F;
	for (int i=0;i<4;i++){
		PORTC = 1<<row[i];
		for (int j = 0;j<3;j++){
 af4:	01 96       	adiw	r24, 0x01	; 1
 af6:	df cf       	rjmp	.-66     	; 0xab6 <_Z8btnPressv+0x2a>
} //~Keypad


char btnPress(){
	DDRC = 0x0F;
	for (int i=0;i<4;i++){
 af8:	6f 5f       	subi	r22, 0xFF	; 255
 afa:	7f 4f       	sbci	r23, 0xFF	; 255
 afc:	cb cf       	rjmp	.-106    	; 0xa94 <_Z8btnPressv+0x8>
				//_delay_ms(100);
				return keys[i][j];
			}
		}
	}
	return '&';
 afe:	86 e2       	ldi	r24, 0x26	; 38
 b00:	08 95       	ret

00000b02 <main>:
#include "util/delay.h"
#ifndef F_CPU
#define F_CPU 1000000UL
#endif
int main()
{
 b02:	cf 93       	push	r28
 b04:	df 93       	push	r29
 b06:	cd b7       	in	r28, 0x3d	; 61
 b08:	de b7       	in	r29, 0x3e	; 62
 b0a:	2c 97       	sbiw	r28, 0x0c	; 12
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	f8 94       	cli
 b10:	de bf       	out	0x3e, r29	; 62
 b12:	0f be       	out	0x3f, r0	; 63
 b14:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();			/* Initialization of LCD*/
 b16:	0e 94 a2 02 	call	0x544	; 0x544 <_Z8LCD_Initv>
	LCD_String("   WELCOME!!!");
 b1a:	83 e7       	ldi	r24, 0x73	; 115
 b1c:	91 e0       	ldi	r25, 0x01	; 1
 b1e:	0e 94 c0 02 	call	0x580	; 0x580 <_Z10LCD_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b22:	2f e3       	ldi	r18, 0x3F	; 63
 b24:	8d e0       	ldi	r24, 0x0D	; 13
 b26:	93 e0       	ldi	r25, 0x03	; 3
 b28:	21 50       	subi	r18, 0x01	; 1
 b2a:	80 40       	sbci	r24, 0x00	; 0
 b2c:	90 40       	sbci	r25, 0x00	; 0
 b2e:	e1 f7       	brne	.-8      	; 0xb28 <main+0x26>
 b30:	00 c0       	rjmp	.+0      	; 0xb32 <main+0x30>
 b32:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
 b34:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z9LCD_Clearv>
	ds1307_init();
 b38:	0e 94 22 04 	call	0x844	; 0x844 <_Z11ds1307_initv>
	int clocktime[6] = {21,05,4,12,8,35};
 b3c:	8c e0       	ldi	r24, 0x0C	; 12
 b3e:	eb e4       	ldi	r30, 0x4B	; 75
 b40:	f1 e0       	ldi	r31, 0x01	; 1
 b42:	de 01       	movw	r26, r28
 b44:	11 96       	adiw	r26, 0x01	; 1
 b46:	01 90       	ld	r0, Z+
 b48:	0d 92       	st	X+, r0
 b4a:	8a 95       	dec	r24
 b4c:	e1 f7       	brne	.-8      	; 0xb46 <main+0x44>
	setClockTime(clocktime);
 b4e:	ce 01       	movw	r24, r28
 b50:	01 96       	adiw	r24, 0x01	; 1
 b52:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_Z12setClockTimePi>
	setAlarm(1209);
 b56:	89 eb       	ldi	r24, 0xB9	; 185
 b58:	94 e0       	ldi	r25, 0x04	; 4
 b5a:	0e 94 75 00 	call	0xea	; 0xea <_Z8setAlarmi>
	int menu = 0;
 b5e:	00 e0       	ldi	r16, 0x00	; 0
 b60:	10 e0       	ldi	r17, 0x00	; 0
	char key;
	while(1){
		checkAlarm();
 b62:	0e 94 aa 00 	call	0x154	; 0x154 <_Z10checkAlarmv>
		key = btnPress();
 b66:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z8btnPressv>
 b6a:	f8 2e       	mov	r15, r24
		if (menu==0){
 b6c:	01 15       	cp	r16, r1
 b6e:	11 05       	cpc	r17, r1
 b70:	11 f4       	brne	.+4      	; 0xb76 <main+0x74>
			displayTime();
 b72:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z11displayTimev>
		}
		if (key=='*'){
 b76:	2a e2       	ldi	r18, 0x2A	; 42
 b78:	f2 12       	cpse	r15, r18
 b7a:	0d c0       	rjmp	.+26     	; 0xb96 <main+0x94>
 b7c:	8f e7       	ldi	r24, 0x7F	; 127
 b7e:	98 e3       	ldi	r25, 0x38	; 56
 b80:	21 e0       	ldi	r18, 0x01	; 1
 b82:	81 50       	subi	r24, 0x01	; 1
 b84:	90 40       	sbci	r25, 0x00	; 0
 b86:	20 40       	sbci	r18, 0x00	; 0
 b88:	e1 f7       	brne	.-8      	; 0xb82 <main+0x80>
 b8a:	00 c0       	rjmp	.+0      	; 0xb8c <main+0x8a>
 b8c:	00 00       	nop
			_delay_ms(400);
			menu ++;
 b8e:	0f 5f       	subi	r16, 0xFF	; 255
 b90:	1f 4f       	sbci	r17, 0xFF	; 255
			LCD_Clear();
 b92:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z9LCD_Clearv>
		}
		if (menu>0){
 b96:	10 16       	cp	r1, r16
 b98:	11 06       	cpc	r1, r17
 b9a:	24 f4       	brge	.+8      	; 0xba4 <main+0xa2>
			LCD_Menu(key,menu);
 b9c:	b8 01       	movw	r22, r16
 b9e:	8f 2d       	mov	r24, r15
 ba0:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z8LCD_Menuci>
		}
		if (menu==3){
 ba4:	03 30       	cpi	r16, 0x03	; 3
 ba6:	11 05       	cpc	r17, r1
 ba8:	11 f4       	brne	.+4      	; 0xbae <main+0xac>
			menu = 0;
 baa:	00 e0       	ldi	r16, 0x00	; 0
 bac:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (key=='#'){
 bae:	83 e2       	ldi	r24, 0x23	; 35
 bb0:	f8 12       	cpse	r15, r24
 bb2:	d7 cf       	rjmp	.-82     	; 0xb62 <main+0x60>
 bb4:	87 ea       	ldi	r24, 0xA7	; 167
 bb6:	91 e6       	ldi	r25, 0x61	; 97
 bb8:	01 97       	sbiw	r24, 0x01	; 1
 bba:	f1 f7       	brne	.-4      	; 0xbb8 <main+0xb6>
 bbc:	00 c0       	rjmp	.+0      	; 0xbbe <main+0xbc>
 bbe:	00 00       	nop
			_delay_ms(100);
			menu --;
 bc0:	01 50       	subi	r16, 0x01	; 1
 bc2:	11 09       	sbc	r17, r1
			LCD_Clear();
 bc4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z9LCD_Clearv>
 bc8:	cc cf       	rjmp	.-104    	; 0xb62 <main+0x60>

00000bca <__divmodhi4>:
 bca:	97 fb       	bst	r25, 7
 bcc:	07 2e       	mov	r0, r23
 bce:	16 f4       	brtc	.+4      	; 0xbd4 <__divmodhi4+0xa>
 bd0:	00 94       	com	r0
 bd2:	07 d0       	rcall	.+14     	; 0xbe2 <__divmodhi4_neg1>
 bd4:	77 fd       	sbrc	r23, 7
 bd6:	09 d0       	rcall	.+18     	; 0xbea <__divmodhi4_neg2>
 bd8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__udivmodhi4>
 bdc:	07 fc       	sbrc	r0, 7
 bde:	05 d0       	rcall	.+10     	; 0xbea <__divmodhi4_neg2>
 be0:	3e f4       	brtc	.+14     	; 0xbf0 <__divmodhi4_exit>

00000be2 <__divmodhi4_neg1>:
 be2:	90 95       	com	r25
 be4:	81 95       	neg	r24
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	08 95       	ret

00000bea <__divmodhi4_neg2>:
 bea:	70 95       	com	r23
 bec:	61 95       	neg	r22
 bee:	7f 4f       	sbci	r23, 0xFF	; 255

00000bf0 <__divmodhi4_exit>:
 bf0:	08 95       	ret

00000bf2 <__udivmodhi4>:
 bf2:	aa 1b       	sub	r26, r26
 bf4:	bb 1b       	sub	r27, r27
 bf6:	51 e1       	ldi	r21, 0x11	; 17
 bf8:	07 c0       	rjmp	.+14     	; 0xc08 <__udivmodhi4_ep>

00000bfa <__udivmodhi4_loop>:
 bfa:	aa 1f       	adc	r26, r26
 bfc:	bb 1f       	adc	r27, r27
 bfe:	a6 17       	cp	r26, r22
 c00:	b7 07       	cpc	r27, r23
 c02:	10 f0       	brcs	.+4      	; 0xc08 <__udivmodhi4_ep>
 c04:	a6 1b       	sub	r26, r22
 c06:	b7 0b       	sbc	r27, r23

00000c08 <__udivmodhi4_ep>:
 c08:	88 1f       	adc	r24, r24
 c0a:	99 1f       	adc	r25, r25
 c0c:	5a 95       	dec	r21
 c0e:	a9 f7       	brne	.-22     	; 0xbfa <__udivmodhi4_loop>
 c10:	80 95       	com	r24
 c12:	90 95       	com	r25
 c14:	bc 01       	movw	r22, r24
 c16:	cd 01       	movw	r24, r26
 c18:	08 95       	ret

00000c1a <__itoa_ncheck>:
 c1a:	bb 27       	eor	r27, r27
 c1c:	4a 30       	cpi	r20, 0x0A	; 10
 c1e:	31 f4       	brne	.+12     	; 0xc2c <__itoa_ncheck+0x12>
 c20:	99 23       	and	r25, r25
 c22:	22 f4       	brpl	.+8      	; 0xc2c <__itoa_ncheck+0x12>
 c24:	bd e2       	ldi	r27, 0x2D	; 45
 c26:	90 95       	com	r25
 c28:	81 95       	neg	r24
 c2a:	9f 4f       	sbci	r25, 0xFF	; 255
 c2c:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__utoa_common>

00000c30 <__utoa_ncheck>:
 c30:	bb 27       	eor	r27, r27

00000c32 <__utoa_common>:
 c32:	fb 01       	movw	r30, r22
 c34:	55 27       	eor	r21, r21
 c36:	aa 27       	eor	r26, r26
 c38:	88 0f       	add	r24, r24
 c3a:	99 1f       	adc	r25, r25
 c3c:	aa 1f       	adc	r26, r26
 c3e:	a4 17       	cp	r26, r20
 c40:	10 f0       	brcs	.+4      	; 0xc46 <__utoa_common+0x14>
 c42:	a4 1b       	sub	r26, r20
 c44:	83 95       	inc	r24
 c46:	50 51       	subi	r21, 0x10	; 16
 c48:	b9 f7       	brne	.-18     	; 0xc38 <__utoa_common+0x6>
 c4a:	a0 5d       	subi	r26, 0xD0	; 208
 c4c:	aa 33       	cpi	r26, 0x3A	; 58
 c4e:	08 f0       	brcs	.+2      	; 0xc52 <__utoa_common+0x20>
 c50:	a9 5d       	subi	r26, 0xD9	; 217
 c52:	a1 93       	st	Z+, r26
 c54:	00 97       	sbiw	r24, 0x00	; 0
 c56:	79 f7       	brne	.-34     	; 0xc36 <__utoa_common+0x4>
 c58:	b1 11       	cpse	r27, r1
 c5a:	b1 93       	st	Z+, r27
 c5c:	11 92       	st	Z+, r1
 c5e:	cb 01       	movw	r24, r22
 c60:	0c 94 32 06 	jmp	0xc64	; 0xc64 <strrev>

00000c64 <strrev>:
 c64:	dc 01       	movw	r26, r24
 c66:	fc 01       	movw	r30, r24
 c68:	67 2f       	mov	r22, r23
 c6a:	71 91       	ld	r23, Z+
 c6c:	77 23       	and	r23, r23
 c6e:	e1 f7       	brne	.-8      	; 0xc68 <strrev+0x4>
 c70:	32 97       	sbiw	r30, 0x02	; 2
 c72:	04 c0       	rjmp	.+8      	; 0xc7c <strrev+0x18>
 c74:	7c 91       	ld	r23, X
 c76:	6d 93       	st	X+, r22
 c78:	70 83       	st	Z, r23
 c7a:	62 91       	ld	r22, -Z
 c7c:	ae 17       	cp	r26, r30
 c7e:	bf 07       	cpc	r27, r31
 c80:	c8 f3       	brcs	.-14     	; 0xc74 <strrev+0x10>
 c82:	08 95       	ret

00000c84 <_exit>:
 c84:	f8 94       	cli

00000c86 <__stop_program>:
 c86:	ff cf       	rjmp	.-2      	; 0xc86 <__stop_program>
