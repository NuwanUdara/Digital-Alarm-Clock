
Alarm Clock AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00002804  00002898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002804  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  008001e0  008001e0  00002978  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032e2  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001265  00000000  00000000  00005eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000162d  00000000  00000000  0000714f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  0000877c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c8d  00000000  00000000  00008d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002059  00000000  00000000  000099d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000ba32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__ctors_end>
       4:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_1>
       8:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
       c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      10:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      14:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      18:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      1c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      20:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      24:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      28:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      2c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      30:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      34:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      38:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      3c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      40:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      44:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      48:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      4c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      50:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      54:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      58:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      5c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      60:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      64:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	52 00       	.word	0x0052	; ????
      6a:	08 00       	.word	0x0008	; ????
      6c:	52 00       	.word	0x0052	; ????
      6e:	08 00       	.word	0x0008	; ????
      70:	a5 00       	.word	0x00a5	; ????
      72:	08 00       	.word	0x0008	; ????
      74:	52 00       	.word	0x0052	; ????
      76:	08 00       	.word	0x0008	; ????
      78:	52 00       	.word	0x0052	; ????
      7a:	08 00       	.word	0x0008	; ????
      7c:	93 00       	.word	0x0093	; ????
      7e:	08 00       	.word	0x0008	; ????
      80:	52 00       	.word	0x0052	; ????
      82:	08 00       	.word	0x0008	; ????
      84:	52 00       	.word	0x0052	; ????
      86:	08 00       	.word	0x0008	; ????
      88:	83 00       	.word	0x0083	; ????
      8a:	08 00       	.word	0x0008	; ????
      8c:	52 00       	.word	0x0052	; ????
      8e:	08 00       	.word	0x0008	; ????
      90:	52 00       	.word	0x0052	; ????
      92:	08 00       	.word	0x0008	; ????
      94:	75 00       	.word	0x0075	; ????
      96:	08 00       	.word	0x0008	; ????
      98:	52 00       	.word	0x0052	; ????
      9a:	08 00       	.word	0x0008	; ????
      9c:	52 00       	.word	0x0052	; ????
      9e:	08 00       	.word	0x0008	; ????
      a0:	7b 00       	.word	0x007b	; ????
      a2:	08 00       	.word	0x0008	; ????
      a4:	83 00       	.word	0x0083	; ????
      a6:	08 00       	.word	0x0008	; ????
      a8:	52 00       	.word	0x0052	; ????
      aa:	08 00       	.word	0x0008	; ????
      ac:	52 00       	.word	0x0052	; ????
      ae:	08 00       	.word	0x0008	; ????
      b0:	a5 00       	.word	0x00a5	; ????
      b2:	08 00       	.word	0x0008	; ????
      b4:	52 00       	.word	0x0052	; ????
      b6:	08 00       	.word	0x0008	; ????
      b8:	52 00       	.word	0x0052	; ????
      ba:	08 00       	.word	0x0008	; ????
      bc:	93 00       	.word	0x0093	; ????
      be:	08 00       	.word	0x0008	; ????
      c0:	52 00       	.word	0x0052	; ????
      c2:	08 00       	.word	0x0008	; ????
      c4:	52 00       	.word	0x0052	; ????
      c6:	08 00       	.word	0x0008	; ????
      c8:	83 00       	.word	0x0083	; ????
      ca:	08 00       	.word	0x0008	; ????
      cc:	52 00       	.word	0x0052	; ????
      ce:	08 00       	.word	0x0008	; ????
      d0:	52 00       	.word	0x0052	; ????
      d2:	08 00       	.word	0x0008	; ????
      d4:	75 00       	.word	0x0075	; ????
      d6:	fe ff       	.word	0xfffe	; ????
      d8:	52 00       	.word	0x0052	; ????
      da:	08 00       	.word	0x0008	; ????
      dc:	52 00       	.word	0x0052	; ????
      de:	08 00       	.word	0x0008	; ????
      e0:	a5 00       	.word	0x00a5	; ????
      e2:	08 00       	.word	0x0008	; ????
      e4:	52 00       	.word	0x0052	; ????
      e6:	08 00       	.word	0x0008	; ????
      e8:	52 00       	.word	0x0052	; ????
      ea:	08 00       	.word	0x0008	; ????
      ec:	93 00       	.word	0x0093	; ????
      ee:	08 00       	.word	0x0008	; ????
      f0:	52 00       	.word	0x0052	; ????
      f2:	08 00       	.word	0x0008	; ????
      f4:	52 00       	.word	0x0052	; ????
      f6:	08 00       	.word	0x0008	; ????
      f8:	83 00       	.word	0x0083	; ????
      fa:	08 00       	.word	0x0008	; ????
      fc:	52 00       	.word	0x0052	; ????
      fe:	08 00       	.word	0x0008	; ????
     100:	52 00       	.word	0x0052	; ????
     102:	08 00       	.word	0x0008	; ????
     104:	75 00       	.word	0x0075	; ????
     106:	08 00       	.word	0x0008	; ????
     108:	52 00       	.word	0x0052	; ????
     10a:	08 00       	.word	0x0008	; ????
     10c:	52 00       	.word	0x0052	; ????
     10e:	08 00       	.word	0x0008	; ????
     110:	7b 00       	.word	0x007b	; ????
     112:	08 00       	.word	0x0008	; ????
     114:	83 00       	.word	0x0083	; ????
     116:	08 00       	.word	0x0008	; ????
     118:	52 00       	.word	0x0052	; ????
     11a:	08 00       	.word	0x0008	; ????
     11c:	52 00       	.word	0x0052	; ????
     11e:	08 00       	.word	0x0008	; ????
     120:	a5 00       	.word	0x00a5	; ????
     122:	08 00       	.word	0x0008	; ????
     124:	52 00       	.word	0x0052	; ????
     126:	08 00       	.word	0x0008	; ????
     128:	52 00       	.word	0x0052	; ????
     12a:	08 00       	.word	0x0008	; ????
     12c:	93 00       	.word	0x0093	; ????
     12e:	08 00       	.word	0x0008	; ????
     130:	52 00       	.word	0x0052	; ????
     132:	08 00       	.word	0x0008	; ????
     134:	52 00       	.word	0x0052	; ????
     136:	08 00       	.word	0x0008	; ????
     138:	83 00       	.word	0x0083	; ????
     13a:	08 00       	.word	0x0008	; ????
     13c:	52 00       	.word	0x0052	; ????
     13e:	08 00       	.word	0x0008	; ????
     140:	52 00       	.word	0x0052	; ????
     142:	08 00       	.word	0x0008	; ????
     144:	75 00       	.word	0x0075	; ????
     146:	fe ff       	.word	0xfffe	; ????
     148:	52 00       	.word	0x0052	; ????
     14a:	08 00       	.word	0x0008	; ????
     14c:	52 00       	.word	0x0052	; ????
     14e:	08 00       	.word	0x0008	; ????
     150:	a5 00       	.word	0x00a5	; ????
     152:	08 00       	.word	0x0008	; ????
     154:	52 00       	.word	0x0052	; ????
     156:	08 00       	.word	0x0008	; ????
     158:	52 00       	.word	0x0052	; ????
     15a:	08 00       	.word	0x0008	; ????
     15c:	93 00       	.word	0x0093	; ????
     15e:	08 00       	.word	0x0008	; ????
     160:	52 00       	.word	0x0052	; ????
     162:	08 00       	.word	0x0008	; ????
     164:	52 00       	.word	0x0052	; ????
     166:	08 00       	.word	0x0008	; ????
     168:	83 00       	.word	0x0083	; ????
     16a:	08 00       	.word	0x0008	; ????
     16c:	52 00       	.word	0x0052	; ????
     16e:	08 00       	.word	0x0008	; ????
     170:	52 00       	.word	0x0052	; ????
     172:	08 00       	.word	0x0008	; ????
     174:	75 00       	.word	0x0075	; ????
     176:	08 00       	.word	0x0008	; ????
     178:	52 00       	.word	0x0052	; ????
     17a:	08 00       	.word	0x0008	; ????
     17c:	52 00       	.word	0x0052	; ????
     17e:	08 00       	.word	0x0008	; ????
     180:	7b 00       	.word	0x007b	; ????
     182:	08 00       	.word	0x0008	; ????
     184:	83 00       	.word	0x0083	; ????
     186:	08 00       	.word	0x0008	; ????
     188:	52 00       	.word	0x0052	; ????
     18a:	08 00       	.word	0x0008	; ????
     18c:	52 00       	.word	0x0052	; ????
     18e:	08 00       	.word	0x0008	; ????
     190:	a5 00       	.word	0x00a5	; ????
     192:	08 00       	.word	0x0008	; ????
     194:	52 00       	.word	0x0052	; ????
     196:	08 00       	.word	0x0008	; ????
     198:	52 00       	.word	0x0052	; ????
     19a:	08 00       	.word	0x0008	; ????
     19c:	93 00       	.word	0x0093	; ????
     19e:	08 00       	.word	0x0008	; ????
     1a0:	52 00       	.word	0x0052	; ????
     1a2:	08 00       	.word	0x0008	; ????
     1a4:	52 00       	.word	0x0052	; ????
     1a6:	08 00       	.word	0x0008	; ????
     1a8:	83 00       	.word	0x0083	; ????
     1aa:	08 00       	.word	0x0008	; ????
     1ac:	52 00       	.word	0x0052	; ????
     1ae:	08 00       	.word	0x0008	; ????
     1b0:	52 00       	.word	0x0052	; ????
     1b2:	08 00       	.word	0x0008	; ????
     1b4:	75 00       	.word	0x0075	; ????
     1b6:	fe ff       	.word	0xfffe	; ????
     1b8:	52 00       	.word	0x0052	; ????
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	52 00       	.word	0x0052	; ????
     1be:	08 00       	.word	0x0008	; ????
     1c0:	a5 00       	.word	0x00a5	; ????
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	52 00       	.word	0x0052	; ????
     1c6:	08 00       	.word	0x0008	; ????
     1c8:	52 00       	.word	0x0052	; ????
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	93 00       	.word	0x0093	; ????
     1ce:	08 00       	.word	0x0008	; ????
     1d0:	52 00       	.word	0x0052	; ????
     1d2:	08 00       	.word	0x0008	; ????
     1d4:	52 00       	.word	0x0052	; ????
     1d6:	08 00       	.word	0x0008	; ????
     1d8:	83 00       	.word	0x0083	; ????
     1da:	08 00       	.word	0x0008	; ????
     1dc:	52 00       	.word	0x0052	; ????
     1de:	08 00       	.word	0x0008	; ????
     1e0:	52 00       	.word	0x0052	; ????
     1e2:	08 00       	.word	0x0008	; ????
     1e4:	75 00       	.word	0x0075	; ????
     1e6:	08 00       	.word	0x0008	; ????
     1e8:	52 00       	.word	0x0052	; ????
     1ea:	08 00       	.word	0x0008	; ????
     1ec:	52 00       	.word	0x0052	; ????
     1ee:	08 00       	.word	0x0008	; ????
     1f0:	7b 00       	.word	0x007b	; ????
     1f2:	08 00       	.word	0x0008	; ????
     1f4:	83 00       	.word	0x0083	; ????
     1f6:	08 00       	.word	0x0008	; ????
     1f8:	52 00       	.word	0x0052	; ????
     1fa:	08 00       	.word	0x0008	; ????
     1fc:	52 00       	.word	0x0052	; ????
     1fe:	08 00       	.word	0x0008	; ????
     200:	a5 00       	.word	0x00a5	; ????
     202:	08 00       	.word	0x0008	; ????
     204:	52 00       	.word	0x0052	; ????
     206:	08 00       	.word	0x0008	; ????
     208:	52 00       	.word	0x0052	; ????
     20a:	08 00       	.word	0x0008	; ????
     20c:	93 00       	.word	0x0093	; ????
     20e:	08 00       	.word	0x0008	; ????
     210:	52 00       	.word	0x0052	; ????
     212:	08 00       	.word	0x0008	; ????
     214:	52 00       	.word	0x0052	; ????
     216:	08 00       	.word	0x0008	; ????
     218:	b9 00       	.word	0x00b9	; ????
     21a:	f0 ff       	sbrs	r31, 0
     21c:	93 00       	.word	0x0093	; ????
     21e:	f0 ff       	sbrs	r31, 0
     220:	7b 00       	.word	0x007b	; ????
     222:	f0 ff       	sbrs	r31, 0
     224:	dc 00       	.word	0x00dc	; ????
     226:	f0 ff       	sbrs	r31, 0
     228:	b9 00       	.word	0x00b9	; ????
     22a:	f0 ff       	sbrs	r31, 0
     22c:	7b 00       	.word	0x007b	; ????
     22e:	f0 ff       	sbrs	r31, 0
     230:	93 00       	.word	0x0093	; ????
     232:	f0 ff       	sbrs	r31, 0
     234:	b9 00       	.word	0x00b9	; ????
     236:	f0 ff       	sbrs	r31, 0
     238:	dc 00       	.word	0x00dc	; ????
     23a:	f0 ff       	sbrs	r31, 0
     23c:	b9 00       	.word	0x00b9	; ????
     23e:	f0 ff       	sbrs	r31, 0
     240:	93 00       	.word	0x0093	; ????
     242:	f0 ff       	sbrs	r31, 0
     244:	7b 00       	.word	0x007b	; ????
     246:	f0 ff       	sbrs	r31, 0
	...
     388:	b8 01       	movw	r22, r16
     38a:	04 00       	.word	0x0004	; ????
     38c:	b8 01       	movw	r22, r16
     38e:	04 00       	.word	0x0004	; ????
     390:	b8 01       	movw	r22, r16
     392:	04 00       	.word	0x0004	; ????
     394:	5d 01       	movw	r10, r26
     396:	f8 ff       	.word	0xfff8	; ????
     398:	0b 02       	muls	r16, r27
     39a:	10 00       	.word	0x0010	; ????
     39c:	b8 01       	movw	r22, r16
     39e:	04 00       	.word	0x0004	; ????
     3a0:	5d 01       	movw	r10, r26
     3a2:	f8 ff       	.word	0xfff8	; ????
     3a4:	0b 02       	muls	r16, r27
     3a6:	10 00       	.word	0x0010	; ????
     3a8:	b8 01       	movw	r22, r16
     3aa:	02 00       	.word	0x0002	; ????
     3ac:	93 02       	muls	r25, r19
     3ae:	04 00       	.word	0x0004	; ????
     3b0:	93 02       	muls	r25, r19
     3b2:	04 00       	.word	0x0004	; ????
     3b4:	93 02       	muls	r25, r19
     3b6:	04 00       	.word	0x0004	; ????
     3b8:	ba 02       	muls	r27, r26
     3ba:	f8 ff       	.word	0xfff8	; ????
     3bc:	0b 02       	muls	r16, r27
     3be:	10 00       	.word	0x0010	; ????
     3c0:	b8 01       	movw	r22, r16
     3c2:	04 00       	.word	0x0004	; ????
     3c4:	5d 01       	movw	r10, r26
     3c6:	f8 ff       	.word	0xfff8	; ????
     3c8:	0b 02       	muls	r16, r27
     3ca:	10 00       	.word	0x0010	; ????
     3cc:	b8 01       	movw	r22, r16
     3ce:	02 00       	.word	0x0002	; ????
     3d0:	70 03       	mulsu	r23, r16
     3d2:	04 00       	.word	0x0004	; ????
     3d4:	b8 01       	movw	r22, r16
     3d6:	f8 ff       	.word	0xfff8	; ????
     3d8:	b8 01       	movw	r22, r16
     3da:	10 00       	.word	0x0010	; ????
     3dc:	70 03       	mulsu	r23, r16
     3de:	04 00       	.word	0x0004	; ????
     3e0:	3f 03       	fmul	r19, r23
     3e2:	f8 ff       	.word	0xfff8	; ????
     3e4:	10 03       	mulsu	r17, r16
     3e6:	10 00       	.word	0x0010	; ????
     3e8:	6e 02       	muls	r22, r30
     3ea:	10 00       	.word	0x0010	; ????
     3ec:	4b 02       	muls	r20, r27
     3ee:	10 00       	.word	0x0010	; ????
     3f0:	6e 02       	muls	r22, r30
     3f2:	08 00       	.word	0x0008	; ????
     3f4:	00 00       	nop
     3f6:	08 00       	.word	0x0008	; ????
     3f8:	b8 01       	movw	r22, r16
     3fa:	08 00       	.word	0x0008	; ????
     3fc:	6e 02       	muls	r22, r30
     3fe:	04 00       	.word	0x0004	; ????
     400:	4b 02       	muls	r20, r27
     402:	f8 ff       	.word	0xfff8	; ????
     404:	2a 02       	muls	r18, r26
     406:	10 00       	.word	0x0010	; ????
     408:	0b 02       	muls	r16, r27
     40a:	10 00       	.word	0x0010	; ????
     40c:	ee 01       	movw	r28, r28
     40e:	10 00       	.word	0x0010	; ????
     410:	0b 02       	muls	r16, r27
     412:	10 00       	.word	0x0010	; ????
     414:	00 00       	nop
     416:	08 00       	.word	0x0008	; ????
     418:	5d 01       	movw	r10, r26
     41a:	08 00       	.word	0x0008	; ????
     41c:	9f 01       	movw	r18, r30
     41e:	04 00       	.word	0x0004	; ????
     420:	5d 01       	movw	r10, r26
     422:	f8 ff       	.word	0xfff8	; ????
     424:	b8 01       	movw	r22, r16
     426:	f0 ff       	sbrs	r31, 0
     428:	0b 02       	muls	r16, r27
     42a:	04 00       	.word	0x0004	; ????
     42c:	b8 01       	movw	r22, r16
     42e:	f8 ff       	.word	0xfff8	; ????
     430:	0b 02       	muls	r16, r27
     432:	10 00       	.word	0x0010	; ????
     434:	93 02       	muls	r25, r19
     436:	02 00       	.word	0x0002	; ????
     438:	70 03       	mulsu	r23, r16
     43a:	04 00       	.word	0x0004	; ????
     43c:	b8 01       	movw	r22, r16
     43e:	f8 ff       	.word	0xfff8	; ????
     440:	b8 01       	movw	r22, r16
     442:	10 00       	.word	0x0010	; ????
     444:	70 03       	mulsu	r23, r16
     446:	04 00       	.word	0x0004	; ????
     448:	3f 03       	fmul	r19, r23
     44a:	f8 ff       	.word	0xfff8	; ????
     44c:	10 03       	mulsu	r17, r16
     44e:	10 00       	.word	0x0010	; ????
     450:	6e 02       	muls	r22, r30
     452:	10 00       	.word	0x0010	; ????
     454:	4b 02       	muls	r20, r27
     456:	10 00       	.word	0x0010	; ????
     458:	6e 02       	muls	r22, r30
     45a:	08 00       	.word	0x0008	; ????
     45c:	00 00       	nop
     45e:	08 00       	.word	0x0008	; ????
     460:	b8 01       	movw	r22, r16
     462:	08 00       	.word	0x0008	; ????
     464:	6e 02       	muls	r22, r30
     466:	04 00       	.word	0x0004	; ????
     468:	4b 02       	muls	r20, r27
     46a:	f8 ff       	.word	0xfff8	; ????
     46c:	2a 02       	muls	r18, r26
     46e:	10 00       	.word	0x0010	; ????
     470:	0b 02       	muls	r16, r27
     472:	10 00       	.word	0x0010	; ????
     474:	ee 01       	movw	r28, r28
     476:	10 00       	.word	0x0010	; ????
     478:	0b 02       	muls	r16, r27
     47a:	10 00       	.word	0x0010	; ????
     47c:	00 00       	nop
     47e:	08 00       	.word	0x0008	; ????
     480:	5d 01       	movw	r10, r26
     482:	08 00       	.word	0x0008	; ????
     484:	9f 01       	movw	r18, r30
     486:	04 00       	.word	0x0004	; ????
     488:	5d 01       	movw	r10, r26
     48a:	f8 ff       	.word	0xfff8	; ????
     48c:	b8 01       	movw	r22, r16
     48e:	f0 ff       	sbrs	r31, 0
     490:	b8 01       	movw	r22, r16
     492:	04 00       	.word	0x0004	; ????
     494:	5d 01       	movw	r10, r26
     496:	f8 ff       	.word	0xfff8	; ????
     498:	0b 02       	muls	r16, r27
     49a:	10 00       	.word	0x0010	; ????
     49c:	b8 01       	movw	r22, r16
     49e:	02 00       	.word	0x0002	; ????
	...
     6a8:	88 01       	movw	r16, r16
     6aa:	08 00       	.word	0x0008	; ????
     6ac:	06 01       	movw	r0, r12
     6ae:	08 00       	.word	0x0008	; ????
     6b0:	37 01       	movw	r6, r14
     6b2:	10 00       	.word	0x0010	; ????
     6b4:	5d 01       	movw	r10, r26
     6b6:	10 00       	.word	0x0010	; ????
     6b8:	88 01       	movw	r16, r16
     6ba:	08 00       	.word	0x0008	; ????
     6bc:	06 01       	movw	r0, r12
     6be:	08 00       	.word	0x0008	; ????
     6c0:	37 01       	movw	r6, r14
     6c2:	10 00       	.word	0x0010	; ????
     6c4:	5d 01       	movw	r10, r26
     6c6:	10 00       	.word	0x0010	; ????
     6c8:	88 01       	movw	r16, r16
     6ca:	08 00       	.word	0x0008	; ????
     6cc:	06 01       	movw	r0, r12
     6ce:	08 00       	.word	0x0008	; ????
     6d0:	37 01       	movw	r6, r14
     6d2:	10 00       	.word	0x0010	; ????
     6d4:	5d 01       	movw	r10, r26
     6d6:	10 00       	.word	0x0010	; ????
     6d8:	88 01       	movw	r16, r16
     6da:	08 00       	.word	0x0008	; ????
     6dc:	06 01       	movw	r0, r12
     6de:	08 00       	.word	0x0008	; ????
     6e0:	37 01       	movw	r6, r14
     6e2:	10 00       	.word	0x0010	; ????
     6e4:	5d 01       	movw	r10, r26
     6e6:	10 00       	.word	0x0010	; ????
     6e8:	88 01       	movw	r16, r16
     6ea:	08 00       	.word	0x0008	; ????
     6ec:	06 01       	movw	r0, r12
     6ee:	08 00       	.word	0x0008	; ????
     6f0:	4a 01       	movw	r8, r20
     6f2:	10 00       	.word	0x0010	; ????
     6f4:	5d 01       	movw	r10, r26
     6f6:	10 00       	.word	0x0010	; ????
     6f8:	88 01       	movw	r16, r16
     6fa:	08 00       	.word	0x0008	; ????
     6fc:	06 01       	movw	r0, r12
     6fe:	08 00       	.word	0x0008	; ????
     700:	4a 01       	movw	r8, r20
     702:	10 00       	.word	0x0010	; ????
     704:	5d 01       	movw	r10, r26
     706:	10 00       	.word	0x0010	; ????
     708:	88 01       	movw	r16, r16
     70a:	08 00       	.word	0x0008	; ????
     70c:	06 01       	movw	r0, r12
     70e:	08 00       	.word	0x0008	; ????
     710:	4a 01       	movw	r8, r20
     712:	10 00       	.word	0x0010	; ????
     714:	5d 01       	movw	r10, r26
     716:	10 00       	.word	0x0010	; ????
     718:	88 01       	movw	r16, r16
     71a:	08 00       	.word	0x0008	; ????
     71c:	06 01       	movw	r0, r12
     71e:	08 00       	.word	0x0008	; ????
     720:	4a 01       	movw	r8, r20
     722:	10 00       	.word	0x0010	; ????
     724:	5d 01       	movw	r10, r26
     726:	10 00       	.word	0x0010	; ????
     728:	88 01       	movw	r16, r16
     72a:	fc ff       	.word	0xfffc	; ????
     72c:	06 01       	movw	r0, r12
     72e:	fc ff       	.word	0xfffc	; ????
     730:	37 01       	movw	r6, r14
     732:	10 00       	.word	0x0010	; ????
     734:	5d 01       	movw	r10, r26
     736:	10 00       	.word	0x0010	; ????
     738:	88 01       	movw	r16, r16
     73a:	04 00       	.word	0x0004	; ????
     73c:	06 01       	movw	r0, r12
     73e:	04 00       	.word	0x0004	; ????
     740:	37 01       	movw	r6, r14
     742:	10 00       	.word	0x0010	; ????
     744:	5d 01       	movw	r10, r26
     746:	10 00       	.word	0x0010	; ????
     748:	26 01       	movw	r4, r12
     74a:	ff ff       	.word	0xffff	; ????
     74c:	5d 01       	movw	r10, r26
     74e:	fc ff       	.word	0xfffc	; ????
     750:	e9 00       	.word	0x00e9	; ????
     752:	fc ff       	.word	0xfffc	; ????
     754:	37 01       	movw	r6, r14
     756:	10 00       	.word	0x0010	; ????
     758:	26 01       	movw	r4, r12
     75a:	10 00       	.word	0x0010	; ????
     75c:	5d 01       	movw	r10, r26
     75e:	04 00       	.word	0x0004	; ????
     760:	e9 00       	.word	0x00e9	; ????
     762:	fc ff       	.word	0xfffc	; ????
     764:	37 01       	movw	r6, r14
     766:	10 00       	.word	0x0010	; ????
     768:	26 01       	movw	r4, r12
     76a:	10 00       	.word	0x0010	; ????
     76c:	06 01       	movw	r0, r12
     76e:	ff ff       	.word	0xffff	; ????
     770:	88 01       	movw	r16, r16
     772:	fc ff       	.word	0xfffc	; ????
     774:	06 01       	movw	r0, r12
     776:	fc ff       	.word	0xfffc	; ????
     778:	37 01       	movw	r6, r14
     77a:	10 00       	.word	0x0010	; ????
     77c:	5d 01       	movw	r10, r26
     77e:	10 00       	.word	0x0010	; ????
     780:	88 01       	movw	r16, r16
     782:	04 00       	.word	0x0004	; ????
     784:	06 01       	movw	r0, r12
     786:	04 00       	.word	0x0004	; ????
     788:	37 01       	movw	r6, r14
     78a:	10 00       	.word	0x0010	; ????
     78c:	5d 01       	movw	r10, r26
     78e:	10 00       	.word	0x0010	; ????
     790:	26 01       	movw	r4, r12
     792:	ff ff       	.word	0xffff	; ????
     794:	5d 01       	movw	r10, r26
     796:	fc ff       	.word	0xfffc	; ????
     798:	e9 00       	.word	0x00e9	; ????
     79a:	fc ff       	.word	0xfffc	; ????
     79c:	37 01       	movw	r6, r14
     79e:	10 00       	.word	0x0010	; ????
     7a0:	26 01       	movw	r4, r12
     7a2:	10 00       	.word	0x0010	; ????
     7a4:	5d 01       	movw	r10, r26
     7a6:	04 00       	.word	0x0004	; ????
     7a8:	e9 00       	.word	0x00e9	; ????
     7aa:	fc ff       	.word	0xfffc	; ????
     7ac:	37 01       	movw	r6, r14
     7ae:	10 00       	.word	0x0010	; ????
     7b0:	26 01       	movw	r4, r12
     7b2:	10 00       	.word	0x0010	; ????
     7b4:	06 01       	movw	r0, r12
     7b6:	ff ff       	.word	0xffff	; ????
     7b8:	88 01       	movw	r16, r16
     7ba:	fc ff       	.word	0xfffc	; ????
     7bc:	06 01       	movw	r0, r12
     7be:	fc ff       	.word	0xfffc	; ????
     7c0:	37 01       	movw	r6, r14
     7c2:	10 00       	.word	0x0010	; ????
     7c4:	5d 01       	movw	r10, r26
     7c6:	10 00       	.word	0x0010	; ????
     7c8:	88 01       	movw	r16, r16
     7ca:	04 00       	.word	0x0004	; ????
     7cc:	06 01       	movw	r0, r12
     7ce:	04 00       	.word	0x0004	; ????
     7d0:	37 01       	movw	r6, r14
     7d2:	10 00       	.word	0x0010	; ????
     7d4:	5d 01       	movw	r10, r26
     7d6:	10 00       	.word	0x0010	; ????
     7d8:	26 01       	movw	r4, r12
     7da:	fe ff       	.word	0xfffe	; ????
     7dc:	5d 01       	movw	r10, r26
     7de:	fc ff       	.word	0xfffc	; ????
     7e0:	e9 00       	.word	0x00e9	; ????
     7e2:	fc ff       	.word	0xfffc	; ????
     7e4:	26 01       	movw	r4, r12
     7e6:	f8 ff       	.word	0xfff8	; ????
     7e8:	37 01       	movw	r6, r14
     7ea:	f8 ff       	.word	0xfff8	; ????
     7ec:	26 01       	movw	r4, r12
     7ee:	f8 ff       	.word	0xfff8	; ????
     7f0:	e9 00       	.word	0x00e9	; ????
     7f2:	f8 ff       	.word	0xfff8	; ????
     7f4:	06 01       	movw	r0, r12
     7f6:	ff ff       	.word	0xffff	; ????
     7f8:	0b 02       	muls	r16, r27
     7fa:	fe ff       	.word	0xfffe	; ????
     7fc:	d2 01       	movw	r26, r4
     7fe:	fe ff       	.word	0xfffe	; ????
     800:	06 01       	movw	r0, r12
     802:	fe ff       	.word	0xfffe	; ????
     804:	88 01       	movw	r16, r16
     806:	fe ff       	.word	0xfffe	; ????
     808:	37 01       	movw	r6, r14
     80a:	fe ff       	.word	0xfffe	; ????
     80c:	37 01       	movw	r6, r14
     80e:	fc ff       	.word	0xfffc	; ????
     810:	5d 01       	movw	r10, r26
     812:	fc ff       	.word	0xfffc	; ????
     814:	88 01       	movw	r16, r16
     816:	ff ff       	.word	0xffff	; ????
     818:	0b 02       	muls	r16, r27
     81a:	fe ff       	.word	0xfffe	; ????
     81c:	d2 01       	movw	r26, r4
     81e:	fe ff       	.word	0xfffe	; ????
     820:	06 01       	movw	r0, r12
     822:	fe ff       	.word	0xfffe	; ????
     824:	88 01       	movw	r16, r16
     826:	fe ff       	.word	0xfffe	; ????
     828:	37 01       	movw	r6, r14
     82a:	fe ff       	.word	0xfffe	; ????
     82c:	37 01       	movw	r6, r14
     82e:	fc ff       	.word	0xfffc	; ????
     830:	26 01       	movw	r4, r12
     832:	fc ff       	.word	0xfffc	; ????
     834:	0b 02       	muls	r16, r27
     836:	08 00       	.word	0x0008	; ????
     838:	88 01       	movw	r16, r16
     83a:	08 00       	.word	0x0008	; ????
     83c:	9f 01       	movw	r18, r30
     83e:	10 00       	.word	0x0010	; ????
     840:	d2 01       	movw	r26, r4
     842:	10 00       	.word	0x0010	; ????
     844:	0b 02       	muls	r16, r27
     846:	08 00       	.word	0x0008	; ????
     848:	88 01       	movw	r16, r16
     84a:	08 00       	.word	0x0008	; ????
     84c:	9f 01       	movw	r18, r30
     84e:	10 00       	.word	0x0010	; ????
     850:	d2 01       	movw	r26, r4
     852:	10 00       	.word	0x0010	; ????
     854:	0b 02       	muls	r16, r27
     856:	08 00       	.word	0x0008	; ????
     858:	88 01       	movw	r16, r16
     85a:	08 00       	.word	0x0008	; ????
     85c:	9f 01       	movw	r18, r30
     85e:	10 00       	.word	0x0010	; ????
     860:	d2 01       	movw	r26, r4
     862:	10 00       	.word	0x0010	; ????
     864:	0b 02       	muls	r16, r27
     866:	08 00       	.word	0x0008	; ????
     868:	88 01       	movw	r16, r16
     86a:	08 00       	.word	0x0008	; ????
     86c:	9f 01       	movw	r18, r30
     86e:	10 00       	.word	0x0010	; ????
     870:	d2 01       	movw	r26, r4
     872:	10 00       	.word	0x0010	; ????
     874:	00 00       	nop
     876:	04 00       	.word	0x0004	; ????
     878:	3f 03       	fmul	r19, r23
     87a:	10 00       	.word	0x0010	; ????
     87c:	a4 03       	fmuls	r18, r20
     87e:	10 00       	.word	0x0010	; ????
     880:	17 04       	cpc	r1, r7
     882:	08 00       	.word	0x0008	; ????
     884:	10 03       	mulsu	r17, r16
     886:	08 00       	.word	0x0008	; ????
     888:	3f 03       	fmul	r19, r23
     88a:	10 00       	.word	0x0010	; ????
     88c:	a4 03       	fmuls	r18, r20
     88e:	10 00       	.word	0x0010	; ????
     890:	17 04       	cpc	r1, r7
     892:	08 00       	.word	0x0008	; ????
     894:	10 03       	mulsu	r17, r16
     896:	10 00       	.word	0x0010	; ????
     898:	3f 03       	fmul	r19, r23
     89a:	10 00       	.word	0x0010	; ????
     89c:	a4 03       	fmuls	r18, r20
     89e:	10 00       	.word	0x0010	; ????
     8a0:	17 04       	cpc	r1, r7
     8a2:	08 00       	.word	0x0008	; ????
     8a4:	10 03       	mulsu	r17, r16
     8a6:	08 00       	.word	0x0008	; ????
     8a8:	3f 03       	fmul	r19, r23
     8aa:	10 00       	.word	0x0010	; ????
     8ac:	a4 03       	fmuls	r18, r20
     8ae:	10 00       	.word	0x0010	; ????
	...
     9c8:	4a 01       	movw	r8, r20
     9ca:	fc ff       	.word	0xfffc	; ????
     9cc:	00 00       	nop
     9ce:	08 00       	.word	0x0008	; ????
     9d0:	72 01       	movw	r14, r4
     9d2:	08 00       	.word	0x0008	; ????
     9d4:	88 01       	movw	r16, r16
     9d6:	fc ff       	.word	0xfffc	; ????
     9d8:	00 00       	nop
     9da:	08 00       	.word	0x0008	; ????
     9dc:	37 01       	movw	r6, r14
     9de:	08 00       	.word	0x0008	; ????
     9e0:	4a 01       	movw	r8, r20
     9e2:	f8 ff       	.word	0xfff8	; ????
     9e4:	72 01       	movw	r14, r4
     9e6:	08 00       	.word	0x0008	; ????
     9e8:	88 01       	movw	r16, r16
     9ea:	f8 ff       	.word	0xfff8	; ????
     9ec:	0b 02       	muls	r16, r27
     9ee:	08 00       	.word	0x0008	; ????
     9f0:	ee 01       	movw	r28, r28
     9f2:	f8 ff       	.word	0xfff8	; ????
     9f4:	4a 01       	movw	r8, r20
     9f6:	08 00       	.word	0x0008	; ????
     9f8:	88 01       	movw	r16, r16
     9fa:	f8 ff       	.word	0xfff8	; ????
     9fc:	ee 01       	movw	r28, r28
     9fe:	08 00       	.word	0x0008	; ????
     a00:	d2 01       	movw	r26, r4
     a02:	02 00       	.word	0x0002	; ????
     a04:	b8 01       	movw	r22, r16
     a06:	f0 ff       	sbrs	r31, 0
     a08:	88 01       	movw	r16, r16
     a0a:	f0 ff       	sbrs	r31, 0
     a0c:	4a 01       	movw	r8, r20
     a0e:	f0 ff       	sbrs	r31, 0
     a10:	26 01       	movw	r4, r12
     a12:	f0 ff       	sbrs	r31, 0
     a14:	4a 01       	movw	r8, r20
     a16:	02 00       	.word	0x0002	; ????
     a18:	00 00       	nop
     a1a:	04 00       	.word	0x0004	; ????
     a1c:	00 00       	nop
     a1e:	08 00       	.word	0x0008	; ????
     a20:	37 01       	movw	r6, r14
     a22:	04 00       	.word	0x0004	; ????
     a24:	4a 01       	movw	r8, r20
     a26:	fc ff       	.word	0xfffc	; ????
     a28:	00 00       	nop
     a2a:	08 00       	.word	0x0008	; ????
     a2c:	72 01       	movw	r14, r4
     a2e:	08 00       	.word	0x0008	; ????
     a30:	88 01       	movw	r16, r16
     a32:	fc ff       	.word	0xfffc	; ????
     a34:	00 00       	nop
     a36:	08 00       	.word	0x0008	; ????
     a38:	37 01       	movw	r6, r14
     a3a:	08 00       	.word	0x0008	; ????
     a3c:	4a 01       	movw	r8, r20
     a3e:	f8 ff       	.word	0xfff8	; ????
     a40:	72 01       	movw	r14, r4
     a42:	08 00       	.word	0x0008	; ????
     a44:	88 01       	movw	r16, r16
     a46:	f8 ff       	.word	0xfff8	; ????
     a48:	0b 02       	muls	r16, r27
     a4a:	08 00       	.word	0x0008	; ????
     a4c:	ee 01       	movw	r28, r28
     a4e:	f8 ff       	.word	0xfff8	; ????
     a50:	88 01       	movw	r16, r16
     a52:	08 00       	.word	0x0008	; ????
     a54:	ee 01       	movw	r28, r28
     a56:	f8 ff       	.word	0xfff8	; ????
     a58:	93 02       	muls	r25, r19
     a5a:	08 00       	.word	0x0008	; ????
     a5c:	6e 02       	muls	r22, r30
     a5e:	01 00       	.word	0x0001	; ????
     a60:	4b 02       	muls	r20, r27
     a62:	02 00       	.word	0x0002	; ????
     a64:	00 00       	nop
     a66:	04 00       	.word	0x0004	; ????
     a68:	00 00       	nop
     a6a:	08 00       	.word	0x0008	; ????
     a6c:	37 01       	movw	r6, r14
     a6e:	08 00       	.word	0x0008	; ????
     a70:	4a 01       	movw	r8, r20
     a72:	fc ff       	.word	0xfffc	; ????
     a74:	00 00       	nop
     a76:	08 00       	.word	0x0008	; ????
     a78:	72 01       	movw	r14, r4
     a7a:	08 00       	.word	0x0008	; ????
     a7c:	88 01       	movw	r16, r16
     a7e:	fc ff       	.word	0xfffc	; ????
     a80:	00 00       	nop
     a82:	08 00       	.word	0x0008	; ????
     a84:	37 01       	movw	r6, r14
     a86:	08 00       	.word	0x0008	; ????
     a88:	4a 01       	movw	r8, r20
     a8a:	f8 ff       	.word	0xfff8	; ????
     a8c:	72 01       	movw	r14, r4
     a8e:	08 00       	.word	0x0008	; ????
     a90:	88 01       	movw	r16, r16
     a92:	f8 ff       	.word	0xfff8	; ????
     a94:	0b 02       	muls	r16, r27
     a96:	08 00       	.word	0x0008	; ????
     a98:	ee 01       	movw	r28, r28
     a9a:	f8 ff       	.word	0xfff8	; ????
     a9c:	4a 01       	movw	r8, r20
     a9e:	08 00       	.word	0x0008	; ????
     aa0:	88 01       	movw	r16, r16
     aa2:	f8 ff       	.word	0xfff8	; ????
     aa4:	ee 01       	movw	r28, r28
     aa6:	08 00       	.word	0x0008	; ????
     aa8:	d2 01       	movw	r26, r4
     aaa:	02 00       	.word	0x0002	; ????
     aac:	b8 01       	movw	r22, r16
     aae:	f0 ff       	sbrs	r31, 0
     ab0:	88 01       	movw	r16, r16
     ab2:	f0 ff       	sbrs	r31, 0
     ab4:	4a 01       	movw	r8, r20
     ab6:	f0 ff       	sbrs	r31, 0
     ab8:	26 01       	movw	r4, r12
     aba:	f0 ff       	sbrs	r31, 0
     abc:	4a 01       	movw	r8, r20
     abe:	fc ff       	.word	0xfffc	; ????
     ac0:	00 00       	nop
     ac2:	04 00       	.word	0x0004	; ????
     ac4:	00 00       	nop
     ac6:	04 00       	.word	0x0004	; ????
     ac8:	93 02       	muls	r25, r19
     aca:	f8 ff       	.word	0xfff8	; ????
     acc:	4b 02       	muls	r20, r27
     ace:	08 00       	.word	0x0008	; ????
     ad0:	ee 01       	movw	r28, r28
     ad2:	f8 ff       	.word	0xfff8	; ????
     ad4:	b8 01       	movw	r22, r16
     ad6:	08 00       	.word	0x0008	; ????
     ad8:	88 01       	movw	r16, r16
     ada:	f8 ff       	.word	0xfff8	; ????
     adc:	4a 01       	movw	r8, r20
     ade:	f8 ff       	.word	0xfff8	; ????
     ae0:	d2 01       	movw	r26, r4
     ae2:	10 00       	.word	0x0010	; ????
     ae4:	b8 01       	movw	r22, r16
     ae6:	f8 ff       	.word	0xfff8	; ????
     ae8:	d2 01       	movw	r26, r4
     aea:	10 00       	.word	0x0010	; ????
     aec:	b8 01       	movw	r22, r16
     aee:	f8 ff       	.word	0xfff8	; ????
     af0:	d2 01       	movw	r26, r4
     af2:	10 00       	.word	0x0010	; ????
     af4:	b8 01       	movw	r22, r16
     af6:	f8 ff       	.word	0xfff8	; ????
     af8:	d2 01       	movw	r26, r4
     afa:	10 00       	.word	0x0010	; ????
     afc:	b8 01       	movw	r22, r16
     afe:	f8 ff       	.word	0xfff8	; ????
     b00:	88 01       	movw	r16, r16
     b02:	f0 ff       	sbrs	r31, 0
     b04:	4a 01       	movw	r8, r20
     b06:	f0 ff       	sbrs	r31, 0
     b08:	26 01       	movw	r4, r12
     b0a:	f0 ff       	sbrs	r31, 0
     b0c:	4a 01       	movw	r8, r20
     b0e:	10 00       	.word	0x0010	; ????
     b10:	4a 01       	movw	r8, r20
     b12:	10 00       	.word	0x0010	; ????
     b14:	4a 01       	movw	r8, r20
     b16:	02 00       	.word	0x0002	; ????
	...
     ce8:	00 00       	nop
     cea:	04 00       	.word	0x0004	; ????
     cec:	00 00       	nop
     cee:	08 00       	.word	0x0008	; ????
     cf0:	00 00       	nop
     cf2:	08 00       	.word	0x0008	; ????
     cf4:	00 00       	nop
     cf6:	08 00       	.word	0x0008	; ????
     cf8:	4a 01       	movw	r8, r20
     cfa:	08 00       	.word	0x0008	; ????
     cfc:	b8 01       	movw	r22, r16
     cfe:	08 00       	.word	0x0008	; ????
     d00:	0b 02       	muls	r16, r27
     d02:	08 00       	.word	0x0008	; ????
     d04:	ee 01       	movw	r28, r28
     d06:	08 00       	.word	0x0008	; ????
     d08:	b8 01       	movw	r22, r16
     d0a:	08 00       	.word	0x0008	; ????
     d0c:	0b 02       	muls	r16, r27
     d0e:	08 00       	.word	0x0008	; ????
     d10:	b8 01       	movw	r22, r16
     d12:	08 00       	.word	0x0008	; ????
     d14:	ee 01       	movw	r28, r28
     d16:	08 00       	.word	0x0008	; ????
     d18:	b8 01       	movw	r22, r16
     d1a:	08 00       	.word	0x0008	; ????
     d1c:	5d 01       	movw	r10, r26
     d1e:	08 00       	.word	0x0008	; ????
     d20:	88 01       	movw	r16, r16
     d22:	08 00       	.word	0x0008	; ????
     d24:	4a 01       	movw	r8, r20
     d26:	02 00       	.word	0x0002	; ????
     d28:	4a 01       	movw	r8, r20
     d2a:	08 00       	.word	0x0008	; ????
     d2c:	b8 01       	movw	r22, r16
     d2e:	08 00       	.word	0x0008	; ????
     d30:	0b 02       	muls	r16, r27
     d32:	08 00       	.word	0x0008	; ????
     d34:	ee 01       	movw	r28, r28
     d36:	08 00       	.word	0x0008	; ????
     d38:	b8 01       	movw	r22, r16
     d3a:	08 00       	.word	0x0008	; ????
     d3c:	0b 02       	muls	r16, r27
     d3e:	08 00       	.word	0x0008	; ????
     d40:	b8 01       	movw	r22, r16
     d42:	08 00       	.word	0x0008	; ????
     d44:	0b 02       	muls	r16, r27
     d46:	08 00       	.word	0x0008	; ????
     d48:	b8 01       	movw	r22, r16
     d4a:	08 00       	.word	0x0008	; ????
     d4c:	4a 01       	movw	r8, r20
     d4e:	08 00       	.word	0x0008	; ????
     d50:	37 01       	movw	r6, r14
     d52:	08 00       	.word	0x0008	; ????
     d54:	26 01       	movw	r4, r12
     d56:	02 00       	.word	0x0002	; ????
     d58:	26 01       	movw	r4, r12
     d5a:	08 00       	.word	0x0008	; ????
     d5c:	5d 01       	movw	r10, r26
     d5e:	08 00       	.word	0x0008	; ????
     d60:	9f 01       	movw	r18, r30
     d62:	08 00       	.word	0x0008	; ????
     d64:	ee 01       	movw	r28, r28
     d66:	02 00       	.word	0x0002	; ????
     d68:	26 01       	movw	r4, r12
     d6a:	08 00       	.word	0x0008	; ????
     d6c:	5d 01       	movw	r10, r26
     d6e:	08 00       	.word	0x0008	; ????
     d70:	9f 01       	movw	r18, r30
     d72:	08 00       	.word	0x0008	; ????
     d74:	b8 01       	movw	r22, r16
     d76:	02 00       	.word	0x0002	; ????
     d78:	06 01       	movw	r0, r12
     d7a:	08 00       	.word	0x0008	; ????
     d7c:	06 01       	movw	r0, r12
     d7e:	08 00       	.word	0x0008	; ????
     d80:	88 01       	movw	r16, r16
     d82:	08 00       	.word	0x0008	; ????
     d84:	5d 01       	movw	r10, r26
     d86:	08 00       	.word	0x0008	; ????
     d88:	4a 01       	movw	r8, r20
     d8a:	08 00       	.word	0x0008	; ????
     d8c:	88 01       	movw	r16, r16
     d8e:	08 00       	.word	0x0008	; ????
     d90:	5d 01       	movw	r10, r26
     d92:	08 00       	.word	0x0008	; ????
     d94:	5d 01       	movw	r10, r26
     d96:	08 00       	.word	0x0008	; ????
     d98:	4a 01       	movw	r8, r20
     d9a:	08 00       	.word	0x0008	; ????
     d9c:	4a 01       	movw	r8, r20
     d9e:	08 00       	.word	0x0008	; ????
     da0:	9f 01       	movw	r18, r30
     da2:	08 00       	.word	0x0008	; ????
     da4:	b8 01       	movw	r22, r16
     da6:	02 00       	.word	0x0002	; ????
     da8:	00 00       	nop
     daa:	08 00       	.word	0x0008	; ????
     dac:	b8 01       	movw	r22, r16
     dae:	08 00       	.word	0x0008	; ????
     db0:	b8 01       	movw	r22, r16
     db2:	08 00       	.word	0x0008	; ????
     db4:	9f 01       	movw	r18, r30
     db6:	08 00       	.word	0x0008	; ????
     db8:	88 01       	movw	r16, r16
     dba:	02 00       	.word	0x0002	; ????
     dbc:	ee 01       	movw	r28, r28
     dbe:	08 00       	.word	0x0008	; ????
     dc0:	b8 01       	movw	r22, r16
     dc2:	08 00       	.word	0x0008	; ????
     dc4:	5d 01       	movw	r10, r26
     dc6:	08 00       	.word	0x0008	; ????
     dc8:	4a 01       	movw	r8, r20
     dca:	02 00       	.word	0x0002	; ????
     dcc:	4a 01       	movw	r8, r20
     dce:	08 00       	.word	0x0008	; ????
     dd0:	88 01       	movw	r16, r16
     dd2:	08 00       	.word	0x0008	; ????
     dd4:	4a 01       	movw	r8, r20
     dd6:	08 00       	.word	0x0008	; ????
     dd8:	26 01       	movw	r4, r12
     dda:	02 00       	.word	0x0002	; ????
     ddc:	26 01       	movw	r4, r12
     dde:	08 00       	.word	0x0008	; ????
     de0:	26 01       	movw	r4, r12
     de2:	08 00       	.word	0x0008	; ????
     de4:	5d 01       	movw	r10, r26
     de6:	08 00       	.word	0x0008	; ????
     de8:	37 01       	movw	r6, r14
     dea:	08 00       	.word	0x0008	; ????
     dec:	4a 01       	movw	r8, r20
     dee:	02 00       	.word	0x0002	; ????
     df0:	00 00       	nop
     df2:	08 00       	.word	0x0008	; ????
     df4:	4a 01       	movw	r8, r20
     df6:	08 00       	.word	0x0008	; ????
     df8:	b8 01       	movw	r22, r16
     dfa:	08 00       	.word	0x0008	; ????
     dfc:	0b 02       	muls	r16, r27
     dfe:	08 00       	.word	0x0008	; ????
     e00:	ee 01       	movw	r28, r28
     e02:	08 00       	.word	0x0008	; ????
     e04:	b8 01       	movw	r22, r16
     e06:	08 00       	.word	0x0008	; ????
     e08:	0b 02       	muls	r16, r27
     e0a:	08 00       	.word	0x0008	; ????
     e0c:	b8 01       	movw	r22, r16
     e0e:	08 00       	.word	0x0008	; ????
     e10:	ee 01       	movw	r28, r28
     e12:	08 00       	.word	0x0008	; ????
     e14:	b8 01       	movw	r22, r16
     e16:	08 00       	.word	0x0008	; ????
     e18:	5d 01       	movw	r10, r26
     e1a:	08 00       	.word	0x0008	; ????
     e1c:	88 01       	movw	r16, r16
     e1e:	08 00       	.word	0x0008	; ????
     e20:	4a 01       	movw	r8, r20
     e22:	02 00       	.word	0x0002	; ????
     e24:	4a 01       	movw	r8, r20
     e26:	08 00       	.word	0x0008	; ????
     e28:	b8 01       	movw	r22, r16
     e2a:	08 00       	.word	0x0008	; ????
     e2c:	0b 02       	muls	r16, r27
     e2e:	08 00       	.word	0x0008	; ????
     e30:	ee 01       	movw	r28, r28
     e32:	08 00       	.word	0x0008	; ????
     e34:	b8 01       	movw	r22, r16
     e36:	08 00       	.word	0x0008	; ????
     e38:	0b 02       	muls	r16, r27
     e3a:	08 00       	.word	0x0008	; ????
     e3c:	b8 01       	movw	r22, r16
     e3e:	08 00       	.word	0x0008	; ????
     e40:	0b 02       	muls	r16, r27
     e42:	08 00       	.word	0x0008	; ????
     e44:	b8 01       	movw	r22, r16
     e46:	08 00       	.word	0x0008	; ????
     e48:	4a 01       	movw	r8, r20
     e4a:	08 00       	.word	0x0008	; ????
     e4c:	37 01       	movw	r6, r14
     e4e:	08 00       	.word	0x0008	; ????
     e50:	26 01       	movw	r4, r12
     e52:	02 00       	.word	0x0002	; ????
     e54:	26 01       	movw	r4, r12
     e56:	08 00       	.word	0x0008	; ????
     e58:	5d 01       	movw	r10, r26
     e5a:	08 00       	.word	0x0008	; ????
     e5c:	9f 01       	movw	r18, r30
     e5e:	08 00       	.word	0x0008	; ????
     e60:	ee 01       	movw	r28, r28
     e62:	02 00       	.word	0x0002	; ????
     e64:	26 01       	movw	r4, r12
     e66:	08 00       	.word	0x0008	; ????
     e68:	5d 01       	movw	r10, r26
     e6a:	08 00       	.word	0x0008	; ????
     e6c:	9f 01       	movw	r18, r30
     e6e:	08 00       	.word	0x0008	; ????
     e70:	b8 01       	movw	r22, r16
     e72:	02 00       	.word	0x0002	; ????
     e74:	06 01       	movw	r0, r12
     e76:	08 00       	.word	0x0008	; ????
     e78:	06 01       	movw	r0, r12
     e7a:	08 00       	.word	0x0008	; ????
     e7c:	88 01       	movw	r16, r16
     e7e:	08 00       	.word	0x0008	; ????
     e80:	5d 01       	movw	r10, r26
     e82:	08 00       	.word	0x0008	; ????
     e84:	4a 01       	movw	r8, r20
     e86:	08 00       	.word	0x0008	; ????
     e88:	88 01       	movw	r16, r16
     e8a:	08 00       	.word	0x0008	; ????
     e8c:	5d 01       	movw	r10, r26
     e8e:	08 00       	.word	0x0008	; ????
     e90:	5d 01       	movw	r10, r26
     e92:	08 00       	.word	0x0008	; ????
     e94:	4a 01       	movw	r8, r20
     e96:	08 00       	.word	0x0008	; ????
     e98:	4a 01       	movw	r8, r20
     e9a:	08 00       	.word	0x0008	; ????
     e9c:	9f 01       	movw	r18, r30
     e9e:	08 00       	.word	0x0008	; ????
     ea0:	b8 01       	movw	r22, r16
     ea2:	02 00       	.word	0x0002	; ????
     ea4:	00 00       	nop
     ea6:	08 00       	.word	0x0008	; ????
     ea8:	b8 01       	movw	r22, r16
     eaa:	08 00       	.word	0x0008	; ????
     eac:	b8 01       	movw	r22, r16
     eae:	08 00       	.word	0x0008	; ????
     eb0:	9f 01       	movw	r18, r30
     eb2:	08 00       	.word	0x0008	; ????
     eb4:	88 01       	movw	r16, r16
     eb6:	02 00       	.word	0x0002	; ????
     eb8:	ee 01       	movw	r28, r28
     eba:	08 00       	.word	0x0008	; ????
     ebc:	b8 01       	movw	r22, r16
     ebe:	08 00       	.word	0x0008	; ????
     ec0:	5d 01       	movw	r10, r26
     ec2:	08 00       	.word	0x0008	; ????
     ec4:	4a 01       	movw	r8, r20
     ec6:	02 00       	.word	0x0002	; ????
     ec8:	4a 01       	movw	r8, r20
     eca:	08 00       	.word	0x0008	; ????
     ecc:	88 01       	movw	r16, r16
     ece:	08 00       	.word	0x0008	; ????
     ed0:	4a 01       	movw	r8, r20
     ed2:	08 00       	.word	0x0008	; ????
     ed4:	26 01       	movw	r4, r12
     ed6:	02 00       	.word	0x0002	; ????
     ed8:	26 01       	movw	r4, r12
     eda:	08 00       	.word	0x0008	; ????
     edc:	26 01       	movw	r4, r12
     ede:	08 00       	.word	0x0008	; ????
     ee0:	5d 01       	movw	r10, r26
     ee2:	08 00       	.word	0x0008	; ????
     ee4:	37 01       	movw	r6, r14
     ee6:	08 00       	.word	0x0008	; ????
     ee8:	4a 01       	movw	r8, r20
     eea:	02 00       	.word	0x0002	; ????
	...

00001008 <__ctors_end>:
    1008:	11 24       	eor	r1, r1
    100a:	1f be       	out	0x3f, r1	; 63
    100c:	cf ef       	ldi	r28, 0xFF	; 255
    100e:	d8 e0       	ldi	r29, 0x08	; 8
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	cd bf       	out	0x3d, r28	; 61

00001014 <__do_copy_data>:
    1014:	11 e0       	ldi	r17, 0x01	; 1
    1016:	a0 e0       	ldi	r26, 0x00	; 0
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	e4 e0       	ldi	r30, 0x04	; 4
    101c:	f8 e2       	ldi	r31, 0x28	; 40
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <__do_copy_data+0x10>
    1020:	05 90       	lpm	r0, Z+
    1022:	0d 92       	st	X+, r0
    1024:	a0 3e       	cpi	r26, 0xE0	; 224
    1026:	b1 07       	cpc	r27, r17
    1028:	d9 f7       	brne	.-10     	; 0x1020 <__do_copy_data+0xc>

0000102a <__do_clear_bss>:
    102a:	22 e0       	ldi	r18, 0x02	; 2
    102c:	a0 ee       	ldi	r26, 0xE0	; 224
    102e:	b1 e0       	ldi	r27, 0x01	; 1
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <.do_clear_bss_start>

00001032 <.do_clear_bss_loop>:
    1032:	1d 92       	st	X+, r1

00001034 <.do_clear_bss_start>:
    1034:	ab 32       	cpi	r26, 0x2B	; 43
    1036:	b2 07       	cpc	r27, r18
    1038:	e1 f7       	brne	.-8      	; 0x1032 <.do_clear_bss_loop>
    103a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <main>
    103e:	0c 94 00 14 	jmp	0x2800	; 0x2800 <_exit>

00001042 <__bad_interrupt>:
    1042:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001046 <_Z7powerOfii>:
		return true;
	}
	else{
		return false;
	}
}
    1046:	9c 01       	movw	r18, r24
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	61 15       	cp	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	59 f0       	breq	.+22     	; 0x1068 <_Z7powerOfii+0x22>
    1052:	ac 01       	movw	r20, r24
    1054:	42 9f       	mul	r20, r18
    1056:	c0 01       	movw	r24, r0
    1058:	43 9f       	mul	r20, r19
    105a:	90 0d       	add	r25, r0
    105c:	52 9f       	mul	r21, r18
    105e:	90 0d       	add	r25, r0
    1060:	11 24       	eor	r1, r1
    1062:	61 50       	subi	r22, 0x01	; 1
    1064:	71 09       	sbc	r23, r1
    1066:	f2 cf       	rjmp	.-28     	; 0x104c <_Z7powerOfii+0x6>
    1068:	08 95       	ret

0000106a <_Z9ringAlarmv>:
void ringAlarm(){
	LCD_Clear();
    106a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_Z9LCD_Clearv>
	LCD_String("RING!!");
    106e:	8b e8       	ldi	r24, 0x8B	; 139
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	play(0);				//Trigger buzzer. Can be interrupted by the int1 button.
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <_Z4playi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    107e:	2f e7       	ldi	r18, 0x7F	; 127
    1080:	8a e1       	ldi	r24, 0x1A	; 26
    1082:	96 e0       	ldi	r25, 0x06	; 6
    1084:	21 50       	subi	r18, 0x01	; 1
    1086:	80 40       	sbci	r24, 0x00	; 0
    1088:	90 40       	sbci	r25, 0x00	; 0
    108a:	e1 f7       	brne	.-8      	; 0x1084 <_Z9ringAlarmv+0x1a>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <_Z9ringAlarmv+0x24>
    108e:	00 00       	nop
    1090:	08 95       	ret

00001092 <_Z8setAlarmi>:
	_delay_ms(2000);
}
void setAlarm(int alarm_time){
	if (alarm_time<2400){
    1092:	80 36       	cpi	r24, 0x60	; 96
    1094:	29 e0       	ldi	r18, 0x09	; 9
    1096:	92 07       	cpc	r25, r18
    1098:	8c f4       	brge	.+34     	; 0x10bc <_Z8setAlarmi+0x2a>
		alarmArray[numberOfAlarms] = alarm_time;
    109a:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <numberOfAlarms>
    109e:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <numberOfAlarms+0x1>
    10a2:	f9 01       	movw	r30, r18
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	e9 51       	subi	r30, 0x19	; 25
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
		numberOfAlarms++;
    10b0:	2f 5f       	subi	r18, 0xFF	; 255
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	30 93 fc 01 	sts	0x01FC, r19	; 0x8001fc <numberOfAlarms+0x1>
    10b8:	20 93 fb 01 	sts	0x01FB, r18	; 0x8001fb <numberOfAlarms>
    10bc:	08 95       	ret

000010be <_Z16updateAlarmArrayi>:
	}
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <numberOfAlarms>
    10c6:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <numberOfAlarms+0x1>
    10ca:	24 17       	cp	r18, r20
    10cc:	35 07       	cpc	r19, r21
    10ce:	ac f4       	brge	.+42     	; 0x10fa <_Z16updateAlarmArrayi+0x3c>
		if (i<removeAlarm){
    10d0:	28 17       	cp	r18, r24
    10d2:	39 07       	cpc	r19, r25
    10d4:	7c f0       	brlt	.+30     	; 0x10f4 <_Z16updateAlarmArrayi+0x36>
			alarmArray[i] = alarmArray[i];
		}
		else{
			alarmArray[i] = alarmArray[i+1];
    10d6:	f9 01       	movw	r30, r18
    10d8:	31 96       	adiw	r30, 0x01	; 1
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	e9 51       	subi	r30, 0x19	; 25
    10e0:	fe 4f       	sbci	r31, 0xFE	; 254
    10e2:	40 81       	ld	r20, Z
    10e4:	51 81       	ldd	r21, Z+1	; 0x01
    10e6:	f9 01       	movw	r30, r18
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	e9 51       	subi	r30, 0x19	; 25
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	51 83       	std	Z+1, r21	; 0x01
    10f2:	40 83       	st	Z, r20
		alarmArray[numberOfAlarms] = alarm_time;
		numberOfAlarms++;
	}
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
    10f4:	2f 5f       	subi	r18, 0xFF	; 255
    10f6:	3f 4f       	sbci	r19, 0xFF	; 255
    10f8:	e4 cf       	rjmp	.-56     	; 0x10c2 <_Z16updateAlarmArrayi+0x4>
    10fa:	08 95       	ret

000010fc <_Z10checkAlarmv>:
		else{
			alarmArray[i] = alarmArray[i+1];
		}
	}
}
void checkAlarm(){
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
	if (numberOfAlarms != 0){
    110c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <numberOfAlarms>
    1110:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <numberOfAlarms+0x1>
    1114:	89 2b       	or	r24, r25
    1116:	09 f4       	brne	.+2      	; 0x111a <_Z10checkAlarmv+0x1e>
    1118:	4e c0       	rjmp	.+156    	; 0x11b6 <_Z10checkAlarmv+0xba>
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
    111a:	0f 2e       	mov	r0, r31
    111c:	f0 ee       	ldi	r31, 0xE0	; 224
    111e:	cf 2e       	mov	r12, r31
    1120:	f1 e0       	ldi	r31, 0x01	; 1
    1122:	df 2e       	mov	r13, r31
    1124:	f0 2d       	mov	r31, r0
    1126:	0f 2e       	mov	r0, r31
    1128:	f1 ee       	ldi	r31, 0xE1	; 225
    112a:	ef 2e       	mov	r14, r31
    112c:	f1 e0       	ldi	r31, 0x01	; 1
    112e:	ff 2e       	mov	r15, r31
    1130:	f0 2d       	mov	r31, r0
    1132:	02 ee       	ldi	r16, 0xE2	; 226
    1134:	11 e0       	ldi	r17, 0x01	; 1
    1136:	23 ee       	ldi	r18, 0xE3	; 227
    1138:	31 e0       	ldi	r19, 0x01	; 1
    113a:	44 ee       	ldi	r20, 0xE4	; 228
    113c:	51 e0       	ldi	r21, 0x01	; 1
    113e:	65 ee       	ldi	r22, 0xE5	; 229
    1140:	71 e0       	ldi	r23, 0x01	; 1
    1142:	86 ee       	ldi	r24, 0xE6	; 230
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 4a 10 	call	0x2094	; 0x2094 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
		for (int i = 0; i <= numberOfAlarms;i++){
    114a:	c0 e0       	ldi	r28, 0x00	; 0
    114c:	d0 e0       	ldi	r29, 0x00	; 0
    114e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <numberOfAlarms>
    1152:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <numberOfAlarms+0x1>
    1156:	8c 17       	cp	r24, r28
    1158:	9d 07       	cpc	r25, r29
    115a:	6c f1       	brlt	.+90     	; 0x11b6 <_Z10checkAlarmv+0xba>
			if (alarmArray[i]/100 == hour && alarmArray[i]%100 == minute){
    115c:	fe 01       	movw	r30, r28
    115e:	ee 0f       	add	r30, r30
    1160:	ff 1f       	adc	r31, r31
    1162:	e9 51       	subi	r30, 0x19	; 25
    1164:	fe 4f       	sbci	r31, 0xFE	; 254
    1166:	20 81       	ld	r18, Z
    1168:	31 81       	ldd	r19, Z+1	; 0x01
    116a:	c9 01       	movw	r24, r18
    116c:	64 e6       	ldi	r22, 0x64	; 100
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	0e 94 a3 13 	call	0x2746	; 0x2746 <__divmodhi4>
    1174:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <hour>
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	68 17       	cp	r22, r24
    117c:	79 07       	cpc	r23, r25
    117e:	c9 f4       	brne	.+50     	; 0x11b2 <_Z10checkAlarmv+0xb6>
    1180:	c9 01       	movw	r24, r18
    1182:	64 e6       	ldi	r22, 0x64	; 100
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	0e 94 a3 13 	call	0x2746	; 0x2746 <__divmodhi4>
    118a:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <minute>
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	82 17       	cp	r24, r18
    1192:	93 07       	cpc	r25, r19
    1194:	71 f4       	brne	.+28     	; 0x11b2 <_Z10checkAlarmv+0xb6>
				ringAlarm();
    1196:	0e 94 35 08 	call	0x106a	; 0x106a <_Z9ringAlarmv>
				updateAlarmArray(i);
    119a:	ce 01       	movw	r24, r28
    119c:	0e 94 5f 08 	call	0x10be	; 0x10be <_Z16updateAlarmArrayi>
				numberOfAlarms--;
    11a0:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <numberOfAlarms>
    11a4:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <numberOfAlarms+0x1>
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <numberOfAlarms+0x1>
    11ae:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <numberOfAlarms>
	}
}
void checkAlarm(){
	if (numberOfAlarms != 0){
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
		for (int i = 0; i <= numberOfAlarms;i++){
    11b2:	21 96       	adiw	r28, 0x01	; 1
    11b4:	cc cf       	rjmp	.-104    	; 0x114e <_Z10checkAlarmv+0x52>
				numberOfAlarms--;
			}
		}
		
	}
}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	08 95       	ret

000011c8 <_Z6getDayiii>:
	int s = clockTime[5];
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	ec 01       	movw	r28, r24
	int days = 0;
	for (int i = 1;i<=y;i++){
    11ce:	21 e0       	ldi	r18, 0x01	; 1
    11d0:	30 e0       	ldi	r19, 0x00	; 0
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
    11d2:	e0 e0       	ldi	r30, 0x00	; 0
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 1;i<=y;i++){
    11d6:	c2 17       	cp	r28, r18
    11d8:	d3 07       	cpc	r29, r19
    11da:	6c f0       	brlt	.+26     	; 0x11f6 <_Z6getDayiii+0x2e>
		if (i%4 == 0){
    11dc:	c9 01       	movw	r24, r18
    11de:	83 70       	andi	r24, 0x03	; 3
    11e0:	99 27       	eor	r25, r25
    11e2:	89 2b       	or	r24, r25
    11e4:	19 f4       	brne	.+6      	; 0x11ec <_Z6getDayiii+0x24>
			days+= 366;
    11e6:	e2 59       	subi	r30, 0x92	; 146
    11e8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <_Z6getDayiii+0x28>
		}
		else{
			days+= 365;
    11ec:	e3 59       	subi	r30, 0x93	; 147
    11ee:	fe 4f       	sbci	r31, 0xFE	; 254
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
	for (int i = 1;i<=y;i++){
    11f0:	2f 5f       	subi	r18, 0xFF	; 255
    11f2:	3f 4f       	sbci	r19, 0xFF	; 255
    11f4:	f0 cf       	rjmp	.-32     	; 0x11d6 <_Z6getDayiii+0xe>
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
    11fa:	db 01       	movw	r26, r22
    11fc:	11 97       	sbiw	r26, 0x01	; 1
    11fe:	2a 17       	cp	r18, r26
    1200:	3b 07       	cpc	r19, r27
    1202:	3c f5       	brge	.+78     	; 0x1252 <_Z6getDayiii+0x8a>
		if ((y%4==0) & (j == 1)){
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	de 01       	movw	r26, r28
    1208:	a3 70       	andi	r26, 0x03	; 3
    120a:	bb 27       	eor	r27, r27
    120c:	ab 2b       	or	r26, r27
    120e:	09 f0       	breq	.+2      	; 0x1212 <_Z6getDayiii+0x4a>
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	99 23       	and	r25, r25
    1214:	91 f0       	breq	.+36     	; 0x123a <_Z6getDayiii+0x72>
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	21 30       	cpi	r18, 0x01	; 1
    121a:	31 05       	cpc	r19, r1
    121c:	09 f0       	breq	.+2      	; 0x1220 <_Z6getDayiii+0x58>
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	99 23       	and	r25, r25
    1222:	59 f0       	breq	.+22     	; 0x123a <_Z6getDayiii+0x72>
			days+=monthsDays[j];
    1224:	d9 01       	movw	r26, r18
    1226:	aa 0f       	add	r26, r26
    1228:	bb 1f       	adc	r27, r27
    122a:	a0 50       	subi	r26, 0x00	; 0
    122c:	bf 4f       	sbci	r27, 0xFF	; 255
    122e:	8d 91       	ld	r24, X+
    1230:	9c 91       	ld	r25, X
    1232:	e8 0f       	add	r30, r24
    1234:	f9 1f       	adc	r31, r25
			days+=1;
    1236:	31 96       	adiw	r30, 0x01	; 1
    1238:	09 c0       	rjmp	.+18     	; 0x124c <_Z6getDayiii+0x84>
		}
		else{
			days +=monthsDays[j];
    123a:	d9 01       	movw	r26, r18
    123c:	aa 0f       	add	r26, r26
    123e:	bb 1f       	adc	r27, r27
    1240:	a0 50       	subi	r26, 0x00	; 0
    1242:	bf 4f       	sbci	r27, 0xFF	; 255
    1244:	8d 91       	ld	r24, X+
    1246:	9c 91       	ld	r25, X
    1248:	e8 0f       	add	r30, r24
    124a:	f9 1f       	adc	r31, r25
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
    124c:	2f 5f       	subi	r18, 0xFF	; 255
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	d4 cf       	rjmp	.-88     	; 0x11fa <_Z6getDayiii+0x32>
		}
		else{
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
    1252:	4e 0f       	add	r20, r30
    1254:	5f 1f       	adc	r21, r31
    1256:	ca 01       	movw	r24, r20
    1258:	05 96       	adiw	r24, 0x05	; 5
    125a:	67 e0       	ldi	r22, 0x07	; 7
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	0e 94 a3 13 	call	0x2746	; 0x2746 <__divmodhi4>
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <_Z12setClockTimePi>:
			}
		}
		
	}
}
void setClockTime(int clockTime[6]){
    1268:	6f 92       	push	r6
    126a:	7f 92       	push	r7
    126c:	8f 92       	push	r8
    126e:	9f 92       	push	r9
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
	int y = clockTime[0];
    1286:	88 80       	ld	r8, Y
    1288:	99 80       	ldd	r9, Y+1	; 0x01
	int m = clockTime[1];
    128a:	aa 80       	ldd	r10, Y+2	; 0x02
    128c:	bb 80       	ldd	r11, Y+3	; 0x03
	int d = clockTime[2];
    128e:	6c 80       	ldd	r6, Y+4	; 0x04
    1290:	7d 80       	ldd	r7, Y+5	; 0x05
	int D = getDay(y,m,d);
    1292:	a3 01       	movw	r20, r6
    1294:	b5 01       	movw	r22, r10
    1296:	c4 01       	movw	r24, r8
    1298:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_Z6getDayiii>
	int h = clockTime[3];
    129c:	0e 81       	ldd	r16, Y+6	; 0x06
    129e:	1f 81       	ldd	r17, Y+7	; 0x07
	int M = clockTime[4];
    12a0:	e8 84       	ldd	r14, Y+8	; 0x08
    12a2:	f9 84       	ldd	r15, Y+9	; 0x09
	int s = clockTime[5];
    12a4:	ca 84       	ldd	r12, Y+10	; 0x0a
    12a6:	db 84       	ldd	r13, Y+11	; 0x0b
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
    12a8:	94 01       	movw	r18, r8
    12aa:	21 50       	subi	r18, 0x01	; 1
    12ac:	31 09       	sbc	r19, r1
    12ae:	c1 e0       	ldi	r28, 0x01	; 1
    12b0:	22 36       	cpi	r18, 0x62	; 98
    12b2:	31 05       	cpc	r19, r1
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <_Z12setClockTimePi+0x50>
    12b6:	c0 e0       	ldi	r28, 0x00	; 0
    12b8:	21 e0       	ldi	r18, 0x01	; 1
    12ba:	1a 14       	cp	r1, r10
    12bc:	1b 04       	cpc	r1, r11
    12be:	0c f0       	brlt	.+2      	; 0x12c2 <_Z12setClockTimePi+0x5a>
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	9d e0       	ldi	r25, 0x0D	; 13
    12c6:	a9 16       	cp	r10, r25
    12c8:	b1 04       	cpc	r11, r1
    12ca:	0c f0       	brlt	.+2      	; 0x12ce <_Z12setClockTimePi+0x66>
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	71 e0       	ldi	r23, 0x01	; 1
    12d0:	16 14       	cp	r1, r6
    12d2:	17 04       	cpc	r1, r7
    12d4:	0c f0       	brlt	.+2      	; 0x12d8 <_Z12setClockTimePi+0x70>
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	51 e0       	ldi	r21, 0x01	; 1
    12da:	90 e2       	ldi	r25, 0x20	; 32
    12dc:	69 16       	cp	r6, r25
    12de:	71 04       	cpc	r7, r1
    12e0:	0c f0       	brlt	.+2      	; 0x12e4 <_Z12setClockTimePi+0x7c>
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	31 2f       	mov	r19, r17
    12e6:	30 95       	com	r19
    12e8:	33 1f       	adc	r19, r19
    12ea:	33 27       	eor	r19, r19
    12ec:	33 1f       	adc	r19, r19
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	08 31       	cpi	r16, 0x18	; 24
    12f2:	11 05       	cpc	r17, r1
    12f4:	0c f0       	brlt	.+2      	; 0x12f8 <_Z12setClockTimePi+0x90>
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	af 2d       	mov	r26, r15
    12fa:	a0 95       	com	r26
    12fc:	aa 1f       	adc	r26, r26
    12fe:	aa 27       	eor	r26, r26
    1300:	aa 1f       	adc	r26, r26
    1302:	b1 e0       	ldi	r27, 0x01	; 1
    1304:	9c e3       	ldi	r25, 0x3C	; 60
    1306:	e9 16       	cp	r14, r25
    1308:	f1 04       	cpc	r15, r1
    130a:	0c f0       	brlt	.+2      	; 0x130e <_Z12setClockTimePi+0xa6>
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	9d 2d       	mov	r25, r13
    1310:	90 95       	com	r25
    1312:	e9 2f       	mov	r30, r25
    1314:	ee 1f       	adc	r30, r30
    1316:	ee 27       	eor	r30, r30
    1318:	ee 1f       	adc	r30, r30
    131a:	f1 e0       	ldi	r31, 0x01	; 1
    131c:	9c e3       	ldi	r25, 0x3C	; 60
    131e:	c9 16       	cp	r12, r25
    1320:	d1 04       	cpc	r13, r1
    1322:	0c f0       	brlt	.+2      	; 0x1326 <_Z12setClockTimePi+0xbe>
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	2c 23       	and	r18, r28
    1328:	62 23       	and	r22, r18
    132a:	67 23       	and	r22, r23
    132c:	56 23       	and	r21, r22
    132e:	95 2f       	mov	r25, r21
    1330:	93 23       	and	r25, r19
    1332:	49 23       	and	r20, r25
    1334:	4a 23       	and	r20, r26
    1336:	94 2f       	mov	r25, r20
    1338:	9b 23       	and	r25, r27
    133a:	9e 23       	and	r25, r30
    133c:	41 f0       	breq	.+16     	; 0x134e <_Z12setClockTimePi+0xe6>
    133e:	ff 23       	and	r31, r31
    1340:	31 f0       	breq	.+12     	; 0x134e <_Z12setClockTimePi+0xe6>
		ds1307_setdate(y, m, d, D, h, M, s);
    1342:	28 2f       	mov	r18, r24
    1344:	46 2d       	mov	r20, r6
    1346:	6a 2d       	mov	r22, r10
    1348:	88 2d       	mov	r24, r8
    134a:	0e 94 09 10 	call	0x2012	; 0x2012 <_Z14ds1307_setdatehhhhhhh>
	}
}
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	bf 90       	pop	r11
    1360:	af 90       	pop	r10
    1362:	9f 90       	pop	r9
    1364:	8f 90       	pop	r8
    1366:	7f 90       	pop	r7
    1368:	6f 90       	pop	r6
    136a:	08 95       	ret

0000136c <_Z11displayZeroh>:
		}
	}
	return (days+d+5)%7;
}
void displayZero(uint8_t digit){
	if (digit<10){
    136c:	8a 30       	cpi	r24, 0x0A	; 10
    136e:	20 f4       	brcc	.+8      	; 0x1378 <_Z11displayZeroh+0xc>
		LCD_String("0");
    1370:	84 ea       	ldi	r24, 0xA4	; 164
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
    1378:	08 95       	ret

0000137a <_Z11displayTimev>:
	}
}
void displayTime(){
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	ec 97       	sbiw	r28, 0x3c	; 60
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
	ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
    139a:	0f 2e       	mov	r0, r31
    139c:	f0 ee       	ldi	r31, 0xE0	; 224
    139e:	cf 2e       	mov	r12, r31
    13a0:	f1 e0       	ldi	r31, 0x01	; 1
    13a2:	df 2e       	mov	r13, r31
    13a4:	f0 2d       	mov	r31, r0
    13a6:	0f 2e       	mov	r0, r31
    13a8:	f1 ee       	ldi	r31, 0xE1	; 225
    13aa:	ef 2e       	mov	r14, r31
    13ac:	f1 e0       	ldi	r31, 0x01	; 1
    13ae:	ff 2e       	mov	r15, r31
    13b0:	f0 2d       	mov	r31, r0
    13b2:	02 ee       	ldi	r16, 0xE2	; 226
    13b4:	11 e0       	ldi	r17, 0x01	; 1
    13b6:	23 ee       	ldi	r18, 0xE3	; 227
    13b8:	31 e0       	ldi	r19, 0x01	; 1
    13ba:	44 ee       	ldi	r20, 0xE4	; 228
    13bc:	51 e0       	ldi	r21, 0x01	; 1
    13be:	65 ee       	ldi	r22, 0xE5	; 229
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	86 ee       	ldi	r24, 0xE6	; 230
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	0e 94 4a 10 	call	0x2094	; 0x2094 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
	char secondS[10];char minuteS[10];char hourS[10];char yearS[10];char monthS[10];char dayS[10];
	itoa(second,secondS,10);itoa(minute,minuteS,10);itoa(hour,hourS,10);itoa(year,yearS,10);itoa(month,monthS,10);itoa(day,dayS,10);
    13ca:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    13ce:	4a e0       	ldi	r20, 0x0A	; 10
    13d0:	be 01       	movw	r22, r28
    13d2:	6f 5f       	subi	r22, 0xFF	; 255
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 cb 13 	call	0x2796	; 0x2796 <__itoa_ncheck>
    13dc:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <minute>
    13e0:	4a e0       	ldi	r20, 0x0A	; 10
    13e2:	be 01       	movw	r22, r28
    13e4:	65 5f       	subi	r22, 0xF5	; 245
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 cb 13 	call	0x2796	; 0x2796 <__itoa_ncheck>
    13ee:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <hour>
    13f2:	4a e0       	ldi	r20, 0x0A	; 10
    13f4:	be 01       	movw	r22, r28
    13f6:	6b 5e       	subi	r22, 0xEB	; 235
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 cb 13 	call	0x2796	; 0x2796 <__itoa_ncheck>
    1400:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <year>
    1404:	4a e0       	ldi	r20, 0x0A	; 10
    1406:	be 01       	movw	r22, r28
    1408:	61 5e       	subi	r22, 0xE1	; 225
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 cb 13 	call	0x2796	; 0x2796 <__itoa_ncheck>
    1412:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <month>
    1416:	4a e0       	ldi	r20, 0x0A	; 10
    1418:	be 01       	movw	r22, r28
    141a:	67 5d       	subi	r22, 0xD7	; 215
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 cb 13 	call	0x2796	; 0x2796 <__itoa_ncheck>
    1424:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <day>
    1428:	4a e0       	ldi	r20, 0x0A	; 10
    142a:	be 01       	movw	r22, r28
    142c:	6d 5c       	subi	r22, 0xCD	; 205
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 cb 13 	call	0x2796	; 0x2796 <__itoa_ncheck>
	LCD_Home(0);LCD_String("   20");
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
    143e:	82 e9       	ldi	r24, 0x92	; 146
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	displayZero(year);LCD_String(yearS);LCD_String("-");
    1446:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <year>
    144a:	0e 94 b6 09 	call	0x136c	; 0x136c <_Z11displayZeroh>
    144e:	ce 01       	movw	r24, r28
    1450:	4f 96       	adiw	r24, 0x1f	; 31
    1452:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
    1456:	88 e9       	ldi	r24, 0x98	; 152
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	displayZero(month);LCD_String(monthS);LCD_String("-");
    145e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <month>
    1462:	0e 94 b6 09 	call	0x136c	; 0x136c <_Z11displayZeroh>
    1466:	ce 01       	movw	r24, r28
    1468:	89 96       	adiw	r24, 0x29	; 41
    146a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
    146e:	88 e9       	ldi	r24, 0x98	; 152
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	displayZero(day);LCD_String(dayS);
    1476:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <day>
    147a:	0e 94 b6 09 	call	0x136c	; 0x136c <_Z11displayZeroh>
    147e:	ce 01       	movw	r24, r28
    1480:	c3 96       	adiw	r24, 0x33	; 51
    1482:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	LCD_Home(1);LCD_String("    ");
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
    148e:	8a e9       	ldi	r24, 0x9A	; 154
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	displayZero(hour);
    1496:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <hour>
    149a:	0e 94 b6 09 	call	0x136c	; 0x136c <_Z11displayZeroh>
	LCD_String(hourS);
    149e:	ce 01       	movw	r24, r28
    14a0:	45 96       	adiw	r24, 0x15	; 21
    14a2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	LCD_String(":");
    14a6:	8f e9       	ldi	r24, 0x9F	; 159
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	displayZero(minute);
    14ae:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <minute>
    14b2:	0e 94 b6 09 	call	0x136c	; 0x136c <_Z11displayZeroh>
	LCD_String(minuteS);
    14b6:	ce 01       	movw	r24, r28
    14b8:	0b 96       	adiw	r24, 0x0b	; 11
    14ba:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	LCD_String(":");
    14be:	8f e9       	ldi	r24, 0x9F	; 159
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	displayZero(second);
    14c6:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
    14ca:	0e 94 b6 09 	call	0x136c	; 0x136c <_Z11displayZeroh>
	LCD_String(secondS);
    14ce:	ce 01       	movw	r24, r28
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	//_delay_ms(1);

    14d6:	ec 96       	adiw	r28, 0x3c	; 60
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	df 90       	pop	r13
    14f0:	cf 90       	pop	r12
    14f2:	08 95       	ret

000014f4 <_Z11init_buzzerv>:
    14f4:	84 b1       	in	r24, 0x04	; 4
    14f6:	84 60       	ori	r24, 0x04	; 4
    14f8:	84 b9       	out	0x04, r24	; 4
    14fa:	e9 e6       	ldi	r30, 0x69	; 105
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	83 60       	ori	r24, 0x03	; 3
    1502:	80 83       	st	Z, r24
    1504:	8d b3       	in	r24, 0x1d	; 29
    1506:	81 60       	ori	r24, 0x01	; 1
    1508:	8d bb       	out	0x1d, r24	; 29
    150a:	78 94       	sei
    150c:	08 95       	ret

0000150e <_Z9Play_Noteff>:
    150e:	4f 92       	push	r4
    1510:	5f 92       	push	r5
    1512:	6f 92       	push	r6
    1514:	7f 92       	push	r7
    1516:	8f 92       	push	r8
    1518:	9f 92       	push	r9
    151a:	af 92       	push	r10
    151c:	bf 92       	push	r11
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	00 d0       	rcall	.+0      	; 0x152c <_Z9Play_Noteff+0x1e>
    152c:	00 d0       	rcall	.+0      	; 0x152e <_Z9Play_Noteff+0x20>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	6b 01       	movw	r12, r22
    1534:	7c 01       	movw	r14, r24
    1536:	49 01       	movw	r8, r18
    1538:	5a 01       	movw	r10, r20
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	a9 01       	movw	r20, r18
    1540:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__cmpsf2>
    1544:	88 23       	and	r24, r24
    1546:	09 f4       	brne	.+2      	; 0x154a <_Z9Play_Noteff+0x3c>
    1548:	ad c0       	rjmp	.+346    	; 0x16a4 <_Z9Play_Noteff+0x196>
    154a:	a7 01       	movw	r20, r14
    154c:	96 01       	movw	r18, r12
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	80 e8       	ldi	r24, 0x80	; 128
    1554:	9f e3       	ldi	r25, 0x3F	; 63
    1556:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__divsf3>
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	4a e7       	ldi	r20, 0x7A	; 122
    1560:	54 e4       	ldi	r21, 0x44	; 68
    1562:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    1566:	6b 01       	movw	r12, r22
    1568:	7c 01       	movw	r14, r24
    156a:	9b 01       	movw	r18, r22
    156c:	ac 01       	movw	r20, r24
    156e:	c5 01       	movw	r24, r10
    1570:	b4 01       	movw	r22, r8
    1572:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__divsf3>
    1576:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixsfsi>
    157a:	2b 01       	movw	r4, r22
    157c:	3c 01       	movw	r6, r24
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	5f e3       	ldi	r21, 0x3F	; 63
    1586:	c7 01       	movw	r24, r14
    1588:	b6 01       	movw	r22, r12
    158a:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    158e:	69 83       	std	Y+1, r22	; 0x01
    1590:	7a 83       	std	Y+2, r23	; 0x02
    1592:	8b 83       	std	Y+3, r24	; 0x03
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	81 2c       	mov	r8, r1
    1598:	91 2c       	mov	r9, r1
    159a:	54 01       	movw	r10, r8
    159c:	84 14       	cp	r8, r4
    159e:	95 04       	cpc	r9, r5
    15a0:	a6 04       	cpc	r10, r6
    15a2:	b7 04       	cpc	r11, r7
    15a4:	0c f0       	brlt	.+2      	; 0x15a8 <_Z9Play_Noteff+0x9a>
    15a6:	b8 c0       	rjmp	.+368    	; 0x1718 <_Z9Play_Noteff+0x20a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4a e7       	ldi	r20, 0x7A	; 122
    15ae:	53 e4       	ldi	r21, 0x43	; 67
    15b0:	69 81       	ldd	r22, Y+1	; 0x01
    15b2:	7a 81       	ldd	r23, Y+2	; 0x02
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    15bc:	6b 01       	movw	r12, r22
    15be:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__cmpsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f1       	brlt	.+74     	; 0x161a <_Z9Play_Noteff+0x10c>
		__ticks = 1;
	else if (__tmp > 65535)
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	3f ef       	ldi	r19, 0xFF	; 255
    15d4:	4f e7       	ldi	r20, 0x7F	; 127
    15d6:	57 e4       	ldi	r21, 0x47	; 71
    15d8:	c7 01       	movw	r24, r14
    15da:	b6 01       	movw	r22, r12
    15dc:	0e 94 31 13 	call	0x2662	; 0x2662 <__gesf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	b4 f4       	brge	.+44     	; 0x1610 <_Z9Play_Noteff+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e2       	ldi	r20, 0x20	; 32
    15ea:	51 e4       	ldi	r21, 0x41	; 65
    15ec:	69 81       	ldd	r22, Y+1	; 0x01
    15ee:	7a 81       	ldd	r23, Y+2	; 0x02
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    15f8:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__fixunssfsi>
		while(__ticks)
    15fc:	61 15       	cp	r22, r1
    15fe:	71 05       	cpc	r23, r1
    1600:	89 f0       	breq	.+34     	; 0x1624 <_Z9Play_Noteff+0x116>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1602:	89 e1       	ldi	r24, 0x19	; 25
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <_Z9Play_Noteff+0xf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	61 50       	subi	r22, 0x01	; 1
    160c:	71 09       	sbc	r23, r1
    160e:	f6 cf       	rjmp	.-20     	; 0x15fc <_Z9Play_Noteff+0xee>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1610:	c7 01       	movw	r24, r14
    1612:	b6 01       	movw	r22, r12
    1614:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__fixunssfsi>
    1618:	02 c0       	rjmp	.+4      	; 0x161e <_Z9Play_Noteff+0x110>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	cb 01       	movw	r24, r22
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <_Z9Play_Noteff+0x112>
    1624:	85 b1       	in	r24, 0x05	; 5
    1626:	84 60       	ori	r24, 0x04	; 4
    1628:	85 b9       	out	0x05, r24	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	c7 01       	movw	r24, r14
    1634:	b6 01       	movw	r22, r12
    1636:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__cmpsf2>
    163a:	88 23       	and	r24, r24
    163c:	2c f1       	brlt	.+74     	; 0x1688 <_Z9Play_Noteff+0x17a>
		__ticks = 1;
	else if (__tmp > 65535)
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	3f ef       	ldi	r19, 0xFF	; 255
    1642:	4f e7       	ldi	r20, 0x7F	; 127
    1644:	57 e4       	ldi	r21, 0x47	; 71
    1646:	c7 01       	movw	r24, r14
    1648:	b6 01       	movw	r22, r12
    164a:	0e 94 31 13 	call	0x2662	; 0x2662 <__gesf2>
    164e:	18 16       	cp	r1, r24
    1650:	b4 f4       	brge	.+44     	; 0x167e <_Z9Play_Noteff+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	69 81       	ldd	r22, Y+1	; 0x01
    165c:	7a 81       	ldd	r23, Y+2	; 0x02
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    1666:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__fixunssfsi>
		while(__ticks)
    166a:	61 15       	cp	r22, r1
    166c:	71 05       	cpc	r23, r1
    166e:	89 f0       	breq	.+34     	; 0x1692 <_Z9Play_Noteff+0x184>
    1670:	89 e1       	ldi	r24, 0x19	; 25
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <_Z9Play_Noteff+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1678:	61 50       	subi	r22, 0x01	; 1
    167a:	71 09       	sbc	r23, r1
    167c:	f6 cf       	rjmp	.-20     	; 0x166a <_Z9Play_Noteff+0x15c>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	c7 01       	movw	r24, r14
    1680:	b6 01       	movw	r22, r12
    1682:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__fixunssfsi>
    1686:	02 c0       	rjmp	.+4      	; 0x168c <_Z9Play_Noteff+0x17e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	cb 01       	movw	r24, r22
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <_Z9Play_Noteff+0x180>
    1692:	85 b1       	in	r24, 0x05	; 5
    1694:	8b 7f       	andi	r24, 0xFB	; 251
    1696:	85 b9       	out	0x05, r24	; 5
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	88 1a       	sub	r8, r24
    169c:	98 0a       	sbc	r9, r24
    169e:	a8 0a       	sbc	r10, r24
    16a0:	b8 0a       	sbc	r11, r24
    16a2:	7c cf       	rjmp	.-264    	; 0x159c <_Z9Play_Noteff+0x8e>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a e7       	ldi	r20, 0x7A	; 122
    16aa:	53 e4       	ldi	r21, 0x43	; 67
    16ac:	c5 01       	movw	r24, r10
    16ae:	b4 01       	movw	r22, r8
    16b0:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    16b4:	6b 01       	movw	r12, r22
    16b6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__cmpsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	1c f1       	brlt	.+70     	; 0x170e <_Z9Play_Noteff+0x200>
		__ticks = 1;
	else if (__tmp > 65535)
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	c7 01       	movw	r24, r14
    16d2:	b6 01       	movw	r22, r12
    16d4:	0e 94 31 13 	call	0x2662	; 0x2662 <__gesf2>
    16d8:	18 16       	cp	r1, r24
    16da:	a4 f4       	brge	.+40     	; 0x1704 <_Z9Play_Noteff+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	c5 01       	movw	r24, r10
    16e6:	b4 01       	movw	r22, r8
    16e8:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    16ec:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__fixunssfsi>
		while(__ticks)
    16f0:	61 15       	cp	r22, r1
    16f2:	71 05       	cpc	r23, r1
    16f4:	89 f0       	breq	.+34     	; 0x1718 <_Z9Play_Noteff+0x20a>
    16f6:	89 e1       	ldi	r24, 0x19	; 25
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <_Z9Play_Noteff+0x1ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	61 50       	subi	r22, 0x01	; 1
    1700:	71 09       	sbc	r23, r1
    1702:	f6 cf       	rjmp	.-20     	; 0x16f0 <_Z9Play_Noteff+0x1e2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1704:	c7 01       	movw	r24, r14
    1706:	b6 01       	movw	r22, r12
    1708:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__fixunssfsi>
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <_Z9Play_Noteff+0x204>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	cb 01       	movw	r24, r22
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <_Z9Play_Noteff+0x206>
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	df 90       	pop	r13
    172a:	cf 90       	pop	r12
    172c:	bf 90       	pop	r11
    172e:	af 90       	pop	r10
    1730:	9f 90       	pop	r9
    1732:	8f 90       	pop	r8
    1734:	7f 90       	pop	r7
    1736:	6f 90       	pop	r6
    1738:	5f 90       	pop	r5
    173a:	4f 90       	pop	r4
    173c:	08 95       	ret

0000173e <__vector_1>:
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <sp+0x1>
    1750:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <sp>
    1754:	88 ea       	ldi	r24, 0xA8	; 168
    1756:	91 e6       	ldi	r25, 0x61	; 97
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <__vector_1+0x1a>
    175c:	9f 91       	pop	r25
    175e:	8f 91       	pop	r24
    1760:	0f 90       	pop	r0
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	0f 90       	pop	r0
    1766:	1f 90       	pop	r1
    1768:	18 95       	reti

0000176a <_Z11tempochoosei>:
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	41 f0       	breq	.+16     	; 0x177e <_Z11tempochoosei+0x14>
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	91 05       	cpc	r25, r1
    1772:	41 f0       	breq	.+16     	; 0x1784 <_Z11tempochoosei+0x1a>
    1774:	02 97       	sbiw	r24, 0x02	; 2
    1776:	49 f4       	brne	.+18     	; 0x178a <_Z11tempochoosei+0x20>
    1778:	85 e5       	ldi	r24, 0x55	; 85
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	08 95       	ret
    177e:	81 ee       	ldi	r24, 0xE1	; 225
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	08 95       	ret
    1784:	88 e7       	ldi	r24, 0x78	; 120
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	08 95       	ret
    178a:	88 e7       	ldi	r24, 0x78	; 120
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	08 95       	ret

00001790 <_Z4playi>:
    1790:	2f 92       	push	r2
    1792:	3f 92       	push	r3
    1794:	4f 92       	push	r4
    1796:	5f 92       	push	r5
    1798:	6f 92       	push	r6
    179a:	7f 92       	push	r7
    179c:	8f 92       	push	r8
    179e:	9f 92       	push	r9
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <_Z4playi+0x26>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <_Z4playi+0x28>
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	1c 01       	movw	r2, r24
    17be:	0e 94 b5 0b 	call	0x176a	; 0x176a <_Z11tempochoosei>
    17c2:	bc 01       	movw	r22, r24
    17c4:	99 0f       	add	r25, r25
    17c6:	88 0b       	sbc	r24, r24
    17c8:	99 0b       	sbc	r25, r25
    17ca:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
    17ce:	9b 01       	movw	r18, r22
    17d0:	ac 01       	movw	r20, r24
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	7c e7       	ldi	r23, 0x7C	; 124
    17d6:	82 e1       	ldi	r24, 0x12	; 18
    17d8:	98 e4       	ldi	r25, 0x48	; 72
    17da:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__divsf3>
    17de:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixsfsi>
    17e2:	7a 83       	std	Y+2, r23	; 0x02
    17e4:	69 83       	std	Y+1, r22	; 0x01
    17e6:	1c 82       	std	Y+4, r1	; 0x04
    17e8:	1b 82       	std	Y+3, r1	; 0x03
    17ea:	e1 2c       	mov	r14, r1
    17ec:	f1 2c       	mov	r15, r1
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	80 39       	cpi	r24, 0x90	; 144
    17f4:	91 40       	sbci	r25, 0x01	; 1
    17f6:	0c f0       	brlt	.+2      	; 0x17fa <_Z4playi+0x6a>
    17f8:	ad c0       	rjmp	.+346    	; 0x1954 <_Z4playi+0x1c4>
    17fa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sp>
    17fe:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <sp+0x1>
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	09 f0       	breq	.+2      	; 0x1808 <_Z4playi+0x78>
    1806:	a2 c0       	rjmp	.+324    	; 0x194c <_Z4playi+0x1bc>
    1808:	80 e2       	ldi	r24, 0x20	; 32
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	28 9e       	mul	r2, r24
    180e:	80 01       	movw	r16, r0
    1810:	29 9e       	mul	r2, r25
    1812:	10 0d       	add	r17, r0
    1814:	38 9e       	mul	r3, r24
    1816:	10 0d       	add	r17, r0
    1818:	11 24       	eor	r1, r1
    181a:	08 59       	subi	r16, 0x98	; 152
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	cb 80       	ldd	r12, Y+3	; 0x03
    1820:	dc 80       	ldd	r13, Y+4	; 0x04
    1822:	f6 01       	movw	r30, r12
    1824:	31 96       	adiw	r30, 0x01	; 1
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	e0 0f       	add	r30, r16
    182c:	f1 1f       	adc	r31, r17
    182e:	65 91       	lpm	r22, Z+
    1830:	74 91       	lpm	r23, Z
    1832:	16 16       	cp	r1, r22
    1834:	17 06       	cpc	r1, r23
    1836:	34 f4       	brge	.+12     	; 0x1844 <_Z4playi+0xb4>
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	0e 94 a3 13 	call	0x2746	; 0x2746 <__divmodhi4>
    1840:	7b 01       	movw	r14, r22
    1842:	1c c0       	rjmp	.+56     	; 0x187c <_Z4playi+0xec>
    1844:	77 23       	and	r23, r23
    1846:	bc f4       	brge	.+46     	; 0x1876 <_Z4playi+0xe6>
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	0e 94 a3 13 	call	0x2746	; 0x2746 <__divmodhi4>
    1850:	07 2e       	mov	r0, r23
    1852:	00 0c       	add	r0, r0
    1854:	88 0b       	sbc	r24, r24
    1856:	99 0b       	sbc	r25, r25
    1858:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 ec       	ldi	r20, 0xC0	; 192
    1862:	5f e3       	ldi	r21, 0x3F	; 63
    1864:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    1868:	0e 94 49 12 	call	0x2492	; 0x2492 <__fixsfsi>
    186c:	ee 24       	eor	r14, r14
    186e:	ff 24       	eor	r15, r15
    1870:	e6 1a       	sub	r14, r22
    1872:	f7 0a       	sbc	r15, r23
    1874:	03 c0       	rjmp	.+6      	; 0x187c <_Z4playi+0xec>
    1876:	67 2b       	or	r22, r23
    1878:	09 f4       	brne	.+2      	; 0x187c <_Z4playi+0xec>
    187a:	6c c0       	rjmp	.+216    	; 0x1954 <_Z4playi+0x1c4>
    187c:	b7 01       	movw	r22, r14
    187e:	0f 2c       	mov	r0, r15
    1880:	00 0c       	add	r0, r0
    1882:	88 0b       	sbc	r24, r24
    1884:	99 0b       	sbc	r25, r25
    1886:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
    188a:	2b 01       	movw	r4, r22
    188c:	3c 01       	movw	r6, r24
    188e:	26 e6       	ldi	r18, 0x66	; 102
    1890:	36 e6       	ldi	r19, 0x66	; 102
    1892:	46 e6       	ldi	r20, 0x66	; 102
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    189a:	4b 01       	movw	r8, r22
    189c:	5c 01       	movw	r10, r24
    189e:	f6 01       	movw	r30, r12
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	e0 0f       	add	r30, r16
    18a6:	f1 1f       	adc	r31, r17
    18a8:	65 91       	lpm	r22, Z+
    18aa:	74 91       	lpm	r23, Z
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__floatunsisf>
    18b4:	a5 01       	movw	r20, r10
    18b6:	94 01       	movw	r18, r8
    18b8:	0e 94 87 0a 	call	0x150e	; 0x150e <_Z9Play_Noteff>
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	c3 01       	movw	r24, r6
    18c6:	b2 01       	movw	r22, r4
    18c8:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    18cc:	2b 01       	movw	r4, r22
    18ce:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a e7       	ldi	r20, 0x7A	; 122
    18d6:	53 e4       	ldi	r21, 0x43	; 67
    18d8:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    18dc:	4b 01       	movw	r8, r22
    18de:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__cmpsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	1c f1       	brlt	.+70     	; 0x1936 <_Z4playi+0x1a6>
		__ticks = 1;
	else if (__tmp > 65535)
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	3f ef       	ldi	r19, 0xFF	; 255
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	57 e4       	ldi	r21, 0x47	; 71
    18f8:	c5 01       	movw	r24, r10
    18fa:	b4 01       	movw	r22, r8
    18fc:	0e 94 31 13 	call	0x2662	; 0x2662 <__gesf2>
    1900:	18 16       	cp	r1, r24
    1902:	a4 f4       	brge	.+40     	; 0x192c <_Z4playi+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e2       	ldi	r20, 0x20	; 32
    190a:	51 e4       	ldi	r21, 0x41	; 65
    190c:	c3 01       	movw	r24, r6
    190e:	b2 01       	movw	r22, r4
    1910:	0e 94 36 13 	call	0x266c	; 0x266c <__mulsf3>
    1914:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__fixunssfsi>
		while(__ticks)
    1918:	61 15       	cp	r22, r1
    191a:	71 05       	cpc	r23, r1
    191c:	89 f0       	breq	.+34     	; 0x1940 <_Z4playi+0x1b0>
    191e:	89 e1       	ldi	r24, 0x19	; 25
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <_Z4playi+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	61 50       	subi	r22, 0x01	; 1
    1928:	71 09       	sbc	r23, r1
    192a:	f6 cf       	rjmp	.-20     	; 0x1918 <_Z4playi+0x188>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	c5 01       	movw	r24, r10
    192e:	b4 01       	movw	r22, r8
    1930:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__fixunssfsi>
    1934:	02 c0       	rjmp	.+4      	; 0x193a <_Z4playi+0x1aa>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	cb 01       	movw	r24, r22
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <_Z4playi+0x1ac>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	02 96       	adiw	r24, 0x02	; 2
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
    194a:	51 cf       	rjmp	.-350    	; 0x17ee <_Z4playi+0x5e>
    194c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <sp+0x1>
    1950:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <sp>
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	bf 90       	pop	r11
    196e:	af 90       	pop	r10
    1970:	9f 90       	pop	r9
    1972:	8f 90       	pop	r8
    1974:	7f 90       	pop	r7
    1976:	6f 90       	pop	r6
    1978:	5f 90       	pop	r5
    197a:	4f 90       	pop	r4
    197c:	3f 90       	pop	r3
    197e:	2f 90       	pop	r2
    1980:	08 95       	ret

00001982 <_Z11LCD_Commandh>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
    1982:	95 b1       	in	r25, 0x05	; 5
    1984:	9f 70       	andi	r25, 0x0F	; 15
    1986:	28 2f       	mov	r18, r24
    1988:	20 7f       	andi	r18, 0xF0	; 240
    198a:	92 2b       	or	r25, r18
    198c:	95 b9       	out	0x05, r25	; 5
    198e:	95 b1       	in	r25, 0x05	; 5
    1990:	9e 7f       	andi	r25, 0xFE	; 254
    1992:	95 b9       	out	0x05, r25	; 5
    1994:	95 b1       	in	r25, 0x05	; 5
    1996:	92 60       	ori	r25, 0x02	; 2
    1998:	95 b9       	out	0x05, r25	; 5
    199a:	00 00       	nop
    199c:	95 b1       	in	r25, 0x05	; 5
    199e:	9d 7f       	andi	r25, 0xFD	; 253
    19a0:	95 b9       	out	0x05, r25	; 5
    19a2:	32 e4       	ldi	r19, 0x42	; 66
    19a4:	3a 95       	dec	r19
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <_Z11LCD_Commandh+0x22>
    19a8:	00 c0       	rjmp	.+0      	; 0x19aa <_Z11LCD_Commandh+0x28>
    19aa:	25 b1       	in	r18, 0x05	; 5
    19ac:	30 e1       	ldi	r19, 0x10	; 16
    19ae:	83 9f       	mul	r24, r19
    19b0:	c0 01       	movw	r24, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	92 2f       	mov	r25, r18
    19b6:	9f 70       	andi	r25, 0x0F	; 15
    19b8:	89 2b       	or	r24, r25
    19ba:	85 b9       	out	0x05, r24	; 5
    19bc:	85 b1       	in	r24, 0x05	; 5
    19be:	82 60       	ori	r24, 0x02	; 2
    19c0:	85 b9       	out	0x05, r24	; 5
    19c2:	00 00       	nop
    19c4:	85 b1       	in	r24, 0x05	; 5
    19c6:	8d 7f       	andi	r24, 0xFD	; 253
    19c8:	85 b9       	out	0x05, r24	; 5
    19ca:	83 ef       	ldi	r24, 0xF3	; 243
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <_Z11LCD_Commandh+0x4c>
    19d2:	00 c0       	rjmp	.+0      	; 0x19d4 <_Z11LCD_Commandh+0x52>
    19d4:	00 00       	nop
    19d6:	08 95       	ret

000019d8 <_Z8LCD_Charh>:
    19d8:	95 b1       	in	r25, 0x05	; 5
    19da:	9f 70       	andi	r25, 0x0F	; 15
    19dc:	28 2f       	mov	r18, r24
    19de:	20 7f       	andi	r18, 0xF0	; 240
    19e0:	92 2b       	or	r25, r18
    19e2:	95 b9       	out	0x05, r25	; 5
    19e4:	95 b1       	in	r25, 0x05	; 5
    19e6:	91 60       	ori	r25, 0x01	; 1
    19e8:	95 b9       	out	0x05, r25	; 5
    19ea:	95 b1       	in	r25, 0x05	; 5
    19ec:	92 60       	ori	r25, 0x02	; 2
    19ee:	95 b9       	out	0x05, r25	; 5
    19f0:	00 00       	nop
    19f2:	95 b1       	in	r25, 0x05	; 5
    19f4:	9d 7f       	andi	r25, 0xFD	; 253
    19f6:	95 b9       	out	0x05, r25	; 5
    19f8:	32 e4       	ldi	r19, 0x42	; 66
    19fa:	3a 95       	dec	r19
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <_Z8LCD_Charh+0x22>
    19fe:	00 c0       	rjmp	.+0      	; 0x1a00 <_Z8LCD_Charh+0x28>
    1a00:	25 b1       	in	r18, 0x05	; 5
    1a02:	30 e1       	ldi	r19, 0x10	; 16
    1a04:	83 9f       	mul	r24, r19
    1a06:	c0 01       	movw	r24, r0
    1a08:	11 24       	eor	r1, r1
    1a0a:	92 2f       	mov	r25, r18
    1a0c:	9f 70       	andi	r25, 0x0F	; 15
    1a0e:	89 2b       	or	r24, r25
    1a10:	85 b9       	out	0x05, r24	; 5
    1a12:	85 b1       	in	r24, 0x05	; 5
    1a14:	82 60       	ori	r24, 0x02	; 2
    1a16:	85 b9       	out	0x05, r24	; 5
    1a18:	00 00       	nop
    1a1a:	85 b1       	in	r24, 0x05	; 5
    1a1c:	8d 7f       	andi	r24, 0xFD	; 253
    1a1e:	85 b9       	out	0x05, r24	; 5
    1a20:	83 ef       	ldi	r24, 0xF3	; 243
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <_Z8LCD_Charh+0x4c>
    1a28:	00 c0       	rjmp	.+0      	; 0x1a2a <_Z8LCD_Charh+0x52>
    1a2a:	00 00       	nop
    1a2c:	08 95       	ret

00001a2e <_Z8LCD_Initv>:
    1a2e:	8f ef       	ldi	r24, 0xFF	; 255
    1a30:	84 b9       	out	0x04, r24	; 4
    1a32:	87 e8       	ldi	r24, 0x87	; 135
    1a34:	93 e1       	ldi	r25, 0x13	; 19
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <_Z8LCD_Initv+0x8>
    1a3a:	00 c0       	rjmp	.+0      	; 0x1a3c <_Z8LCD_Initv+0xe>
    1a3c:	00 00       	nop
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z11LCD_Commandh>
    1a44:	88 e2       	ldi	r24, 0x28	; 40
    1a46:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z11LCD_Commandh>
    1a4a:	8c e0       	ldi	r24, 0x0C	; 12
    1a4c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z11LCD_Commandh>
    1a50:	86 e0       	ldi	r24, 0x06	; 6
    1a52:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z11LCD_Commandh>
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z11LCD_Commandh>
    1a5c:	83 ef       	ldi	r24, 0xF3	; 243
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <_Z8LCD_Initv+0x32>
    1a64:	00 c0       	rjmp	.+0      	; 0x1a66 <_Z8LCD_Initv+0x38>
    1a66:	00 00       	nop
    1a68:	08 95       	ret

00001a6a <_Z10LCD_StringPc>:
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	8c 01       	movw	r16, r24
    1a74:	c0 e0       	ldi	r28, 0x00	; 0
    1a76:	d0 e0       	ldi	r29, 0x00	; 0
    1a78:	f8 01       	movw	r30, r16
    1a7a:	ec 0f       	add	r30, r28
    1a7c:	fd 1f       	adc	r31, r29
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 23       	and	r24, r24
    1a82:	21 f0       	breq	.+8      	; 0x1a8c <_Z10LCD_StringPc+0x22>
    1a84:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_Z8LCD_Charh>
    1a88:	21 96       	adiw	r28, 0x01	; 1
    1a8a:	f6 cf       	rjmp	.-20     	; 0x1a78 <_Z10LCD_StringPc+0xe>
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

00001a96 <_Z9LCD_Clearv>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z11LCD_Commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a9c:	83 ef       	ldi	r24, 0xF3	; 243
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <_Z9LCD_Clearv+0xa>
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <_Z9LCD_Clearv+0x10>
    1aa6:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    1aa8:	80 e8       	ldi	r24, 0x80	; 128
    1aaa:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z11LCD_Commandh>
    1aae:	08 95       	ret

00001ab0 <_Z8LCD_Homei>:
}
void LCD_Home(int r){
	if(r==0){
    1ab0:	89 2b       	or	r24, r25
    1ab2:	21 f4       	brne	.+8      	; 0x1abc <_Z8LCD_Homei+0xc>
		LCD_Command (0x80);
    1ab4:	80 e8       	ldi	r24, 0x80	; 128
    1ab6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z11LCD_Commandh>
    1aba:	08 95       	ret
	}
	else{
		LCD_Command (0xC0);
    1abc:	80 ec       	ldi	r24, 0xC0	; 192
    1abe:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_Z11LCD_Commandh>
    1ac2:	08 95       	ret

00001ac4 <_Z12LCD_SetAlarmci>:

int clkTime = 0;
int num = 0;
signed int p = 3;
char clkTimeS[10];
void LCD_SetAlarm(char key,int state){
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	c8 2f       	mov	r28, r24
    1ace:	8b 01       	movw	r16, r22
	LCD_Home(0);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
	if (clkTime==0){
    1ad8:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <clkTime>
    1adc:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <clkTime+0x1>
    1ae0:	89 2b       	or	r24, r25
    1ae2:	21 f4       	brne	.+8      	; 0x1aec <_Z12LCD_SetAlarmci+0x28>
		LCD_String("0000");
    1ae4:	81 ea       	ldi	r24, 0xA1	; 161
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	}
	//LCD_String("0000");
	if (int(key)>47 & int(key)<58 & state ==2 & p!=-1){
    1aec:	21 e0       	ldi	r18, 0x01	; 1
    1aee:	90 ed       	ldi	r25, 0xD0	; 208
    1af0:	9c 0f       	add	r25, r28
    1af2:	9a 30       	cpi	r25, 0x0A	; 10
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <_Z12LCD_SetAlarmci+0x34>
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	02 30       	cpi	r16, 0x02	; 2
    1afc:	11 05       	cpc	r17, r1
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <_Z12LCD_SetAlarmci+0x3e>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <p>
    1b08:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <p+0x1>
    1b0c:	4f 3f       	cpi	r20, 0xFF	; 255
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <_Z12LCD_SetAlarmci+0x50>
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	82 23       	and	r24, r18
    1b16:	e9 f1       	breq	.+122    	; 0x1b92 <_Z12LCD_SetAlarmci+0xce>
    1b18:	99 23       	and	r25, r25
    1b1a:	d9 f1       	breq	.+118    	; 0x1b92 <_Z12LCD_SetAlarmci+0xce>
		LCD_Home(0);
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
		clkTime += (int(key)-48)*powerOf(10,p);
    1b24:	d0 e0       	ldi	r29, 0x00	; 0
    1b26:	e0 97       	sbiw	r28, 0x30	; 48
    1b28:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <p>
    1b2c:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <p+0x1>
    1b30:	8a e0       	ldi	r24, 0x0A	; 10
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 23 08 	call	0x1046	; 0x1046 <_Z7powerOfii>
    1b38:	9c 01       	movw	r18, r24
    1b3a:	c2 9f       	mul	r28, r18
    1b3c:	c0 01       	movw	r24, r0
    1b3e:	c3 9f       	mul	r28, r19
    1b40:	90 0d       	add	r25, r0
    1b42:	d2 9f       	mul	r29, r18
    1b44:	90 0d       	add	r25, r0
    1b46:	11 24       	eor	r1, r1
    1b48:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <clkTime>
    1b4c:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <clkTime+0x1>
    1b50:	82 0f       	add	r24, r18
    1b52:	93 1f       	adc	r25, r19
    1b54:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <clkTime+0x1>
    1b58:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <clkTime>
    1b5c:	4a e0       	ldi	r20, 0x0A	; 10
    1b5e:	6d e1       	ldi	r22, 0x1D	; 29
    1b60:	72 e0       	ldi	r23, 0x02	; 2
    1b62:	0e 94 cb 13 	call	0x2796	; 0x2796 <__itoa_ncheck>
		itoa(clkTime,clkTimeS,10);
		LCD_String(clkTimeS);
    1b66:	8d e1       	ldi	r24, 0x1D	; 29
    1b68:	92 e0       	ldi	r25, 0x02	; 2
    1b6a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
		p--;
    1b6e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    1b72:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <p+0x1>
    1b7c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <p>
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	80 e7       	ldi	r24, 0x70	; 112
    1b84:	92 e0       	ldi	r25, 0x02	; 2
    1b86:	31 50       	subi	r19, 0x01	; 1
    1b88:	80 40       	sbci	r24, 0x00	; 0
    1b8a:	90 40       	sbci	r25, 0x00	; 0
    1b8c:	e1 f7       	brne	.-8      	; 0x1b86 <_Z12LCD_SetAlarmci+0xc2>
    1b8e:	00 c0       	rjmp	.+0      	; 0x1b90 <_Z12LCD_SetAlarmci+0xcc>
    1b90:	00 00       	nop
		_delay_ms(800);
	}
	if (state==3){
    1b92:	03 30       	cpi	r16, 0x03	; 3
    1b94:	11 05       	cpc	r17, r1
    1b96:	79 f5       	brne	.+94     	; 0x1bf6 <_Z12LCD_SetAlarmci+0x132>
		setAlarm(clkTime);
    1b98:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <clkTime>
    1b9c:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <clkTime+0x1>
    1ba0:	0e 94 49 08 	call	0x1092	; 0x1092 <_Z8setAlarmi>
		LCD_Home(0);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
		LCD_String("ALARM IS SET TO");
    1bac:	86 ea       	ldi	r24, 0xA6	; 166
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
		LCD_Home(1);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
		LCD_String(clkTimeS);
    1bbc:	8d e1       	ldi	r24, 0x1D	; 29
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
		clkTime=0;num=0;p=3;
    1bc4:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <clkTime+0x1>
    1bc8:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <clkTime>
    1bcc:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <num+0x1>
    1bd0:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <num>
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <p+0x1>
    1bdc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <p>
    1be0:	2f e7       	ldi	r18, 0x7F	; 127
    1be2:	3a e1       	ldi	r19, 0x1A	; 26
    1be4:	86 e0       	ldi	r24, 0x06	; 6
    1be6:	21 50       	subi	r18, 0x01	; 1
    1be8:	30 40       	sbci	r19, 0x00	; 0
    1bea:	80 40       	sbci	r24, 0x00	; 0
    1bec:	e1 f7       	brne	.-8      	; 0x1be6 <_Z12LCD_SetAlarmci+0x122>
    1bee:	00 c0       	rjmp	.+0      	; 0x1bf0 <_Z12LCD_SetAlarmci+0x12c>
    1bf0:	00 00       	nop
		_delay_ms(2000);
		LCD_Clear();
    1bf2:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_Z9LCD_Clearv>
	}


}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	08 95       	ret

00001c00 <_Z11LCD_SetDateii>:
int clockTime[6];
int ClockState = 0;
int temp = 0;
int data = 0;
char dataS[10];
void LCD_SetDate(int key, int state){
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	ec 01       	movw	r28, r24
    1c0a:	8b 01       	movw	r16, r22
	LCD_Home(0);
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
	LCD_String("20");
    1c14:	85 e9       	ldi	r24, 0x95	; 149
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	if (int(key)>47 & int(key)<58 & state ==2){
    1c1c:	9e 01       	movw	r18, r28
    1c1e:	20 53       	subi	r18, 0x30	; 48
    1c20:	31 09       	sbc	r19, r1
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	2a 30       	cpi	r18, 0x0A	; 10
    1c26:	31 05       	cpc	r19, r1
    1c28:	08 f0       	brcs	.+2      	; 0x1c2c <_Z11LCD_SetDateii+0x2c>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	02 30       	cpi	r16, 0x02	; 2
    1c30:	11 05       	cpc	r17, r1
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <_Z11LCD_SetDateii+0x36>
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	88 23       	and	r24, r24
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <_Z11LCD_SetDateii+0x3c>
    1c3a:	5c c0       	rjmp	.+184    	; 0x1cf4 <_Z11LCD_SetDateii+0xf4>
    1c3c:	99 23       	and	r25, r25
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <_Z11LCD_SetDateii+0x42>
    1c40:	59 c0       	rjmp	.+178    	; 0x1cf4 <_Z11LCD_SetDateii+0xf4>
		data+=(int(key)-48);
    1c42:	e0 97       	sbiw	r28, 0x30	; 48
    1c44:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <data>
    1c48:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <data+0x1>
    1c4c:	8c 0f       	add	r24, r28
    1c4e:	9d 1f       	adc	r25, r29
    1c50:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <data+0x1>
    1c54:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <data>
    1c58:	4a e0       	ldi	r20, 0x0A	; 10
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	72 e0       	ldi	r23, 0x02	; 2
    1c5e:	0e 94 cb 13 	call	0x2796	; 0x2796 <__itoa_ncheck>
		itoa(data,dataS,10);
		LCD_String(dataS);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	92 e0       	ldi	r25, 0x02	; 2
    1c66:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
    1c6a:	2f ef       	ldi	r18, 0xFF	; 255
    1c6c:	80 e7       	ldi	r24, 0x70	; 112
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	21 50       	subi	r18, 0x01	; 1
    1c72:	80 40       	sbci	r24, 0x00	; 0
    1c74:	90 40       	sbci	r25, 0x00	; 0
    1c76:	e1 f7       	brne	.-8      	; 0x1c70 <_Z11LCD_SetDateii+0x70>
    1c78:	00 c0       	rjmp	.+0      	; 0x1c7a <_Z11LCD_SetDateii+0x7a>
    1c7a:	00 00       	nop
		_delay_ms(800);
		if (temp == 0){
    1c7c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <temp>
    1c80:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <temp+0x1>
    1c84:	89 2b       	or	r24, r25
    1c86:	d1 f4       	brne	.+52     	; 0x1cbc <_Z11LCD_SetDateii+0xbc>
			data*=10;
    1c88:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <data>
    1c8c:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <data+0x1>
    1c90:	9c 01       	movw	r18, r24
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	82 0f       	add	r24, r18
    1ca4:	93 1f       	adc	r25, r19
    1ca6:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <data+0x1>
    1caa:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <data>
			temp = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <temp+0x1>
    1cb6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <temp>
    1cba:	1c c0       	rjmp	.+56     	; 0x1cf4 <_Z11LCD_SetDateii+0xf4>
		}
		else{
			clockTime[ClockState] = data;
    1cbc:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ClockState>
    1cc0:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <ClockState+0x1>
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	ff 1f       	adc	r31, r31
    1cca:	ef 5e       	subi	r30, 0xEF	; 239
    1ccc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cce:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <data>
    1cd2:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <data+0x1>
    1cd6:	31 83       	std	Z+1, r19	; 0x01
    1cd8:	20 83       	st	Z, r18
			ClockState++;
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <ClockState+0x1>
    1ce0:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <ClockState>
			data=0;
    1ce4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <data+0x1>
    1ce8:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <data>
			temp = 0;
    1cec:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <temp+0x1>
    1cf0:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <temp>
		}
	}
	if (ClockState == 6 & state==3){
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <ClockState>
    1cfa:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <ClockState+0x1>
    1cfe:	26 30       	cpi	r18, 0x06	; 6
    1d00:	31 05       	cpc	r19, r1
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <_Z11LCD_SetDateii+0x106>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	88 23       	and	r24, r24
    1d08:	11 f1       	breq	.+68     	; 0x1d4e <_Z11LCD_SetDateii+0x14e>
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	03 30       	cpi	r16, 0x03	; 3
    1d0e:	11 05       	cpc	r17, r1
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <_Z11LCD_SetDateii+0x114>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	88 23       	and	r24, r24
    1d16:	d9 f0       	breq	.+54     	; 0x1d4e <_Z11LCD_SetDateii+0x14e>
		setClockTime(clockTime);
    1d18:	81 e1       	ldi	r24, 0x11	; 17
    1d1a:	92 e0       	ldi	r25, 0x02	; 2
    1d1c:	0e 94 34 09 	call	0x1268	; 0x1268 <_Z12setClockTimePi>
		ClockState = 0;
    1d20:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <ClockState+0x1>
    1d24:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <ClockState>
		LCD_Home(0);
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
		LCD_String("DATE AND TIME IS SET TO");
    1d30:	86 eb       	ldi	r24, 0xB6	; 182
    1d32:	91 e0       	ldi	r25, 0x01	; 1
    1d34:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
    1d38:	2f e7       	ldi	r18, 0x7F	; 127
    1d3a:	8a e1       	ldi	r24, 0x1A	; 26
    1d3c:	96 e0       	ldi	r25, 0x06	; 6
    1d3e:	21 50       	subi	r18, 0x01	; 1
    1d40:	80 40       	sbci	r24, 0x00	; 0
    1d42:	90 40       	sbci	r25, 0x00	; 0
    1d44:	e1 f7       	brne	.-8      	; 0x1d3e <_Z11LCD_SetDateii+0x13e>
    1d46:	00 c0       	rjmp	.+0      	; 0x1d48 <_Z11LCD_SetDateii+0x148>
    1d48:	00 00       	nop
// 		LCD_Home(1);
// 		LCD_String(clkTimeS);
		_delay_ms(2000);
		LCD_Clear();
    1d4a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_Z9LCD_Clearv>
	}
}
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	08 95       	ret

00001d58 <_Z8LCD_Toneci>:
char tone_List[5][10] = {"GOT      ","STAR WARS","PINK     ","TONE4    ","TONE5    "};
int tone_Var = 0;
void LCD_Tone(char key,int state){
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	18 2f       	mov	r17, r24
    1d60:	eb 01       	movw	r28, r22
	LCD_Home(0);
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
	if (key=='8' & state==2){
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	c2 30       	cpi	r28, 0x02	; 2
    1d6e:	d1 05       	cpc	r29, r1
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <_Z8LCD_Toneci+0x1c>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	91 e0       	ldi	r25, 0x01	; 1
    1d76:	18 33       	cpi	r17, 0x38	; 56
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <_Z8LCD_Toneci+0x24>
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	99 23       	and	r25, r25
    1d7e:	a9 f0       	breq	.+42     	; 0x1daa <_Z8LCD_Toneci+0x52>
    1d80:	88 23       	and	r24, r24
    1d82:	99 f0       	breq	.+38     	; 0x1daa <_Z8LCD_Toneci+0x52>
		tone_Var++;
    1d84:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <tone_Var>
    1d88:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <tone_Var+0x1>
    1d8c:	2f 5f       	subi	r18, 0xFF	; 255
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	30 93 00 02 	sts	0x0200, r19	; 0x800200 <tone_Var+0x1>
    1d94:	20 93 ff 01 	sts	0x01FF, r18	; 0x8001ff <tone_Var>
    1d98:	2f ef       	ldi	r18, 0xFF	; 255
    1d9a:	30 e7       	ldi	r19, 0x70	; 112
    1d9c:	92 e0       	ldi	r25, 0x02	; 2
    1d9e:	21 50       	subi	r18, 0x01	; 1
    1da0:	30 40       	sbci	r19, 0x00	; 0
    1da2:	90 40       	sbci	r25, 0x00	; 0
    1da4:	e1 f7       	brne	.-8      	; 0x1d9e <_Z8LCD_Toneci+0x46>
    1da6:	00 c0       	rjmp	.+0      	; 0x1da8 <_Z8LCD_Toneci+0x50>
    1da8:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (key=='2' & state ==2){
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	12 33       	cpi	r17, 0x32	; 50
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <_Z8LCD_Toneci+0x5a>
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	99 23       	and	r25, r25
    1db4:	a1 f0       	breq	.+40     	; 0x1dde <_Z8LCD_Toneci+0x86>
    1db6:	88 23       	and	r24, r24
    1db8:	91 f0       	breq	.+36     	; 0x1dde <_Z8LCD_Toneci+0x86>
		tone_Var--;
    1dba:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <tone_Var>
    1dbe:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <tone_Var+0x1>
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <tone_Var+0x1>
    1dc8:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <tone_Var>
    1dcc:	2f ef       	ldi	r18, 0xFF	; 255
    1dce:	30 e7       	ldi	r19, 0x70	; 112
    1dd0:	82 e0       	ldi	r24, 0x02	; 2
    1dd2:	21 50       	subi	r18, 0x01	; 1
    1dd4:	30 40       	sbci	r19, 0x00	; 0
    1dd6:	80 40       	sbci	r24, 0x00	; 0
    1dd8:	e1 f7       	brne	.-8      	; 0x1dd2 <_Z8LCD_Toneci+0x7a>
    1dda:	00 c0       	rjmp	.+0      	; 0x1ddc <_Z8LCD_Toneci+0x84>
    1ddc:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (tone_Var>4){
    1dde:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <tone_Var>
    1de2:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <tone_Var+0x1>
    1de6:	05 97       	sbiw	r24, 0x05	; 5
    1de8:	24 f0       	brlt	.+8      	; 0x1df2 <_Z8LCD_Toneci+0x9a>
		tone_Var=0;
    1dea:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <tone_Var+0x1>
    1dee:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <tone_Var>
	}
	if (tone_Var<0){
    1df2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <tone_Var>
    1df6:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <tone_Var+0x1>
    1dfa:	99 23       	and	r25, r25
    1dfc:	34 f4       	brge	.+12     	; 0x1e0a <_Z8LCD_Toneci+0xb2>
		tone_Var=4;
    1dfe:	84 e0       	ldi	r24, 0x04	; 4
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <tone_Var+0x1>
    1e06:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <tone_Var>
	}
	if (state==2){
    1e0a:	22 97       	sbiw	r28, 0x02	; 2
    1e0c:	f9 f4       	brne	.+62     	; 0x1e4c <_Z8LCD_Toneci+0xf4>
		LCD_Home(0);LCD_String(">>");
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
    1e16:	8e ec       	ldi	r24, 0xCE	; 206
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
		LCD_String(tone_List[tone_Var%5]);
    1e1e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <tone_Var>
    1e22:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <tone_Var+0x1>
    1e26:	65 e0       	ldi	r22, 0x05	; 5
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	0e 94 a3 13 	call	0x2746	; 0x2746 <__divmodhi4>
    1e2e:	9c 01       	movw	r18, r24
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	82 0f       	add	r24, r18
    1e42:	93 1f       	adc	r25, r19
    1e44:	88 5c       	subi	r24, 0xC8	; 200
    1e46:	9e 4f       	sbci	r25, 0xFE	; 254
    1e48:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
		// 	LCD_Home(1);
		// 	LCD_String(menu_List[(menu_Var+1)%3]);
	}

}
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	1f 91       	pop	r17
    1e52:	08 95       	ret

00001e54 <_Z8LCD_Menuci>:
char menu_List[3][10] = {"SET ALARM","SET TIME ","SET TONE "};
int menu_Var = 0;
void LCD_Menu(char key,int state){
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	18 2f       	mov	r17, r24
    1e5e:	eb 01       	movw	r28, r22
	LCD_Home(0);
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
	if (key=='8' & state==1){
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	c1 30       	cpi	r28, 0x01	; 1
    1e6c:	d1 05       	cpc	r29, r1
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <_Z8LCD_Menuci+0x1e>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	18 33       	cpi	r17, 0x38	; 56
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <_Z8LCD_Menuci+0x26>
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	99 23       	and	r25, r25
    1e7c:	a9 f0       	breq	.+42     	; 0x1ea8 <_Z8LCD_Menuci+0x54>
    1e7e:	88 23       	and	r24, r24
    1e80:	99 f0       	breq	.+38     	; 0x1ea8 <_Z8LCD_Menuci+0x54>
		menu_Var++;
    1e82:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <menu_Var>
    1e86:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <menu_Var+0x1>
    1e8a:	2f 5f       	subi	r18, 0xFF	; 255
    1e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8e:	30 93 fe 01 	sts	0x01FE, r19	; 0x8001fe <menu_Var+0x1>
    1e92:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <menu_Var>
    1e96:	2f ef       	ldi	r18, 0xFF	; 255
    1e98:	30 e7       	ldi	r19, 0x70	; 112
    1e9a:	92 e0       	ldi	r25, 0x02	; 2
    1e9c:	21 50       	subi	r18, 0x01	; 1
    1e9e:	30 40       	sbci	r19, 0x00	; 0
    1ea0:	90 40       	sbci	r25, 0x00	; 0
    1ea2:	e1 f7       	brne	.-8      	; 0x1e9c <_Z8LCD_Menuci+0x48>
    1ea4:	00 c0       	rjmp	.+0      	; 0x1ea6 <_Z8LCD_Menuci+0x52>
    1ea6:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (key=='2' & state ==1){
    1ea8:	91 e0       	ldi	r25, 0x01	; 1
    1eaa:	12 33       	cpi	r17, 0x32	; 50
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <_Z8LCD_Menuci+0x5c>
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	99 23       	and	r25, r25
    1eb2:	a1 f0       	breq	.+40     	; 0x1edc <_Z8LCD_Menuci+0x88>
    1eb4:	88 23       	and	r24, r24
    1eb6:	91 f0       	breq	.+36     	; 0x1edc <_Z8LCD_Menuci+0x88>
		menu_Var--;
    1eb8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <menu_Var>
    1ebc:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <menu_Var+0x1>
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <menu_Var+0x1>
    1ec6:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <menu_Var>
    1eca:	2f ef       	ldi	r18, 0xFF	; 255
    1ecc:	30 e7       	ldi	r19, 0x70	; 112
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	21 50       	subi	r18, 0x01	; 1
    1ed2:	30 40       	sbci	r19, 0x00	; 0
    1ed4:	80 40       	sbci	r24, 0x00	; 0
    1ed6:	e1 f7       	brne	.-8      	; 0x1ed0 <_Z8LCD_Menuci+0x7c>
    1ed8:	00 c0       	rjmp	.+0      	; 0x1eda <_Z8LCD_Menuci+0x86>
    1eda:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (menu_Var>2){
    1edc:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <menu_Var>
    1ee0:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <menu_Var+0x1>
    1ee4:	03 97       	sbiw	r24, 0x03	; 3
    1ee6:	24 f0       	brlt	.+8      	; 0x1ef0 <_Z8LCD_Menuci+0x9c>
		menu_Var=0;
    1ee8:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <menu_Var+0x1>
    1eec:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <menu_Var>
	}
	if (menu_Var<0){
    1ef0:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <menu_Var>
    1ef4:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <menu_Var+0x1>
    1ef8:	99 23       	and	r25, r25
    1efa:	34 f4       	brge	.+12     	; 0x1f08 <_Z8LCD_Menuci+0xb4>
		menu_Var=2;
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <menu_Var+0x1>
    1f04:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <menu_Var>
	}
	if (state==1){
    1f08:	c1 30       	cpi	r28, 0x01	; 1
    1f0a:	d1 05       	cpc	r29, r1
    1f0c:	f9 f4       	brne	.+62     	; 0x1f4c <_Z8LCD_Menuci+0xf8>
		LCD_Home(0);LCD_String(">>");
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z8LCD_Homei>
    1f16:	8e ec       	ldi	r24, 0xCE	; 206
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
		LCD_String(menu_List[menu_Var%3]);
    1f1e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <menu_Var>
    1f22:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <menu_Var+0x1>
    1f26:	63 e0       	ldi	r22, 0x03	; 3
    1f28:	70 e0       	ldi	r23, 0x00	; 0
    1f2a:	0e 94 a3 13 	call	0x2746	; 0x2746 <__divmodhi4>
    1f2e:	9c 01       	movw	r18, r24
    1f30:	22 0f       	add	r18, r18
    1f32:	33 1f       	adc	r19, r19
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	82 0f       	add	r24, r18
    1f42:	93 1f       	adc	r25, r19
    1f44:	86 5e       	subi	r24, 0xE6	; 230
    1f46:	9e 4f       	sbci	r25, 0xFE	; 254
    1f48:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	// 	LCD_Home(1);
	// 	LCD_String(menu_List[(menu_Var+1)%3]);
	}
	if ((state >1) & (menu_Var==0)){
    1f4c:	01 e0       	ldi	r16, 0x01	; 1
    1f4e:	c2 30       	cpi	r28, 0x02	; 2
    1f50:	d1 05       	cpc	r29, r1
    1f52:	0c f4       	brge	.+2      	; 0x1f56 <_Z8LCD_Menuci+0x102>
    1f54:	00 e0       	ldi	r16, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <menu_Var>
    1f5c:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <menu_Var+0x1>
    1f60:	23 2b       	or	r18, r19
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <_Z8LCD_Menuci+0x112>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	88 23       	and	r24, r24
    1f68:	31 f0       	breq	.+12     	; 0x1f76 <_Z8LCD_Menuci+0x122>
    1f6a:	00 23       	and	r16, r16
    1f6c:	21 f0       	breq	.+8      	; 0x1f76 <_Z8LCD_Menuci+0x122>
		LCD_SetAlarm(key,state);
    1f6e:	be 01       	movw	r22, r28
    1f70:	81 2f       	mov	r24, r17
    1f72:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_Z12LCD_SetAlarmci>
	}
	if ((state >1) & (menu_Var==1)){
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <menu_Var>
    1f7c:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <menu_Var+0x1>
    1f80:	21 30       	cpi	r18, 0x01	; 1
    1f82:	31 05       	cpc	r19, r1
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <_Z8LCD_Menuci+0x134>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	88 23       	and	r24, r24
    1f8a:	39 f0       	breq	.+14     	; 0x1f9a <_Z8LCD_Menuci+0x146>
    1f8c:	00 23       	and	r16, r16
    1f8e:	29 f0       	breq	.+10     	; 0x1f9a <_Z8LCD_Menuci+0x146>
		LCD_SetDate(key,state);
    1f90:	be 01       	movw	r22, r28
    1f92:	81 2f       	mov	r24, r17
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_Z11LCD_SetDateii>
	}
	if ((state >1) & (menu_Var==2)){
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <menu_Var>
    1fa0:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <menu_Var+0x1>
    1fa4:	22 30       	cpi	r18, 0x02	; 2
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <_Z8LCD_Menuci+0x158>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	88 23       	and	r24, r24
    1fae:	31 f0       	breq	.+12     	; 0x1fbc <_Z8LCD_Menuci+0x168>
    1fb0:	00 23       	and	r16, r16
    1fb2:	21 f0       	breq	.+8      	; 0x1fbc <_Z8LCD_Menuci+0x168>
		LCD_Tone(key,state);
    1fb4:	be 01       	movw	r22, r28
    1fb6:	81 2f       	mov	r24, r17
    1fb8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_Z8LCD_Toneci>
	}
}
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	08 95       	ret

00001fc6 <_Z14ds1307_dec2bcdh>:
#define F_CPU 1000000UL
#endif


uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
    1fc6:	9d ec       	ldi	r25, 0xCD	; 205
    1fc8:	89 9f       	mul	r24, r25
    1fca:	91 2d       	mov	r25, r1
    1fcc:	11 24       	eor	r1, r1
    1fce:	96 95       	lsr	r25
    1fd0:	96 95       	lsr	r25
    1fd2:	96 95       	lsr	r25
    1fd4:	29 2f       	mov	r18, r25
    1fd6:	22 0f       	add	r18, r18
    1fd8:	92 0f       	add	r25, r18
    1fda:	29 2f       	mov	r18, r25
    1fdc:	22 0f       	add	r18, r18
}
    1fde:	82 0f       	add	r24, r18
    1fe0:	08 95       	ret

00001fe2 <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	35 95       	asr	r19
    1fe8:	27 95       	ror	r18
    1fea:	35 95       	asr	r19
    1fec:	27 95       	ror	r18
    1fee:	35 95       	asr	r19
    1ff0:	27 95       	ror	r18
    1ff2:	35 95       	asr	r19
    1ff4:	27 95       	ror	r18
    1ff6:	92 2f       	mov	r25, r18
    1ff8:	99 0f       	add	r25, r25
    1ffa:	29 0f       	add	r18, r25
    1ffc:	92 2f       	mov	r25, r18
    1ffe:	99 0f       	add	r25, r25
}
    2000:	89 1b       	sub	r24, r25
    2002:	08 95       	ret

00002004 <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
    2004:	0e 94 a2 10 	call	0x2144	; 0x2144 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	8a 95       	dec	r24
    200c:	f1 f7       	brne	.-4      	; 0x200a <_Z11ds1307_initv+0x6>
    200e:	00 00       	nop
    2010:	08 95       	ret

00002012 <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
    2012:	cf 92       	push	r12
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	c8 2f       	mov	r28, r24
    2022:	d6 2f       	mov	r29, r22
    2024:	14 2f       	mov	r17, r20
    2026:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
    2028:	80 ed       	ldi	r24, 0xD0	; 208
    202a:	0e 94 ce 10 	call	0x219c	; 0x219c <_Z14i2c_start_waith>
	i2c_write(0x00);
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
    2034:	8c 2d       	mov	r24, r12
    2036:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_Z14ds1307_dec2bcdh>
    203a:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
    203e:	8e 2d       	mov	r24, r14
    2040:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_Z14ds1307_dec2bcdh>
    2044:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
    2048:	80 2f       	mov	r24, r16
    204a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_Z14ds1307_dec2bcdh>
    204e:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
    2052:	8f 2d       	mov	r24, r15
    2054:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_Z14ds1307_dec2bcdh>
    2058:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
    205c:	81 2f       	mov	r24, r17
    205e:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_Z14ds1307_dec2bcdh>
    2062:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
    2066:	8d 2f       	mov	r24, r29
    2068:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_Z14ds1307_dec2bcdh>
    206c:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
    2070:	8c 2f       	mov	r24, r28
    2072:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_Z14ds1307_dec2bcdh>
    2076:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_write(0x00);
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_stop();
    2080:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <_Z8i2c_stopv>
}
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	ff 90       	pop	r15
    208e:	ef 90       	pop	r14
    2090:	cf 90       	pop	r12
    2092:	08 95       	ret

00002094 <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
    2094:	6f 92       	push	r6
    2096:	7f 92       	push	r7
    2098:	8f 92       	push	r8
    209a:	9f 92       	push	r9
    209c:	af 92       	push	r10
    209e:	bf 92       	push	r11
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	ec 01       	movw	r28, r24
    20b2:	3b 01       	movw	r6, r22
    20b4:	5a 01       	movw	r10, r20
    20b6:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
    20b8:	80 ed       	ldi	r24, 0xD0	; 208
    20ba:	0e 94 ce 10 	call	0x219c	; 0x219c <_Z14i2c_start_waith>
	i2c_write(0x00);
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	0e 94 00 11 	call	0x2200	; 0x2200 <_Z9i2c_writeh>
	i2c_stop();
    20c4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
    20c8:	81 ed       	ldi	r24, 0xD1	; 209
    20ca:	0e 94 f5 10 	call	0x21ea	; 0x21ea <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
    20ce:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z11i2c_readAckv>
    20d2:	8f 77       	andi	r24, 0x7F	; 127
    20d4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_Z14ds1307_bcd2dech>
    20d8:	f6 01       	movw	r30, r12
    20da:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
    20dc:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z11i2c_readAckv>
    20e0:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_Z14ds1307_bcd2dech>
    20e4:	f7 01       	movw	r30, r14
    20e6:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
    20e8:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z11i2c_readAckv>
    20ec:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_Z14ds1307_bcd2dech>
    20f0:	f8 01       	movw	r30, r16
    20f2:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
    20f4:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z11i2c_readAckv>
    20f8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_Z14ds1307_bcd2dech>
    20fc:	f4 01       	movw	r30, r8
    20fe:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
    2100:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z11i2c_readAckv>
    2104:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_Z14ds1307_bcd2dech>
    2108:	f5 01       	movw	r30, r10
    210a:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
    210c:	0e 94 12 11 	call	0x2224	; 0x2224 <_Z11i2c_readAckv>
    2110:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_Z14ds1307_bcd2dech>
    2114:	f3 01       	movw	r30, r6
    2116:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
    2118:	0e 94 1c 11 	call	0x2238	; 0x2238 <_Z11i2c_readNakv>
    211c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_Z14ds1307_bcd2dech>
    2120:	88 83       	st	Y, r24
	i2c_stop();
    2122:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <_Z8i2c_stopv>
}
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	ff 90       	pop	r15
    2130:	ef 90       	pop	r14
    2132:	df 90       	pop	r13
    2134:	cf 90       	pop	r12
    2136:	bf 90       	pop	r11
    2138:	af 90       	pop	r10
    213a:	9f 90       	pop	r9
    213c:	8f 90       	pop	r8
    213e:	7f 90       	pop	r7
    2140:	6f 90       	pop	r6
    2142:	08 95       	ret

00002144 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    2144:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2148:	8d ef       	ldi	r24, 0xFD	; 253
    214a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    214e:	08 95       	ret

00002150 <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2150:	94 ea       	ldi	r25, 0xA4	; 164
    2152:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2156:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    215a:	99 23       	and	r25, r25
    215c:	e4 f7       	brge	.-8      	; 0x2156 <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    215e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2162:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2164:	98 30       	cpi	r25, 0x08	; 8
    2166:	11 f0       	breq	.+4      	; 0x216c <_Z9i2c_starth+0x1c>
    2168:	90 31       	cpi	r25, 0x10	; 16
    216a:	91 f4       	brne	.+36     	; 0x2190 <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
    216c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    2170:	84 e8       	ldi	r24, 0x84	; 132
    2172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2176:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    217a:	88 23       	and	r24, r24
    217c:	e4 f7       	brge	.-8      	; 0x2176 <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    217e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2182:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2184:	88 31       	cpi	r24, 0x18	; 24
    2186:	31 f0       	breq	.+12     	; 0x2194 <_Z9i2c_starth+0x44>
    2188:	80 34       	cpi	r24, 0x40	; 64
    218a:	31 f4       	brne	.+12     	; 0x2198 <_Z9i2c_starth+0x48>

	return 0;
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    219a:	08 95       	ret

0000219c <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    219c:	94 ea       	ldi	r25, 0xA4	; 164
    219e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    21a2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    21a6:	99 23       	and	r25, r25
    21a8:	e4 f7       	brge	.-8      	; 0x21a2 <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    21aa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    21ae:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    21b0:	98 30       	cpi	r25, 0x08	; 8
    21b2:	11 f0       	breq	.+4      	; 0x21b8 <_Z14i2c_start_waith+0x1c>
    21b4:	90 31       	cpi	r25, 0x10	; 16
    21b6:	91 f7       	brne	.-28     	; 0x219c <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
    21b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
    21bc:	94 e8       	ldi	r25, 0x84	; 132
    21be:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    21c2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    21c6:	99 23       	and	r25, r25
    21c8:	e4 f7       	brge	.-8      	; 0x21c2 <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    21ca:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    21ce:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    21d0:	90 32       	cpi	r25, 0x20	; 32
    21d2:	11 f0       	breq	.+4      	; 0x21d8 <_Z14i2c_start_waith+0x3c>
    21d4:	98 35       	cpi	r25, 0x58	; 88
    21d6:	41 f4       	brne	.+16     	; 0x21e8 <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    21d8:	94 e9       	ldi	r25, 0x94	; 148
    21da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    21de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    21e2:	94 fd       	sbrc	r25, 4
    21e4:	fc cf       	rjmp	.-8      	; 0x21de <_Z14i2c_start_waith+0x42>
    21e6:	da cf       	rjmp	.-76     	; 0x219c <_Z14i2c_start_waith>
    21e8:	08 95       	ret

000021ea <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    21ea:	0e 94 a8 10 	call	0x2150	; 0x2150 <_Z9i2c_starth>

}/* i2c_rep_start */
    21ee:	08 95       	ret

000021f0 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    21f0:	84 e9       	ldi	r24, 0x94	; 148
    21f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    21f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    21fa:	84 fd       	sbrc	r24, 4
    21fc:	fc cf       	rjmp	.-8      	; 0x21f6 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    21fe:	08 95       	ret

00002200 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2200:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    2204:	84 e8       	ldi	r24, 0x84	; 132
    2206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    220a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    220e:	88 23       	and	r24, r24
    2210:	e4 f7       	brge	.-8      	; 0x220a <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2212:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2216:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2218:	88 32       	cpi	r24, 0x28	; 40
    221a:	11 f0       	breq	.+4      	; 0x2220 <_Z9i2c_writeh+0x20>
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	08 95       	ret
	return 0;
    2220:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    2222:	08 95       	ret

00002224 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2224:	84 ec       	ldi	r24, 0xC4	; 196
    2226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
    222a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    222e:	88 23       	and	r24, r24
    2230:	e4 f7       	brge	.-8      	; 0x222a <_Z11i2c_readAckv+0x6>

    return TWDR;
    2232:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
    2236:	08 95       	ret

00002238 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2238:	84 e8       	ldi	r24, 0x84	; 132
    223a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
    223e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2242:	88 23       	and	r24, r24
    2244:	e4 f7       	brge	.-8      	; 0x223e <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    2246:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
    224a:	08 95       	ret

0000224c <_Z8btnPressv>:
{
} //~Keypad


char btnPress(){
	DDRC = 0x0F;
    224c:	8f e0       	ldi	r24, 0x0F	; 15
    224e:	87 b9       	out	0x07, r24	; 7
	for (int i=0;i<4;i++){
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	64 30       	cpi	r22, 0x04	; 4
    2256:	71 05       	cpc	r23, r1
    2258:	94 f5       	brge	.+100    	; 0x22be <_Z8btnPressv+0x72>
		PORTC = 1<<row[i];
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	fb 01       	movw	r30, r22
    2260:	e1 59       	subi	r30, 0x91	; 145
    2262:	fe 4f       	sbci	r31, 0xFE	; 254
    2264:	00 80       	ld	r0, Z
    2266:	02 c0       	rjmp	.+4      	; 0x226c <_Z8btnPressv+0x20>
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	0a 94       	dec	r0
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <_Z8btnPressv+0x1c>
    2270:	88 b9       	out	0x08, r24	; 8
		for (int j = 0;j<3;j++){
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	83 30       	cpi	r24, 0x03	; 3
    2278:	91 05       	cpc	r25, r1
    227a:	f4 f4       	brge	.+60     	; 0x22b8 <_Z8btnPressv+0x6c>
			if (PIND==(1<<colomn[j])){
    227c:	49 b1       	in	r20, 0x09	; 9
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	21 e0       	ldi	r18, 0x01	; 1
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	fc 01       	movw	r30, r24
    2286:	e4 59       	subi	r30, 0x94	; 148
    2288:	fe 4f       	sbci	r31, 0xFE	; 254
    228a:	00 80       	ld	r0, Z
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <_Z8btnPressv+0x46>
    228e:	22 0f       	add	r18, r18
    2290:	33 1f       	adc	r19, r19
    2292:	0a 94       	dec	r0
    2294:	e2 f7       	brpl	.-8      	; 0x228e <_Z8btnPressv+0x42>
    2296:	42 17       	cp	r20, r18
    2298:	53 07       	cpc	r21, r19
    229a:	61 f4       	brne	.+24     	; 0x22b4 <_Z8btnPressv+0x68>
				//_delay_ms(100);
				return keys[i][j];
    229c:	9b 01       	movw	r18, r22
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	62 0f       	add	r22, r18
    22a4:	73 1f       	adc	r23, r19
    22a6:	6d 58       	subi	r22, 0x8D	; 141
    22a8:	7e 4f       	sbci	r23, 0xFE	; 254
    22aa:	fb 01       	movw	r30, r22
    22ac:	e8 0f       	add	r30, r24
    22ae:	f9 1f       	adc	r31, r25
    22b0:	80 81       	ld	r24, Z
    22b2:	08 95       	ret

char btnPress(){
	DDRC = 0x0F;
	for (int i=0;i<4;i++){
		PORTC = 1<<row[i];
		for (int j = 0;j<3;j++){
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	df cf       	rjmp	.-66     	; 0x2276 <_Z8btnPressv+0x2a>
} //~Keypad


char btnPress(){
	DDRC = 0x0F;
	for (int i=0;i<4;i++){
    22b8:	6f 5f       	subi	r22, 0xFF	; 255
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	cb cf       	rjmp	.-106    	; 0x2254 <_Z8btnPressv+0x8>
				//_delay_ms(100);
				return keys[i][j];
			}
		}
	}
	return '&';
    22be:	86 e2       	ldi	r24, 0x26	; 38
    22c0:	08 95       	ret

000022c2 <main>:

#ifndef F_CPU
#define F_CPU 1000000UL
#endif
int main()
{
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	2c 97       	sbiw	r28, 0x0c	; 12
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
	init_buzzer();		// Initialize pins used for buzzer and Interrupt button
    22d6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_Z11init_buzzerv>
	LCD_Init();			/* Initialization of LCD*/
    22da:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_Z8LCD_Initv>
	LCD_String("   WELCOME!!!");
    22de:	81 ed       	ldi	r24, 0xD1	; 209
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_Z10LCD_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22e6:	2f e3       	ldi	r18, 0x3F	; 63
    22e8:	8d e0       	ldi	r24, 0x0D	; 13
    22ea:	93 e0       	ldi	r25, 0x03	; 3
    22ec:	21 50       	subi	r18, 0x01	; 1
    22ee:	80 40       	sbci	r24, 0x00	; 0
    22f0:	90 40       	sbci	r25, 0x00	; 0
    22f2:	e1 f7       	brne	.-8      	; 0x22ec <main+0x2a>
    22f4:	00 c0       	rjmp	.+0      	; 0x22f6 <main+0x34>
    22f6:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
    22f8:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_Z9LCD_Clearv>
	ds1307_init();
    22fc:	0e 94 02 10 	call	0x2004	; 0x2004 <_Z11ds1307_initv>
	int clocktime[6] = {21,05,4,12,8,35};
    2300:	8c e0       	ldi	r24, 0x0C	; 12
    2302:	ef e7       	ldi	r30, 0x7F	; 127
    2304:	f1 e0       	ldi	r31, 0x01	; 1
    2306:	de 01       	movw	r26, r28
    2308:	11 96       	adiw	r26, 0x01	; 1
    230a:	01 90       	ld	r0, Z+
    230c:	0d 92       	st	X+, r0
    230e:	8a 95       	dec	r24
    2310:	e1 f7       	brne	.-8      	; 0x230a <main+0x48>
	setClockTime(clocktime);
    2312:	ce 01       	movw	r24, r28
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	0e 94 34 09 	call	0x1268	; 0x1268 <_Z12setClockTimePi>
	//setAlarm(1209);
	int menu = 0;
    231a:	00 e0       	ldi	r16, 0x00	; 0
    231c:	10 e0       	ldi	r17, 0x00	; 0
	char key;
	while(1){
		checkAlarm();
    231e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_Z10checkAlarmv>
		key = btnPress();
    2322:	0e 94 26 11 	call	0x224c	; 0x224c <_Z8btnPressv>
    2326:	f8 2e       	mov	r15, r24
		if (menu==0){
    2328:	01 15       	cp	r16, r1
    232a:	11 05       	cpc	r17, r1
    232c:	11 f4       	brne	.+4      	; 0x2332 <main+0x70>
			displayTime();
    232e:	0e 94 bd 09 	call	0x137a	; 0x137a <_Z11displayTimev>
		}
		if (key=='*'){
    2332:	2a e2       	ldi	r18, 0x2A	; 42
    2334:	f2 12       	cpse	r15, r18
    2336:	0d c0       	rjmp	.+26     	; 0x2352 <main+0x90>
    2338:	8f e7       	ldi	r24, 0x7F	; 127
    233a:	98 e3       	ldi	r25, 0x38	; 56
    233c:	21 e0       	ldi	r18, 0x01	; 1
    233e:	81 50       	subi	r24, 0x01	; 1
    2340:	90 40       	sbci	r25, 0x00	; 0
    2342:	20 40       	sbci	r18, 0x00	; 0
    2344:	e1 f7       	brne	.-8      	; 0x233e <main+0x7c>
    2346:	00 c0       	rjmp	.+0      	; 0x2348 <main+0x86>
    2348:	00 00       	nop
			_delay_ms(400);
			menu ++;
    234a:	0f 5f       	subi	r16, 0xFF	; 255
    234c:	1f 4f       	sbci	r17, 0xFF	; 255
			LCD_Clear();
    234e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_Z9LCD_Clearv>
		}
		if (menu>0){
    2352:	10 16       	cp	r1, r16
    2354:	11 06       	cpc	r1, r17
    2356:	24 f4       	brge	.+8      	; 0x2360 <main+0x9e>
			LCD_Menu(key,menu);
    2358:	b8 01       	movw	r22, r16
    235a:	8f 2d       	mov	r24, r15
    235c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_Z8LCD_Menuci>
		}
		if (menu==3 | menu==-1){
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	03 30       	cpi	r16, 0x03	; 3
    2364:	11 05       	cpc	r17, r1
    2366:	09 f0       	breq	.+2      	; 0x236a <main+0xa8>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	81 11       	cpse	r24, r1
    236c:	08 c0       	rjmp	.+16     	; 0x237e <main+0xbc>
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	0f 3f       	cpi	r16, 0xFF	; 255
    2372:	9f ef       	ldi	r25, 0xFF	; 255
    2374:	19 07       	cpc	r17, r25
    2376:	09 f0       	breq	.+2      	; 0x237a <main+0xb8>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	88 23       	and	r24, r24
    237c:	11 f0       	breq	.+4      	; 0x2382 <main+0xc0>
			menu = 0;
    237e:	00 e0       	ldi	r16, 0x00	; 0
    2380:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (key=='#'){
    2382:	23 e2       	ldi	r18, 0x23	; 35
    2384:	f2 12       	cpse	r15, r18
    2386:	cb cf       	rjmp	.-106    	; 0x231e <main+0x5c>
    2388:	8f e7       	ldi	r24, 0x7F	; 127
    238a:	98 e3       	ldi	r25, 0x38	; 56
    238c:	21 e0       	ldi	r18, 0x01	; 1
    238e:	81 50       	subi	r24, 0x01	; 1
    2390:	90 40       	sbci	r25, 0x00	; 0
    2392:	20 40       	sbci	r18, 0x00	; 0
    2394:	e1 f7       	brne	.-8      	; 0x238e <main+0xcc>
    2396:	00 c0       	rjmp	.+0      	; 0x2398 <main+0xd6>
    2398:	00 00       	nop
			_delay_ms(400);
			menu --;
    239a:	01 50       	subi	r16, 0x01	; 1
    239c:	11 09       	sbc	r17, r1
			LCD_Clear();
    239e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_Z9LCD_Clearv>
    23a2:	bd cf       	rjmp	.-134    	; 0x231e <main+0x5c>

000023a4 <__cmpsf2>:
    23a4:	0e 94 bc 12 	call	0x2578	; 0x2578 <__fp_cmp>
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <__cmpsf2+0x8>
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	08 95       	ret

000023ae <__divsf3>:
    23ae:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__divsf3x>
    23b2:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_round>
    23b6:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__fp_pscB>
    23ba:	58 f0       	brcs	.+22     	; 0x23d2 <__divsf3+0x24>
    23bc:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fp_pscA>
    23c0:	40 f0       	brcs	.+16     	; 0x23d2 <__divsf3+0x24>
    23c2:	29 f4       	brne	.+10     	; 0x23ce <__divsf3+0x20>
    23c4:	5f 3f       	cpi	r21, 0xFF	; 255
    23c6:	29 f0       	breq	.+10     	; 0x23d2 <__divsf3+0x24>
    23c8:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__fp_inf>
    23cc:	51 11       	cpse	r21, r1
    23ce:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__fp_szero>
    23d2:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__fp_nan>

000023d6 <__divsf3x>:
    23d6:	0e 94 08 13 	call	0x2610	; 0x2610 <__fp_split3>
    23da:	68 f3       	brcs	.-38     	; 0x23b6 <__divsf3+0x8>

000023dc <__divsf3_pse>:
    23dc:	99 23       	and	r25, r25
    23de:	b1 f3       	breq	.-20     	; 0x23cc <__divsf3+0x1e>
    23e0:	55 23       	and	r21, r21
    23e2:	91 f3       	breq	.-28     	; 0x23c8 <__divsf3+0x1a>
    23e4:	95 1b       	sub	r25, r21
    23e6:	55 0b       	sbc	r21, r21
    23e8:	bb 27       	eor	r27, r27
    23ea:	aa 27       	eor	r26, r26
    23ec:	62 17       	cp	r22, r18
    23ee:	73 07       	cpc	r23, r19
    23f0:	84 07       	cpc	r24, r20
    23f2:	38 f0       	brcs	.+14     	; 0x2402 <__divsf3_pse+0x26>
    23f4:	9f 5f       	subi	r25, 0xFF	; 255
    23f6:	5f 4f       	sbci	r21, 0xFF	; 255
    23f8:	22 0f       	add	r18, r18
    23fa:	33 1f       	adc	r19, r19
    23fc:	44 1f       	adc	r20, r20
    23fe:	aa 1f       	adc	r26, r26
    2400:	a9 f3       	breq	.-22     	; 0x23ec <__divsf3_pse+0x10>
    2402:	35 d0       	rcall	.+106    	; 0x246e <__divsf3_pse+0x92>
    2404:	0e 2e       	mov	r0, r30
    2406:	3a f0       	brmi	.+14     	; 0x2416 <__divsf3_pse+0x3a>
    2408:	e0 e8       	ldi	r30, 0x80	; 128
    240a:	32 d0       	rcall	.+100    	; 0x2470 <__divsf3_pse+0x94>
    240c:	91 50       	subi	r25, 0x01	; 1
    240e:	50 40       	sbci	r21, 0x00	; 0
    2410:	e6 95       	lsr	r30
    2412:	00 1c       	adc	r0, r0
    2414:	ca f7       	brpl	.-14     	; 0x2408 <__divsf3_pse+0x2c>
    2416:	2b d0       	rcall	.+86     	; 0x246e <__divsf3_pse+0x92>
    2418:	fe 2f       	mov	r31, r30
    241a:	29 d0       	rcall	.+82     	; 0x246e <__divsf3_pse+0x92>
    241c:	66 0f       	add	r22, r22
    241e:	77 1f       	adc	r23, r23
    2420:	88 1f       	adc	r24, r24
    2422:	bb 1f       	adc	r27, r27
    2424:	26 17       	cp	r18, r22
    2426:	37 07       	cpc	r19, r23
    2428:	48 07       	cpc	r20, r24
    242a:	ab 07       	cpc	r26, r27
    242c:	b0 e8       	ldi	r27, 0x80	; 128
    242e:	09 f0       	breq	.+2      	; 0x2432 <__divsf3_pse+0x56>
    2430:	bb 0b       	sbc	r27, r27
    2432:	80 2d       	mov	r24, r0
    2434:	bf 01       	movw	r22, r30
    2436:	ff 27       	eor	r31, r31
    2438:	93 58       	subi	r25, 0x83	; 131
    243a:	5f 4f       	sbci	r21, 0xFF	; 255
    243c:	3a f0       	brmi	.+14     	; 0x244c <__divsf3_pse+0x70>
    243e:	9e 3f       	cpi	r25, 0xFE	; 254
    2440:	51 05       	cpc	r21, r1
    2442:	78 f0       	brcs	.+30     	; 0x2462 <__divsf3_pse+0x86>
    2444:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__fp_inf>
    2448:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__fp_szero>
    244c:	5f 3f       	cpi	r21, 0xFF	; 255
    244e:	e4 f3       	brlt	.-8      	; 0x2448 <__divsf3_pse+0x6c>
    2450:	98 3e       	cpi	r25, 0xE8	; 232
    2452:	d4 f3       	brlt	.-12     	; 0x2448 <__divsf3_pse+0x6c>
    2454:	86 95       	lsr	r24
    2456:	77 95       	ror	r23
    2458:	67 95       	ror	r22
    245a:	b7 95       	ror	r27
    245c:	f7 95       	ror	r31
    245e:	9f 5f       	subi	r25, 0xFF	; 255
    2460:	c9 f7       	brne	.-14     	; 0x2454 <__divsf3_pse+0x78>
    2462:	88 0f       	add	r24, r24
    2464:	91 1d       	adc	r25, r1
    2466:	96 95       	lsr	r25
    2468:	87 95       	ror	r24
    246a:	97 f9       	bld	r25, 7
    246c:	08 95       	ret
    246e:	e1 e0       	ldi	r30, 0x01	; 1
    2470:	66 0f       	add	r22, r22
    2472:	77 1f       	adc	r23, r23
    2474:	88 1f       	adc	r24, r24
    2476:	bb 1f       	adc	r27, r27
    2478:	62 17       	cp	r22, r18
    247a:	73 07       	cpc	r23, r19
    247c:	84 07       	cpc	r24, r20
    247e:	ba 07       	cpc	r27, r26
    2480:	20 f0       	brcs	.+8      	; 0x248a <__divsf3_pse+0xae>
    2482:	62 1b       	sub	r22, r18
    2484:	73 0b       	sbc	r23, r19
    2486:	84 0b       	sbc	r24, r20
    2488:	ba 0b       	sbc	r27, r26
    248a:	ee 1f       	adc	r30, r30
    248c:	88 f7       	brcc	.-30     	; 0x2470 <__divsf3_pse+0x94>
    248e:	e0 95       	com	r30
    2490:	08 95       	ret

00002492 <__fixsfsi>:
    2492:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__fixunssfsi>
    2496:	68 94       	set
    2498:	b1 11       	cpse	r27, r1
    249a:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__fp_szero>
    249e:	08 95       	ret

000024a0 <__fixunssfsi>:
    24a0:	0e 94 10 13 	call	0x2620	; 0x2620 <__fp_splitA>
    24a4:	88 f0       	brcs	.+34     	; 0x24c8 <__fixunssfsi+0x28>
    24a6:	9f 57       	subi	r25, 0x7F	; 127
    24a8:	98 f0       	brcs	.+38     	; 0x24d0 <__fixunssfsi+0x30>
    24aa:	b9 2f       	mov	r27, r25
    24ac:	99 27       	eor	r25, r25
    24ae:	b7 51       	subi	r27, 0x17	; 23
    24b0:	b0 f0       	brcs	.+44     	; 0x24de <__fixunssfsi+0x3e>
    24b2:	e1 f0       	breq	.+56     	; 0x24ec <__fixunssfsi+0x4c>
    24b4:	66 0f       	add	r22, r22
    24b6:	77 1f       	adc	r23, r23
    24b8:	88 1f       	adc	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	1a f0       	brmi	.+6      	; 0x24c4 <__fixunssfsi+0x24>
    24be:	ba 95       	dec	r27
    24c0:	c9 f7       	brne	.-14     	; 0x24b4 <__fixunssfsi+0x14>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <__fixunssfsi+0x4c>
    24c4:	b1 30       	cpi	r27, 0x01	; 1
    24c6:	91 f0       	breq	.+36     	; 0x24ec <__fixunssfsi+0x4c>
    24c8:	0e 94 2a 13 	call	0x2654	; 0x2654 <__fp_zero>
    24cc:	b1 e0       	ldi	r27, 0x01	; 1
    24ce:	08 95       	ret
    24d0:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__fp_zero>
    24d4:	67 2f       	mov	r22, r23
    24d6:	78 2f       	mov	r23, r24
    24d8:	88 27       	eor	r24, r24
    24da:	b8 5f       	subi	r27, 0xF8	; 248
    24dc:	39 f0       	breq	.+14     	; 0x24ec <__fixunssfsi+0x4c>
    24de:	b9 3f       	cpi	r27, 0xF9	; 249
    24e0:	cc f3       	brlt	.-14     	; 0x24d4 <__fixunssfsi+0x34>
    24e2:	86 95       	lsr	r24
    24e4:	77 95       	ror	r23
    24e6:	67 95       	ror	r22
    24e8:	b3 95       	inc	r27
    24ea:	d9 f7       	brne	.-10     	; 0x24e2 <__fixunssfsi+0x42>
    24ec:	3e f4       	brtc	.+14     	; 0x24fc <__fixunssfsi+0x5c>
    24ee:	90 95       	com	r25
    24f0:	80 95       	com	r24
    24f2:	70 95       	com	r23
    24f4:	61 95       	neg	r22
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	8f 4f       	sbci	r24, 0xFF	; 255
    24fa:	9f 4f       	sbci	r25, 0xFF	; 255
    24fc:	08 95       	ret

000024fe <__floatunsisf>:
    24fe:	e8 94       	clt
    2500:	09 c0       	rjmp	.+18     	; 0x2514 <__floatsisf+0x12>

00002502 <__floatsisf>:
    2502:	97 fb       	bst	r25, 7
    2504:	3e f4       	brtc	.+14     	; 0x2514 <__floatsisf+0x12>
    2506:	90 95       	com	r25
    2508:	80 95       	com	r24
    250a:	70 95       	com	r23
    250c:	61 95       	neg	r22
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	99 23       	and	r25, r25
    2516:	a9 f0       	breq	.+42     	; 0x2542 <__floatsisf+0x40>
    2518:	f9 2f       	mov	r31, r25
    251a:	96 e9       	ldi	r25, 0x96	; 150
    251c:	bb 27       	eor	r27, r27
    251e:	93 95       	inc	r25
    2520:	f6 95       	lsr	r31
    2522:	87 95       	ror	r24
    2524:	77 95       	ror	r23
    2526:	67 95       	ror	r22
    2528:	b7 95       	ror	r27
    252a:	f1 11       	cpse	r31, r1
    252c:	f8 cf       	rjmp	.-16     	; 0x251e <__floatsisf+0x1c>
    252e:	fa f4       	brpl	.+62     	; 0x256e <__floatsisf+0x6c>
    2530:	bb 0f       	add	r27, r27
    2532:	11 f4       	brne	.+4      	; 0x2538 <__floatsisf+0x36>
    2534:	60 ff       	sbrs	r22, 0
    2536:	1b c0       	rjmp	.+54     	; 0x256e <__floatsisf+0x6c>
    2538:	6f 5f       	subi	r22, 0xFF	; 255
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	8f 4f       	sbci	r24, 0xFF	; 255
    253e:	9f 4f       	sbci	r25, 0xFF	; 255
    2540:	16 c0       	rjmp	.+44     	; 0x256e <__floatsisf+0x6c>
    2542:	88 23       	and	r24, r24
    2544:	11 f0       	breq	.+4      	; 0x254a <__floatsisf+0x48>
    2546:	96 e9       	ldi	r25, 0x96	; 150
    2548:	11 c0       	rjmp	.+34     	; 0x256c <__floatsisf+0x6a>
    254a:	77 23       	and	r23, r23
    254c:	21 f0       	breq	.+8      	; 0x2556 <__floatsisf+0x54>
    254e:	9e e8       	ldi	r25, 0x8E	; 142
    2550:	87 2f       	mov	r24, r23
    2552:	76 2f       	mov	r23, r22
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <__floatsisf+0x5e>
    2556:	66 23       	and	r22, r22
    2558:	71 f0       	breq	.+28     	; 0x2576 <__floatsisf+0x74>
    255a:	96 e8       	ldi	r25, 0x86	; 134
    255c:	86 2f       	mov	r24, r22
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	2a f0       	brmi	.+10     	; 0x256e <__floatsisf+0x6c>
    2564:	9a 95       	dec	r25
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	88 1f       	adc	r24, r24
    256c:	da f7       	brpl	.-10     	; 0x2564 <__floatsisf+0x62>
    256e:	88 0f       	add	r24, r24
    2570:	96 95       	lsr	r25
    2572:	87 95       	ror	r24
    2574:	97 f9       	bld	r25, 7
    2576:	08 95       	ret

00002578 <__fp_cmp>:
    2578:	99 0f       	add	r25, r25
    257a:	00 08       	sbc	r0, r0
    257c:	55 0f       	add	r21, r21
    257e:	aa 0b       	sbc	r26, r26
    2580:	e0 e8       	ldi	r30, 0x80	; 128
    2582:	fe ef       	ldi	r31, 0xFE	; 254
    2584:	16 16       	cp	r1, r22
    2586:	17 06       	cpc	r1, r23
    2588:	e8 07       	cpc	r30, r24
    258a:	f9 07       	cpc	r31, r25
    258c:	c0 f0       	brcs	.+48     	; 0x25be <__fp_cmp+0x46>
    258e:	12 16       	cp	r1, r18
    2590:	13 06       	cpc	r1, r19
    2592:	e4 07       	cpc	r30, r20
    2594:	f5 07       	cpc	r31, r21
    2596:	98 f0       	brcs	.+38     	; 0x25be <__fp_cmp+0x46>
    2598:	62 1b       	sub	r22, r18
    259a:	73 0b       	sbc	r23, r19
    259c:	84 0b       	sbc	r24, r20
    259e:	95 0b       	sbc	r25, r21
    25a0:	39 f4       	brne	.+14     	; 0x25b0 <__fp_cmp+0x38>
    25a2:	0a 26       	eor	r0, r26
    25a4:	61 f0       	breq	.+24     	; 0x25be <__fp_cmp+0x46>
    25a6:	23 2b       	or	r18, r19
    25a8:	24 2b       	or	r18, r20
    25aa:	25 2b       	or	r18, r21
    25ac:	21 f4       	brne	.+8      	; 0x25b6 <__fp_cmp+0x3e>
    25ae:	08 95       	ret
    25b0:	0a 26       	eor	r0, r26
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <__fp_cmp+0x3e>
    25b4:	a1 40       	sbci	r26, 0x01	; 1
    25b6:	a6 95       	lsr	r26
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	81 1d       	adc	r24, r1
    25bc:	81 1d       	adc	r24, r1
    25be:	08 95       	ret

000025c0 <__fp_inf>:
    25c0:	97 f9       	bld	r25, 7
    25c2:	9f 67       	ori	r25, 0x7F	; 127
    25c4:	80 e8       	ldi	r24, 0x80	; 128
    25c6:	70 e0       	ldi	r23, 0x00	; 0
    25c8:	60 e0       	ldi	r22, 0x00	; 0
    25ca:	08 95       	ret

000025cc <__fp_nan>:
    25cc:	9f ef       	ldi	r25, 0xFF	; 255
    25ce:	80 ec       	ldi	r24, 0xC0	; 192
    25d0:	08 95       	ret

000025d2 <__fp_pscA>:
    25d2:	00 24       	eor	r0, r0
    25d4:	0a 94       	dec	r0
    25d6:	16 16       	cp	r1, r22
    25d8:	17 06       	cpc	r1, r23
    25da:	18 06       	cpc	r1, r24
    25dc:	09 06       	cpc	r0, r25
    25de:	08 95       	ret

000025e0 <__fp_pscB>:
    25e0:	00 24       	eor	r0, r0
    25e2:	0a 94       	dec	r0
    25e4:	12 16       	cp	r1, r18
    25e6:	13 06       	cpc	r1, r19
    25e8:	14 06       	cpc	r1, r20
    25ea:	05 06       	cpc	r0, r21
    25ec:	08 95       	ret

000025ee <__fp_round>:
    25ee:	09 2e       	mov	r0, r25
    25f0:	03 94       	inc	r0
    25f2:	00 0c       	add	r0, r0
    25f4:	11 f4       	brne	.+4      	; 0x25fa <__fp_round+0xc>
    25f6:	88 23       	and	r24, r24
    25f8:	52 f0       	brmi	.+20     	; 0x260e <__fp_round+0x20>
    25fa:	bb 0f       	add	r27, r27
    25fc:	40 f4       	brcc	.+16     	; 0x260e <__fp_round+0x20>
    25fe:	bf 2b       	or	r27, r31
    2600:	11 f4       	brne	.+4      	; 0x2606 <__fp_round+0x18>
    2602:	60 ff       	sbrs	r22, 0
    2604:	04 c0       	rjmp	.+8      	; 0x260e <__fp_round+0x20>
    2606:	6f 5f       	subi	r22, 0xFF	; 255
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	8f 4f       	sbci	r24, 0xFF	; 255
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	08 95       	ret

00002610 <__fp_split3>:
    2610:	57 fd       	sbrc	r21, 7
    2612:	90 58       	subi	r25, 0x80	; 128
    2614:	44 0f       	add	r20, r20
    2616:	55 1f       	adc	r21, r21
    2618:	59 f0       	breq	.+22     	; 0x2630 <__fp_splitA+0x10>
    261a:	5f 3f       	cpi	r21, 0xFF	; 255
    261c:	71 f0       	breq	.+28     	; 0x263a <__fp_splitA+0x1a>
    261e:	47 95       	ror	r20

00002620 <__fp_splitA>:
    2620:	88 0f       	add	r24, r24
    2622:	97 fb       	bst	r25, 7
    2624:	99 1f       	adc	r25, r25
    2626:	61 f0       	breq	.+24     	; 0x2640 <__fp_splitA+0x20>
    2628:	9f 3f       	cpi	r25, 0xFF	; 255
    262a:	79 f0       	breq	.+30     	; 0x264a <__fp_splitA+0x2a>
    262c:	87 95       	ror	r24
    262e:	08 95       	ret
    2630:	12 16       	cp	r1, r18
    2632:	13 06       	cpc	r1, r19
    2634:	14 06       	cpc	r1, r20
    2636:	55 1f       	adc	r21, r21
    2638:	f2 cf       	rjmp	.-28     	; 0x261e <__fp_split3+0xe>
    263a:	46 95       	lsr	r20
    263c:	f1 df       	rcall	.-30     	; 0x2620 <__fp_splitA>
    263e:	08 c0       	rjmp	.+16     	; 0x2650 <__fp_splitA+0x30>
    2640:	16 16       	cp	r1, r22
    2642:	17 06       	cpc	r1, r23
    2644:	18 06       	cpc	r1, r24
    2646:	99 1f       	adc	r25, r25
    2648:	f1 cf       	rjmp	.-30     	; 0x262c <__fp_splitA+0xc>
    264a:	86 95       	lsr	r24
    264c:	71 05       	cpc	r23, r1
    264e:	61 05       	cpc	r22, r1
    2650:	08 94       	sec
    2652:	08 95       	ret

00002654 <__fp_zero>:
    2654:	e8 94       	clt

00002656 <__fp_szero>:
    2656:	bb 27       	eor	r27, r27
    2658:	66 27       	eor	r22, r22
    265a:	77 27       	eor	r23, r23
    265c:	cb 01       	movw	r24, r22
    265e:	97 f9       	bld	r25, 7
    2660:	08 95       	ret

00002662 <__gesf2>:
    2662:	0e 94 bc 12 	call	0x2578	; 0x2578 <__fp_cmp>
    2666:	08 f4       	brcc	.+2      	; 0x266a <__gesf2+0x8>
    2668:	8f ef       	ldi	r24, 0xFF	; 255
    266a:	08 95       	ret

0000266c <__mulsf3>:
    266c:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3x>
    2670:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_round>
    2674:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fp_pscA>
    2678:	38 f0       	brcs	.+14     	; 0x2688 <__mulsf3+0x1c>
    267a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__fp_pscB>
    267e:	20 f0       	brcs	.+8      	; 0x2688 <__mulsf3+0x1c>
    2680:	95 23       	and	r25, r21
    2682:	11 f0       	breq	.+4      	; 0x2688 <__mulsf3+0x1c>
    2684:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__fp_inf>
    2688:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__fp_nan>
    268c:	11 24       	eor	r1, r1
    268e:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__fp_szero>

00002692 <__mulsf3x>:
    2692:	0e 94 08 13 	call	0x2610	; 0x2610 <__fp_split3>
    2696:	70 f3       	brcs	.-36     	; 0x2674 <__mulsf3+0x8>

00002698 <__mulsf3_pse>:
    2698:	95 9f       	mul	r25, r21
    269a:	c1 f3       	breq	.-16     	; 0x268c <__mulsf3+0x20>
    269c:	95 0f       	add	r25, r21
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	55 1f       	adc	r21, r21
    26a2:	62 9f       	mul	r22, r18
    26a4:	f0 01       	movw	r30, r0
    26a6:	72 9f       	mul	r23, r18
    26a8:	bb 27       	eor	r27, r27
    26aa:	f0 0d       	add	r31, r0
    26ac:	b1 1d       	adc	r27, r1
    26ae:	63 9f       	mul	r22, r19
    26b0:	aa 27       	eor	r26, r26
    26b2:	f0 0d       	add	r31, r0
    26b4:	b1 1d       	adc	r27, r1
    26b6:	aa 1f       	adc	r26, r26
    26b8:	64 9f       	mul	r22, r20
    26ba:	66 27       	eor	r22, r22
    26bc:	b0 0d       	add	r27, r0
    26be:	a1 1d       	adc	r26, r1
    26c0:	66 1f       	adc	r22, r22
    26c2:	82 9f       	mul	r24, r18
    26c4:	22 27       	eor	r18, r18
    26c6:	b0 0d       	add	r27, r0
    26c8:	a1 1d       	adc	r26, r1
    26ca:	62 1f       	adc	r22, r18
    26cc:	73 9f       	mul	r23, r19
    26ce:	b0 0d       	add	r27, r0
    26d0:	a1 1d       	adc	r26, r1
    26d2:	62 1f       	adc	r22, r18
    26d4:	83 9f       	mul	r24, r19
    26d6:	a0 0d       	add	r26, r0
    26d8:	61 1d       	adc	r22, r1
    26da:	22 1f       	adc	r18, r18
    26dc:	74 9f       	mul	r23, r20
    26de:	33 27       	eor	r19, r19
    26e0:	a0 0d       	add	r26, r0
    26e2:	61 1d       	adc	r22, r1
    26e4:	23 1f       	adc	r18, r19
    26e6:	84 9f       	mul	r24, r20
    26e8:	60 0d       	add	r22, r0
    26ea:	21 1d       	adc	r18, r1
    26ec:	82 2f       	mov	r24, r18
    26ee:	76 2f       	mov	r23, r22
    26f0:	6a 2f       	mov	r22, r26
    26f2:	11 24       	eor	r1, r1
    26f4:	9f 57       	subi	r25, 0x7F	; 127
    26f6:	50 40       	sbci	r21, 0x00	; 0
    26f8:	9a f0       	brmi	.+38     	; 0x2720 <__mulsf3_pse+0x88>
    26fa:	f1 f0       	breq	.+60     	; 0x2738 <__mulsf3_pse+0xa0>
    26fc:	88 23       	and	r24, r24
    26fe:	4a f0       	brmi	.+18     	; 0x2712 <__mulsf3_pse+0x7a>
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	bb 1f       	adc	r27, r27
    2706:	66 1f       	adc	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	88 1f       	adc	r24, r24
    270c:	91 50       	subi	r25, 0x01	; 1
    270e:	50 40       	sbci	r21, 0x00	; 0
    2710:	a9 f7       	brne	.-22     	; 0x26fc <__mulsf3_pse+0x64>
    2712:	9e 3f       	cpi	r25, 0xFE	; 254
    2714:	51 05       	cpc	r21, r1
    2716:	80 f0       	brcs	.+32     	; 0x2738 <__mulsf3_pse+0xa0>
    2718:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__fp_inf>
    271c:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__fp_szero>
    2720:	5f 3f       	cpi	r21, 0xFF	; 255
    2722:	e4 f3       	brlt	.-8      	; 0x271c <__mulsf3_pse+0x84>
    2724:	98 3e       	cpi	r25, 0xE8	; 232
    2726:	d4 f3       	brlt	.-12     	; 0x271c <__mulsf3_pse+0x84>
    2728:	86 95       	lsr	r24
    272a:	77 95       	ror	r23
    272c:	67 95       	ror	r22
    272e:	b7 95       	ror	r27
    2730:	f7 95       	ror	r31
    2732:	e7 95       	ror	r30
    2734:	9f 5f       	subi	r25, 0xFF	; 255
    2736:	c1 f7       	brne	.-16     	; 0x2728 <__mulsf3_pse+0x90>
    2738:	fe 2b       	or	r31, r30
    273a:	88 0f       	add	r24, r24
    273c:	91 1d       	adc	r25, r1
    273e:	96 95       	lsr	r25
    2740:	87 95       	ror	r24
    2742:	97 f9       	bld	r25, 7
    2744:	08 95       	ret

00002746 <__divmodhi4>:
    2746:	97 fb       	bst	r25, 7
    2748:	07 2e       	mov	r0, r23
    274a:	16 f4       	brtc	.+4      	; 0x2750 <__divmodhi4+0xa>
    274c:	00 94       	com	r0
    274e:	07 d0       	rcall	.+14     	; 0x275e <__divmodhi4_neg1>
    2750:	77 fd       	sbrc	r23, 7
    2752:	09 d0       	rcall	.+18     	; 0x2766 <__divmodhi4_neg2>
    2754:	0e 94 b7 13 	call	0x276e	; 0x276e <__udivmodhi4>
    2758:	07 fc       	sbrc	r0, 7
    275a:	05 d0       	rcall	.+10     	; 0x2766 <__divmodhi4_neg2>
    275c:	3e f4       	brtc	.+14     	; 0x276c <__divmodhi4_exit>

0000275e <__divmodhi4_neg1>:
    275e:	90 95       	com	r25
    2760:	81 95       	neg	r24
    2762:	9f 4f       	sbci	r25, 0xFF	; 255
    2764:	08 95       	ret

00002766 <__divmodhi4_neg2>:
    2766:	70 95       	com	r23
    2768:	61 95       	neg	r22
    276a:	7f 4f       	sbci	r23, 0xFF	; 255

0000276c <__divmodhi4_exit>:
    276c:	08 95       	ret

0000276e <__udivmodhi4>:
    276e:	aa 1b       	sub	r26, r26
    2770:	bb 1b       	sub	r27, r27
    2772:	51 e1       	ldi	r21, 0x11	; 17
    2774:	07 c0       	rjmp	.+14     	; 0x2784 <__udivmodhi4_ep>

00002776 <__udivmodhi4_loop>:
    2776:	aa 1f       	adc	r26, r26
    2778:	bb 1f       	adc	r27, r27
    277a:	a6 17       	cp	r26, r22
    277c:	b7 07       	cpc	r27, r23
    277e:	10 f0       	brcs	.+4      	; 0x2784 <__udivmodhi4_ep>
    2780:	a6 1b       	sub	r26, r22
    2782:	b7 0b       	sbc	r27, r23

00002784 <__udivmodhi4_ep>:
    2784:	88 1f       	adc	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	5a 95       	dec	r21
    278a:	a9 f7       	brne	.-22     	; 0x2776 <__udivmodhi4_loop>
    278c:	80 95       	com	r24
    278e:	90 95       	com	r25
    2790:	bc 01       	movw	r22, r24
    2792:	cd 01       	movw	r24, r26
    2794:	08 95       	ret

00002796 <__itoa_ncheck>:
    2796:	bb 27       	eor	r27, r27
    2798:	4a 30       	cpi	r20, 0x0A	; 10
    279a:	31 f4       	brne	.+12     	; 0x27a8 <__itoa_ncheck+0x12>
    279c:	99 23       	and	r25, r25
    279e:	22 f4       	brpl	.+8      	; 0x27a8 <__itoa_ncheck+0x12>
    27a0:	bd e2       	ldi	r27, 0x2D	; 45
    27a2:	90 95       	com	r25
    27a4:	81 95       	neg	r24
    27a6:	9f 4f       	sbci	r25, 0xFF	; 255
    27a8:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__utoa_common>

000027ac <__utoa_ncheck>:
    27ac:	bb 27       	eor	r27, r27

000027ae <__utoa_common>:
    27ae:	fb 01       	movw	r30, r22
    27b0:	55 27       	eor	r21, r21
    27b2:	aa 27       	eor	r26, r26
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	aa 1f       	adc	r26, r26
    27ba:	a4 17       	cp	r26, r20
    27bc:	10 f0       	brcs	.+4      	; 0x27c2 <__utoa_common+0x14>
    27be:	a4 1b       	sub	r26, r20
    27c0:	83 95       	inc	r24
    27c2:	50 51       	subi	r21, 0x10	; 16
    27c4:	b9 f7       	brne	.-18     	; 0x27b4 <__utoa_common+0x6>
    27c6:	a0 5d       	subi	r26, 0xD0	; 208
    27c8:	aa 33       	cpi	r26, 0x3A	; 58
    27ca:	08 f0       	brcs	.+2      	; 0x27ce <__utoa_common+0x20>
    27cc:	a9 5d       	subi	r26, 0xD9	; 217
    27ce:	a1 93       	st	Z+, r26
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	79 f7       	brne	.-34     	; 0x27b2 <__utoa_common+0x4>
    27d4:	b1 11       	cpse	r27, r1
    27d6:	b1 93       	st	Z+, r27
    27d8:	11 92       	st	Z+, r1
    27da:	cb 01       	movw	r24, r22
    27dc:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <strrev>

000027e0 <strrev>:
    27e0:	dc 01       	movw	r26, r24
    27e2:	fc 01       	movw	r30, r24
    27e4:	67 2f       	mov	r22, r23
    27e6:	71 91       	ld	r23, Z+
    27e8:	77 23       	and	r23, r23
    27ea:	e1 f7       	brne	.-8      	; 0x27e4 <strrev+0x4>
    27ec:	32 97       	sbiw	r30, 0x02	; 2
    27ee:	04 c0       	rjmp	.+8      	; 0x27f8 <strrev+0x18>
    27f0:	7c 91       	ld	r23, X
    27f2:	6d 93       	st	X+, r22
    27f4:	70 83       	st	Z, r23
    27f6:	62 91       	ld	r22, -Z
    27f8:	ae 17       	cp	r26, r30
    27fa:	bf 07       	cpc	r27, r31
    27fc:	c8 f3       	brcs	.-14     	; 0x27f0 <strrev+0x10>
    27fe:	08 95       	ret

00002800 <_exit>:
    2800:	f8 94       	cli

00002802 <__stop_program>:
    2802:	ff cf       	rjmp	.-2      	; 0x2802 <__stop_program>
