
Alarm Clock AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  00002ad2  00002b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ad2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  008001de  008001de  00002c44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003652  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000125e  00000000  00000000  0000653e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ff  00000000  00000000  0000779c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000644  00000000  00000000  00008e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c97  00000000  00000000  000094e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022ef  00000000  00000000  0000a177  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000c466  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__ctors_end>
       4:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
       8:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__vector_2>
       c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      10:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      14:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      18:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      1c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      20:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      24:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      28:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      2c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      30:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      34:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      38:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      3c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      40:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      44:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      48:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      4c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      50:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      54:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      58:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      5c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      60:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>
      64:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	52 00       	.word	0x0052	; ????
      6a:	08 00       	.word	0x0008	; ????
      6c:	52 00       	.word	0x0052	; ????
      6e:	08 00       	.word	0x0008	; ????
      70:	a5 00       	.word	0x00a5	; ????
      72:	08 00       	.word	0x0008	; ????
      74:	52 00       	.word	0x0052	; ????
      76:	08 00       	.word	0x0008	; ????
      78:	52 00       	.word	0x0052	; ????
      7a:	08 00       	.word	0x0008	; ????
      7c:	93 00       	.word	0x0093	; ????
      7e:	08 00       	.word	0x0008	; ????
      80:	52 00       	.word	0x0052	; ????
      82:	08 00       	.word	0x0008	; ????
      84:	52 00       	.word	0x0052	; ????
      86:	08 00       	.word	0x0008	; ????
      88:	83 00       	.word	0x0083	; ????
      8a:	08 00       	.word	0x0008	; ????
      8c:	52 00       	.word	0x0052	; ????
      8e:	08 00       	.word	0x0008	; ????
      90:	52 00       	.word	0x0052	; ????
      92:	08 00       	.word	0x0008	; ????
      94:	75 00       	.word	0x0075	; ????
      96:	08 00       	.word	0x0008	; ????
      98:	52 00       	.word	0x0052	; ????
      9a:	08 00       	.word	0x0008	; ????
      9c:	52 00       	.word	0x0052	; ????
      9e:	08 00       	.word	0x0008	; ????
      a0:	7b 00       	.word	0x007b	; ????
      a2:	08 00       	.word	0x0008	; ????
      a4:	83 00       	.word	0x0083	; ????
      a6:	08 00       	.word	0x0008	; ????
      a8:	52 00       	.word	0x0052	; ????
      aa:	08 00       	.word	0x0008	; ????
      ac:	52 00       	.word	0x0052	; ????
      ae:	08 00       	.word	0x0008	; ????
      b0:	a5 00       	.word	0x00a5	; ????
      b2:	08 00       	.word	0x0008	; ????
      b4:	52 00       	.word	0x0052	; ????
      b6:	08 00       	.word	0x0008	; ????
      b8:	52 00       	.word	0x0052	; ????
      ba:	08 00       	.word	0x0008	; ????
      bc:	93 00       	.word	0x0093	; ????
      be:	08 00       	.word	0x0008	; ????
      c0:	52 00       	.word	0x0052	; ????
      c2:	08 00       	.word	0x0008	; ????
      c4:	52 00       	.word	0x0052	; ????
      c6:	08 00       	.word	0x0008	; ????
      c8:	83 00       	.word	0x0083	; ????
      ca:	08 00       	.word	0x0008	; ????
      cc:	52 00       	.word	0x0052	; ????
      ce:	08 00       	.word	0x0008	; ????
      d0:	52 00       	.word	0x0052	; ????
      d2:	08 00       	.word	0x0008	; ????
      d4:	75 00       	.word	0x0075	; ????
      d6:	fe ff       	.word	0xfffe	; ????
      d8:	52 00       	.word	0x0052	; ????
      da:	08 00       	.word	0x0008	; ????
      dc:	52 00       	.word	0x0052	; ????
      de:	08 00       	.word	0x0008	; ????
      e0:	a5 00       	.word	0x00a5	; ????
      e2:	08 00       	.word	0x0008	; ????
      e4:	52 00       	.word	0x0052	; ????
      e6:	08 00       	.word	0x0008	; ????
      e8:	52 00       	.word	0x0052	; ????
      ea:	08 00       	.word	0x0008	; ????
      ec:	93 00       	.word	0x0093	; ????
      ee:	08 00       	.word	0x0008	; ????
      f0:	52 00       	.word	0x0052	; ????
      f2:	08 00       	.word	0x0008	; ????
      f4:	52 00       	.word	0x0052	; ????
      f6:	08 00       	.word	0x0008	; ????
      f8:	83 00       	.word	0x0083	; ????
      fa:	08 00       	.word	0x0008	; ????
      fc:	52 00       	.word	0x0052	; ????
      fe:	08 00       	.word	0x0008	; ????
     100:	52 00       	.word	0x0052	; ????
     102:	08 00       	.word	0x0008	; ????
     104:	75 00       	.word	0x0075	; ????
     106:	08 00       	.word	0x0008	; ????
     108:	52 00       	.word	0x0052	; ????
     10a:	08 00       	.word	0x0008	; ????
     10c:	52 00       	.word	0x0052	; ????
     10e:	08 00       	.word	0x0008	; ????
     110:	7b 00       	.word	0x007b	; ????
     112:	08 00       	.word	0x0008	; ????
     114:	83 00       	.word	0x0083	; ????
     116:	08 00       	.word	0x0008	; ????
     118:	52 00       	.word	0x0052	; ????
     11a:	08 00       	.word	0x0008	; ????
     11c:	52 00       	.word	0x0052	; ????
     11e:	08 00       	.word	0x0008	; ????
     120:	a5 00       	.word	0x00a5	; ????
     122:	08 00       	.word	0x0008	; ????
     124:	52 00       	.word	0x0052	; ????
     126:	08 00       	.word	0x0008	; ????
     128:	52 00       	.word	0x0052	; ????
     12a:	08 00       	.word	0x0008	; ????
     12c:	93 00       	.word	0x0093	; ????
     12e:	08 00       	.word	0x0008	; ????
     130:	52 00       	.word	0x0052	; ????
     132:	08 00       	.word	0x0008	; ????
     134:	52 00       	.word	0x0052	; ????
     136:	08 00       	.word	0x0008	; ????
     138:	83 00       	.word	0x0083	; ????
     13a:	08 00       	.word	0x0008	; ????
     13c:	52 00       	.word	0x0052	; ????
     13e:	08 00       	.word	0x0008	; ????
     140:	52 00       	.word	0x0052	; ????
     142:	08 00       	.word	0x0008	; ????
     144:	75 00       	.word	0x0075	; ????
     146:	fe ff       	.word	0xfffe	; ????
     148:	52 00       	.word	0x0052	; ????
     14a:	08 00       	.word	0x0008	; ????
     14c:	52 00       	.word	0x0052	; ????
     14e:	08 00       	.word	0x0008	; ????
     150:	a5 00       	.word	0x00a5	; ????
     152:	08 00       	.word	0x0008	; ????
     154:	52 00       	.word	0x0052	; ????
     156:	08 00       	.word	0x0008	; ????
     158:	52 00       	.word	0x0052	; ????
     15a:	08 00       	.word	0x0008	; ????
     15c:	93 00       	.word	0x0093	; ????
     15e:	08 00       	.word	0x0008	; ????
     160:	52 00       	.word	0x0052	; ????
     162:	08 00       	.word	0x0008	; ????
     164:	52 00       	.word	0x0052	; ????
     166:	08 00       	.word	0x0008	; ????
     168:	83 00       	.word	0x0083	; ????
     16a:	08 00       	.word	0x0008	; ????
     16c:	52 00       	.word	0x0052	; ????
     16e:	08 00       	.word	0x0008	; ????
     170:	52 00       	.word	0x0052	; ????
     172:	08 00       	.word	0x0008	; ????
     174:	75 00       	.word	0x0075	; ????
     176:	08 00       	.word	0x0008	; ????
     178:	52 00       	.word	0x0052	; ????
     17a:	08 00       	.word	0x0008	; ????
     17c:	52 00       	.word	0x0052	; ????
     17e:	08 00       	.word	0x0008	; ????
     180:	7b 00       	.word	0x007b	; ????
     182:	08 00       	.word	0x0008	; ????
     184:	83 00       	.word	0x0083	; ????
     186:	08 00       	.word	0x0008	; ????
     188:	52 00       	.word	0x0052	; ????
     18a:	08 00       	.word	0x0008	; ????
     18c:	52 00       	.word	0x0052	; ????
     18e:	08 00       	.word	0x0008	; ????
     190:	a5 00       	.word	0x00a5	; ????
     192:	08 00       	.word	0x0008	; ????
     194:	52 00       	.word	0x0052	; ????
     196:	08 00       	.word	0x0008	; ????
     198:	52 00       	.word	0x0052	; ????
     19a:	08 00       	.word	0x0008	; ????
     19c:	93 00       	.word	0x0093	; ????
     19e:	08 00       	.word	0x0008	; ????
     1a0:	52 00       	.word	0x0052	; ????
     1a2:	08 00       	.word	0x0008	; ????
     1a4:	52 00       	.word	0x0052	; ????
     1a6:	08 00       	.word	0x0008	; ????
     1a8:	83 00       	.word	0x0083	; ????
     1aa:	08 00       	.word	0x0008	; ????
     1ac:	52 00       	.word	0x0052	; ????
     1ae:	08 00       	.word	0x0008	; ????
     1b0:	52 00       	.word	0x0052	; ????
     1b2:	08 00       	.word	0x0008	; ????
     1b4:	75 00       	.word	0x0075	; ????
     1b6:	fe ff       	.word	0xfffe	; ????
     1b8:	52 00       	.word	0x0052	; ????
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	52 00       	.word	0x0052	; ????
     1be:	08 00       	.word	0x0008	; ????
     1c0:	a5 00       	.word	0x00a5	; ????
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	52 00       	.word	0x0052	; ????
     1c6:	08 00       	.word	0x0008	; ????
     1c8:	52 00       	.word	0x0052	; ????
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	93 00       	.word	0x0093	; ????
     1ce:	08 00       	.word	0x0008	; ????
     1d0:	52 00       	.word	0x0052	; ????
     1d2:	08 00       	.word	0x0008	; ????
     1d4:	52 00       	.word	0x0052	; ????
     1d6:	08 00       	.word	0x0008	; ????
     1d8:	83 00       	.word	0x0083	; ????
     1da:	08 00       	.word	0x0008	; ????
     1dc:	52 00       	.word	0x0052	; ????
     1de:	08 00       	.word	0x0008	; ????
     1e0:	52 00       	.word	0x0052	; ????
     1e2:	08 00       	.word	0x0008	; ????
     1e4:	75 00       	.word	0x0075	; ????
     1e6:	08 00       	.word	0x0008	; ????
     1e8:	52 00       	.word	0x0052	; ????
     1ea:	08 00       	.word	0x0008	; ????
     1ec:	52 00       	.word	0x0052	; ????
     1ee:	08 00       	.word	0x0008	; ????
     1f0:	7b 00       	.word	0x007b	; ????
     1f2:	08 00       	.word	0x0008	; ????
     1f4:	83 00       	.word	0x0083	; ????
     1f6:	08 00       	.word	0x0008	; ????
     1f8:	52 00       	.word	0x0052	; ????
     1fa:	08 00       	.word	0x0008	; ????
     1fc:	52 00       	.word	0x0052	; ????
     1fe:	08 00       	.word	0x0008	; ????
     200:	a5 00       	.word	0x00a5	; ????
     202:	08 00       	.word	0x0008	; ????
     204:	52 00       	.word	0x0052	; ????
     206:	08 00       	.word	0x0008	; ????
     208:	52 00       	.word	0x0052	; ????
     20a:	08 00       	.word	0x0008	; ????
     20c:	93 00       	.word	0x0093	; ????
     20e:	08 00       	.word	0x0008	; ????
     210:	52 00       	.word	0x0052	; ????
     212:	08 00       	.word	0x0008	; ????
     214:	52 00       	.word	0x0052	; ????
     216:	08 00       	.word	0x0008	; ????
     218:	b9 00       	.word	0x00b9	; ????
     21a:	f0 ff       	sbrs	r31, 0
     21c:	93 00       	.word	0x0093	; ????
     21e:	f0 ff       	sbrs	r31, 0
     220:	7b 00       	.word	0x007b	; ????
     222:	f0 ff       	sbrs	r31, 0
     224:	dc 00       	.word	0x00dc	; ????
     226:	f0 ff       	sbrs	r31, 0
     228:	b9 00       	.word	0x00b9	; ????
     22a:	f0 ff       	sbrs	r31, 0
     22c:	7b 00       	.word	0x007b	; ????
     22e:	f0 ff       	sbrs	r31, 0
     230:	93 00       	.word	0x0093	; ????
     232:	f0 ff       	sbrs	r31, 0
     234:	b9 00       	.word	0x00b9	; ????
     236:	f0 ff       	sbrs	r31, 0
     238:	dc 00       	.word	0x00dc	; ????
     23a:	f0 ff       	sbrs	r31, 0
     23c:	b9 00       	.word	0x00b9	; ????
     23e:	f0 ff       	sbrs	r31, 0
     240:	93 00       	.word	0x0093	; ????
     242:	f0 ff       	sbrs	r31, 0
     244:	7b 00       	.word	0x007b	; ????
     246:	f0 ff       	sbrs	r31, 0
	...
     388:	b8 01       	movw	r22, r16
     38a:	04 00       	.word	0x0004	; ????
     38c:	b8 01       	movw	r22, r16
     38e:	04 00       	.word	0x0004	; ????
     390:	b8 01       	movw	r22, r16
     392:	04 00       	.word	0x0004	; ????
     394:	5d 01       	movw	r10, r26
     396:	f8 ff       	.word	0xfff8	; ????
     398:	0b 02       	muls	r16, r27
     39a:	10 00       	.word	0x0010	; ????
     39c:	b8 01       	movw	r22, r16
     39e:	04 00       	.word	0x0004	; ????
     3a0:	5d 01       	movw	r10, r26
     3a2:	f8 ff       	.word	0xfff8	; ????
     3a4:	0b 02       	muls	r16, r27
     3a6:	10 00       	.word	0x0010	; ????
     3a8:	b8 01       	movw	r22, r16
     3aa:	02 00       	.word	0x0002	; ????
     3ac:	93 02       	muls	r25, r19
     3ae:	04 00       	.word	0x0004	; ????
     3b0:	93 02       	muls	r25, r19
     3b2:	04 00       	.word	0x0004	; ????
     3b4:	93 02       	muls	r25, r19
     3b6:	04 00       	.word	0x0004	; ????
     3b8:	ba 02       	muls	r27, r26
     3ba:	f8 ff       	.word	0xfff8	; ????
     3bc:	0b 02       	muls	r16, r27
     3be:	10 00       	.word	0x0010	; ????
     3c0:	b8 01       	movw	r22, r16
     3c2:	04 00       	.word	0x0004	; ????
     3c4:	5d 01       	movw	r10, r26
     3c6:	f8 ff       	.word	0xfff8	; ????
     3c8:	0b 02       	muls	r16, r27
     3ca:	10 00       	.word	0x0010	; ????
     3cc:	b8 01       	movw	r22, r16
     3ce:	02 00       	.word	0x0002	; ????
     3d0:	70 03       	mulsu	r23, r16
     3d2:	04 00       	.word	0x0004	; ????
     3d4:	b8 01       	movw	r22, r16
     3d6:	f8 ff       	.word	0xfff8	; ????
     3d8:	b8 01       	movw	r22, r16
     3da:	10 00       	.word	0x0010	; ????
     3dc:	70 03       	mulsu	r23, r16
     3de:	04 00       	.word	0x0004	; ????
     3e0:	3f 03       	fmul	r19, r23
     3e2:	f8 ff       	.word	0xfff8	; ????
     3e4:	10 03       	mulsu	r17, r16
     3e6:	10 00       	.word	0x0010	; ????
     3e8:	6e 02       	muls	r22, r30
     3ea:	10 00       	.word	0x0010	; ????
     3ec:	4b 02       	muls	r20, r27
     3ee:	10 00       	.word	0x0010	; ????
     3f0:	6e 02       	muls	r22, r30
     3f2:	08 00       	.word	0x0008	; ????
     3f4:	00 00       	nop
     3f6:	08 00       	.word	0x0008	; ????
     3f8:	b8 01       	movw	r22, r16
     3fa:	08 00       	.word	0x0008	; ????
     3fc:	6e 02       	muls	r22, r30
     3fe:	04 00       	.word	0x0004	; ????
     400:	4b 02       	muls	r20, r27
     402:	f8 ff       	.word	0xfff8	; ????
     404:	2a 02       	muls	r18, r26
     406:	10 00       	.word	0x0010	; ????
     408:	0b 02       	muls	r16, r27
     40a:	10 00       	.word	0x0010	; ????
     40c:	ee 01       	movw	r28, r28
     40e:	10 00       	.word	0x0010	; ????
     410:	0b 02       	muls	r16, r27
     412:	10 00       	.word	0x0010	; ????
     414:	00 00       	nop
     416:	08 00       	.word	0x0008	; ????
     418:	5d 01       	movw	r10, r26
     41a:	08 00       	.word	0x0008	; ????
     41c:	9f 01       	movw	r18, r30
     41e:	04 00       	.word	0x0004	; ????
     420:	5d 01       	movw	r10, r26
     422:	f8 ff       	.word	0xfff8	; ????
     424:	b8 01       	movw	r22, r16
     426:	f0 ff       	sbrs	r31, 0
     428:	0b 02       	muls	r16, r27
     42a:	04 00       	.word	0x0004	; ????
     42c:	b8 01       	movw	r22, r16
     42e:	f8 ff       	.word	0xfff8	; ????
     430:	0b 02       	muls	r16, r27
     432:	10 00       	.word	0x0010	; ????
     434:	93 02       	muls	r25, r19
     436:	02 00       	.word	0x0002	; ????
     438:	70 03       	mulsu	r23, r16
     43a:	04 00       	.word	0x0004	; ????
     43c:	b8 01       	movw	r22, r16
     43e:	f8 ff       	.word	0xfff8	; ????
     440:	b8 01       	movw	r22, r16
     442:	10 00       	.word	0x0010	; ????
     444:	70 03       	mulsu	r23, r16
     446:	04 00       	.word	0x0004	; ????
     448:	3f 03       	fmul	r19, r23
     44a:	f8 ff       	.word	0xfff8	; ????
     44c:	10 03       	mulsu	r17, r16
     44e:	10 00       	.word	0x0010	; ????
     450:	6e 02       	muls	r22, r30
     452:	10 00       	.word	0x0010	; ????
     454:	4b 02       	muls	r20, r27
     456:	10 00       	.word	0x0010	; ????
     458:	6e 02       	muls	r22, r30
     45a:	08 00       	.word	0x0008	; ????
     45c:	00 00       	nop
     45e:	08 00       	.word	0x0008	; ????
     460:	b8 01       	movw	r22, r16
     462:	08 00       	.word	0x0008	; ????
     464:	6e 02       	muls	r22, r30
     466:	04 00       	.word	0x0004	; ????
     468:	4b 02       	muls	r20, r27
     46a:	f8 ff       	.word	0xfff8	; ????
     46c:	2a 02       	muls	r18, r26
     46e:	10 00       	.word	0x0010	; ????
     470:	0b 02       	muls	r16, r27
     472:	10 00       	.word	0x0010	; ????
     474:	ee 01       	movw	r28, r28
     476:	10 00       	.word	0x0010	; ????
     478:	0b 02       	muls	r16, r27
     47a:	10 00       	.word	0x0010	; ????
     47c:	00 00       	nop
     47e:	08 00       	.word	0x0008	; ????
     480:	5d 01       	movw	r10, r26
     482:	08 00       	.word	0x0008	; ????
     484:	9f 01       	movw	r18, r30
     486:	04 00       	.word	0x0004	; ????
     488:	5d 01       	movw	r10, r26
     48a:	f8 ff       	.word	0xfff8	; ????
     48c:	b8 01       	movw	r22, r16
     48e:	f0 ff       	sbrs	r31, 0
     490:	b8 01       	movw	r22, r16
     492:	04 00       	.word	0x0004	; ????
     494:	5d 01       	movw	r10, r26
     496:	f8 ff       	.word	0xfff8	; ????
     498:	0b 02       	muls	r16, r27
     49a:	10 00       	.word	0x0010	; ????
     49c:	b8 01       	movw	r22, r16
     49e:	02 00       	.word	0x0002	; ????
	...
     6a8:	88 01       	movw	r16, r16
     6aa:	08 00       	.word	0x0008	; ????
     6ac:	06 01       	movw	r0, r12
     6ae:	08 00       	.word	0x0008	; ????
     6b0:	37 01       	movw	r6, r14
     6b2:	10 00       	.word	0x0010	; ????
     6b4:	5d 01       	movw	r10, r26
     6b6:	10 00       	.word	0x0010	; ????
     6b8:	88 01       	movw	r16, r16
     6ba:	08 00       	.word	0x0008	; ????
     6bc:	06 01       	movw	r0, r12
     6be:	08 00       	.word	0x0008	; ????
     6c0:	37 01       	movw	r6, r14
     6c2:	10 00       	.word	0x0010	; ????
     6c4:	5d 01       	movw	r10, r26
     6c6:	10 00       	.word	0x0010	; ????
     6c8:	88 01       	movw	r16, r16
     6ca:	08 00       	.word	0x0008	; ????
     6cc:	06 01       	movw	r0, r12
     6ce:	08 00       	.word	0x0008	; ????
     6d0:	37 01       	movw	r6, r14
     6d2:	10 00       	.word	0x0010	; ????
     6d4:	5d 01       	movw	r10, r26
     6d6:	10 00       	.word	0x0010	; ????
     6d8:	88 01       	movw	r16, r16
     6da:	08 00       	.word	0x0008	; ????
     6dc:	06 01       	movw	r0, r12
     6de:	08 00       	.word	0x0008	; ????
     6e0:	37 01       	movw	r6, r14
     6e2:	10 00       	.word	0x0010	; ????
     6e4:	5d 01       	movw	r10, r26
     6e6:	10 00       	.word	0x0010	; ????
     6e8:	88 01       	movw	r16, r16
     6ea:	08 00       	.word	0x0008	; ????
     6ec:	06 01       	movw	r0, r12
     6ee:	08 00       	.word	0x0008	; ????
     6f0:	4a 01       	movw	r8, r20
     6f2:	10 00       	.word	0x0010	; ????
     6f4:	5d 01       	movw	r10, r26
     6f6:	10 00       	.word	0x0010	; ????
     6f8:	88 01       	movw	r16, r16
     6fa:	08 00       	.word	0x0008	; ????
     6fc:	06 01       	movw	r0, r12
     6fe:	08 00       	.word	0x0008	; ????
     700:	4a 01       	movw	r8, r20
     702:	10 00       	.word	0x0010	; ????
     704:	5d 01       	movw	r10, r26
     706:	10 00       	.word	0x0010	; ????
     708:	88 01       	movw	r16, r16
     70a:	08 00       	.word	0x0008	; ????
     70c:	06 01       	movw	r0, r12
     70e:	08 00       	.word	0x0008	; ????
     710:	4a 01       	movw	r8, r20
     712:	10 00       	.word	0x0010	; ????
     714:	5d 01       	movw	r10, r26
     716:	10 00       	.word	0x0010	; ????
     718:	88 01       	movw	r16, r16
     71a:	08 00       	.word	0x0008	; ????
     71c:	06 01       	movw	r0, r12
     71e:	08 00       	.word	0x0008	; ????
     720:	4a 01       	movw	r8, r20
     722:	10 00       	.word	0x0010	; ????
     724:	5d 01       	movw	r10, r26
     726:	10 00       	.word	0x0010	; ????
     728:	88 01       	movw	r16, r16
     72a:	fc ff       	.word	0xfffc	; ????
     72c:	06 01       	movw	r0, r12
     72e:	fc ff       	.word	0xfffc	; ????
     730:	37 01       	movw	r6, r14
     732:	10 00       	.word	0x0010	; ????
     734:	5d 01       	movw	r10, r26
     736:	10 00       	.word	0x0010	; ????
     738:	88 01       	movw	r16, r16
     73a:	04 00       	.word	0x0004	; ????
     73c:	06 01       	movw	r0, r12
     73e:	04 00       	.word	0x0004	; ????
     740:	37 01       	movw	r6, r14
     742:	10 00       	.word	0x0010	; ????
     744:	5d 01       	movw	r10, r26
     746:	10 00       	.word	0x0010	; ????
     748:	26 01       	movw	r4, r12
     74a:	ff ff       	.word	0xffff	; ????
     74c:	5d 01       	movw	r10, r26
     74e:	fc ff       	.word	0xfffc	; ????
     750:	e9 00       	.word	0x00e9	; ????
     752:	fc ff       	.word	0xfffc	; ????
     754:	37 01       	movw	r6, r14
     756:	10 00       	.word	0x0010	; ????
     758:	26 01       	movw	r4, r12
     75a:	10 00       	.word	0x0010	; ????
     75c:	5d 01       	movw	r10, r26
     75e:	04 00       	.word	0x0004	; ????
     760:	e9 00       	.word	0x00e9	; ????
     762:	fc ff       	.word	0xfffc	; ????
     764:	37 01       	movw	r6, r14
     766:	10 00       	.word	0x0010	; ????
     768:	26 01       	movw	r4, r12
     76a:	10 00       	.word	0x0010	; ????
     76c:	06 01       	movw	r0, r12
     76e:	ff ff       	.word	0xffff	; ????
     770:	88 01       	movw	r16, r16
     772:	fc ff       	.word	0xfffc	; ????
     774:	06 01       	movw	r0, r12
     776:	fc ff       	.word	0xfffc	; ????
     778:	37 01       	movw	r6, r14
     77a:	10 00       	.word	0x0010	; ????
     77c:	5d 01       	movw	r10, r26
     77e:	10 00       	.word	0x0010	; ????
     780:	88 01       	movw	r16, r16
     782:	04 00       	.word	0x0004	; ????
     784:	06 01       	movw	r0, r12
     786:	04 00       	.word	0x0004	; ????
     788:	37 01       	movw	r6, r14
     78a:	10 00       	.word	0x0010	; ????
     78c:	5d 01       	movw	r10, r26
     78e:	10 00       	.word	0x0010	; ????
     790:	26 01       	movw	r4, r12
     792:	ff ff       	.word	0xffff	; ????
     794:	5d 01       	movw	r10, r26
     796:	fc ff       	.word	0xfffc	; ????
     798:	e9 00       	.word	0x00e9	; ????
     79a:	fc ff       	.word	0xfffc	; ????
     79c:	37 01       	movw	r6, r14
     79e:	10 00       	.word	0x0010	; ????
     7a0:	26 01       	movw	r4, r12
     7a2:	10 00       	.word	0x0010	; ????
     7a4:	5d 01       	movw	r10, r26
     7a6:	04 00       	.word	0x0004	; ????
     7a8:	e9 00       	.word	0x00e9	; ????
     7aa:	fc ff       	.word	0xfffc	; ????
     7ac:	37 01       	movw	r6, r14
     7ae:	10 00       	.word	0x0010	; ????
     7b0:	26 01       	movw	r4, r12
     7b2:	10 00       	.word	0x0010	; ????
     7b4:	06 01       	movw	r0, r12
     7b6:	ff ff       	.word	0xffff	; ????
     7b8:	88 01       	movw	r16, r16
     7ba:	fc ff       	.word	0xfffc	; ????
     7bc:	06 01       	movw	r0, r12
     7be:	fc ff       	.word	0xfffc	; ????
     7c0:	37 01       	movw	r6, r14
     7c2:	10 00       	.word	0x0010	; ????
     7c4:	5d 01       	movw	r10, r26
     7c6:	10 00       	.word	0x0010	; ????
     7c8:	88 01       	movw	r16, r16
     7ca:	04 00       	.word	0x0004	; ????
     7cc:	06 01       	movw	r0, r12
     7ce:	04 00       	.word	0x0004	; ????
     7d0:	37 01       	movw	r6, r14
     7d2:	10 00       	.word	0x0010	; ????
     7d4:	5d 01       	movw	r10, r26
     7d6:	10 00       	.word	0x0010	; ????
     7d8:	26 01       	movw	r4, r12
     7da:	fe ff       	.word	0xfffe	; ????
     7dc:	5d 01       	movw	r10, r26
     7de:	fc ff       	.word	0xfffc	; ????
     7e0:	e9 00       	.word	0x00e9	; ????
     7e2:	fc ff       	.word	0xfffc	; ????
     7e4:	26 01       	movw	r4, r12
     7e6:	f8 ff       	.word	0xfff8	; ????
     7e8:	37 01       	movw	r6, r14
     7ea:	f8 ff       	.word	0xfff8	; ????
     7ec:	26 01       	movw	r4, r12
     7ee:	f8 ff       	.word	0xfff8	; ????
     7f0:	e9 00       	.word	0x00e9	; ????
     7f2:	f8 ff       	.word	0xfff8	; ????
     7f4:	06 01       	movw	r0, r12
     7f6:	ff ff       	.word	0xffff	; ????
     7f8:	0b 02       	muls	r16, r27
     7fa:	fe ff       	.word	0xfffe	; ????
     7fc:	d2 01       	movw	r26, r4
     7fe:	fe ff       	.word	0xfffe	; ????
     800:	06 01       	movw	r0, r12
     802:	fe ff       	.word	0xfffe	; ????
     804:	88 01       	movw	r16, r16
     806:	fe ff       	.word	0xfffe	; ????
     808:	37 01       	movw	r6, r14
     80a:	fe ff       	.word	0xfffe	; ????
     80c:	37 01       	movw	r6, r14
     80e:	fc ff       	.word	0xfffc	; ????
     810:	5d 01       	movw	r10, r26
     812:	fc ff       	.word	0xfffc	; ????
     814:	88 01       	movw	r16, r16
     816:	ff ff       	.word	0xffff	; ????
     818:	0b 02       	muls	r16, r27
     81a:	fe ff       	.word	0xfffe	; ????
     81c:	d2 01       	movw	r26, r4
     81e:	fe ff       	.word	0xfffe	; ????
     820:	06 01       	movw	r0, r12
     822:	fe ff       	.word	0xfffe	; ????
     824:	88 01       	movw	r16, r16
     826:	fe ff       	.word	0xfffe	; ????
     828:	37 01       	movw	r6, r14
     82a:	fe ff       	.word	0xfffe	; ????
     82c:	37 01       	movw	r6, r14
     82e:	fc ff       	.word	0xfffc	; ????
     830:	26 01       	movw	r4, r12
     832:	fc ff       	.word	0xfffc	; ????
     834:	0b 02       	muls	r16, r27
     836:	08 00       	.word	0x0008	; ????
     838:	88 01       	movw	r16, r16
     83a:	08 00       	.word	0x0008	; ????
     83c:	9f 01       	movw	r18, r30
     83e:	10 00       	.word	0x0010	; ????
     840:	d2 01       	movw	r26, r4
     842:	10 00       	.word	0x0010	; ????
     844:	0b 02       	muls	r16, r27
     846:	08 00       	.word	0x0008	; ????
     848:	88 01       	movw	r16, r16
     84a:	08 00       	.word	0x0008	; ????
     84c:	9f 01       	movw	r18, r30
     84e:	10 00       	.word	0x0010	; ????
     850:	d2 01       	movw	r26, r4
     852:	10 00       	.word	0x0010	; ????
     854:	0b 02       	muls	r16, r27
     856:	08 00       	.word	0x0008	; ????
     858:	88 01       	movw	r16, r16
     85a:	08 00       	.word	0x0008	; ????
     85c:	9f 01       	movw	r18, r30
     85e:	10 00       	.word	0x0010	; ????
     860:	d2 01       	movw	r26, r4
     862:	10 00       	.word	0x0010	; ????
     864:	0b 02       	muls	r16, r27
     866:	08 00       	.word	0x0008	; ????
     868:	88 01       	movw	r16, r16
     86a:	08 00       	.word	0x0008	; ????
     86c:	9f 01       	movw	r18, r30
     86e:	10 00       	.word	0x0010	; ????
     870:	d2 01       	movw	r26, r4
     872:	10 00       	.word	0x0010	; ????
     874:	00 00       	nop
     876:	04 00       	.word	0x0004	; ????
     878:	3f 03       	fmul	r19, r23
     87a:	10 00       	.word	0x0010	; ????
     87c:	a4 03       	fmuls	r18, r20
     87e:	10 00       	.word	0x0010	; ????
     880:	17 04       	cpc	r1, r7
     882:	08 00       	.word	0x0008	; ????
     884:	10 03       	mulsu	r17, r16
     886:	08 00       	.word	0x0008	; ????
     888:	3f 03       	fmul	r19, r23
     88a:	10 00       	.word	0x0010	; ????
     88c:	a4 03       	fmuls	r18, r20
     88e:	10 00       	.word	0x0010	; ????
     890:	17 04       	cpc	r1, r7
     892:	08 00       	.word	0x0008	; ????
     894:	10 03       	mulsu	r17, r16
     896:	10 00       	.word	0x0010	; ????
     898:	3f 03       	fmul	r19, r23
     89a:	10 00       	.word	0x0010	; ????
     89c:	a4 03       	fmuls	r18, r20
     89e:	10 00       	.word	0x0010	; ????
     8a0:	17 04       	cpc	r1, r7
     8a2:	08 00       	.word	0x0008	; ????
     8a4:	10 03       	mulsu	r17, r16
     8a6:	08 00       	.word	0x0008	; ????
     8a8:	3f 03       	fmul	r19, r23
     8aa:	10 00       	.word	0x0010	; ????
     8ac:	a4 03       	fmuls	r18, r20
     8ae:	10 00       	.word	0x0010	; ????
	...
     9c8:	4a 01       	movw	r8, r20
     9ca:	fc ff       	.word	0xfffc	; ????
     9cc:	00 00       	nop
     9ce:	08 00       	.word	0x0008	; ????
     9d0:	72 01       	movw	r14, r4
     9d2:	08 00       	.word	0x0008	; ????
     9d4:	88 01       	movw	r16, r16
     9d6:	fc ff       	.word	0xfffc	; ????
     9d8:	00 00       	nop
     9da:	08 00       	.word	0x0008	; ????
     9dc:	37 01       	movw	r6, r14
     9de:	08 00       	.word	0x0008	; ????
     9e0:	4a 01       	movw	r8, r20
     9e2:	f8 ff       	.word	0xfff8	; ????
     9e4:	72 01       	movw	r14, r4
     9e6:	08 00       	.word	0x0008	; ????
     9e8:	88 01       	movw	r16, r16
     9ea:	f8 ff       	.word	0xfff8	; ????
     9ec:	0b 02       	muls	r16, r27
     9ee:	08 00       	.word	0x0008	; ????
     9f0:	ee 01       	movw	r28, r28
     9f2:	f8 ff       	.word	0xfff8	; ????
     9f4:	4a 01       	movw	r8, r20
     9f6:	08 00       	.word	0x0008	; ????
     9f8:	88 01       	movw	r16, r16
     9fa:	f8 ff       	.word	0xfff8	; ????
     9fc:	ee 01       	movw	r28, r28
     9fe:	08 00       	.word	0x0008	; ????
     a00:	d2 01       	movw	r26, r4
     a02:	02 00       	.word	0x0002	; ????
     a04:	b8 01       	movw	r22, r16
     a06:	f0 ff       	sbrs	r31, 0
     a08:	88 01       	movw	r16, r16
     a0a:	f0 ff       	sbrs	r31, 0
     a0c:	4a 01       	movw	r8, r20
     a0e:	f0 ff       	sbrs	r31, 0
     a10:	26 01       	movw	r4, r12
     a12:	f0 ff       	sbrs	r31, 0
     a14:	4a 01       	movw	r8, r20
     a16:	02 00       	.word	0x0002	; ????
     a18:	00 00       	nop
     a1a:	04 00       	.word	0x0004	; ????
     a1c:	00 00       	nop
     a1e:	08 00       	.word	0x0008	; ????
     a20:	37 01       	movw	r6, r14
     a22:	04 00       	.word	0x0004	; ????
     a24:	4a 01       	movw	r8, r20
     a26:	fc ff       	.word	0xfffc	; ????
     a28:	00 00       	nop
     a2a:	08 00       	.word	0x0008	; ????
     a2c:	72 01       	movw	r14, r4
     a2e:	08 00       	.word	0x0008	; ????
     a30:	88 01       	movw	r16, r16
     a32:	fc ff       	.word	0xfffc	; ????
     a34:	00 00       	nop
     a36:	08 00       	.word	0x0008	; ????
     a38:	37 01       	movw	r6, r14
     a3a:	08 00       	.word	0x0008	; ????
     a3c:	4a 01       	movw	r8, r20
     a3e:	f8 ff       	.word	0xfff8	; ????
     a40:	72 01       	movw	r14, r4
     a42:	08 00       	.word	0x0008	; ????
     a44:	88 01       	movw	r16, r16
     a46:	f8 ff       	.word	0xfff8	; ????
     a48:	0b 02       	muls	r16, r27
     a4a:	08 00       	.word	0x0008	; ????
     a4c:	ee 01       	movw	r28, r28
     a4e:	f8 ff       	.word	0xfff8	; ????
     a50:	88 01       	movw	r16, r16
     a52:	08 00       	.word	0x0008	; ????
     a54:	ee 01       	movw	r28, r28
     a56:	f8 ff       	.word	0xfff8	; ????
     a58:	93 02       	muls	r25, r19
     a5a:	08 00       	.word	0x0008	; ????
     a5c:	6e 02       	muls	r22, r30
     a5e:	01 00       	.word	0x0001	; ????
     a60:	4b 02       	muls	r20, r27
     a62:	02 00       	.word	0x0002	; ????
     a64:	00 00       	nop
     a66:	04 00       	.word	0x0004	; ????
     a68:	00 00       	nop
     a6a:	08 00       	.word	0x0008	; ????
     a6c:	37 01       	movw	r6, r14
     a6e:	08 00       	.word	0x0008	; ????
     a70:	4a 01       	movw	r8, r20
     a72:	fc ff       	.word	0xfffc	; ????
     a74:	00 00       	nop
     a76:	08 00       	.word	0x0008	; ????
     a78:	72 01       	movw	r14, r4
     a7a:	08 00       	.word	0x0008	; ????
     a7c:	88 01       	movw	r16, r16
     a7e:	fc ff       	.word	0xfffc	; ????
     a80:	00 00       	nop
     a82:	08 00       	.word	0x0008	; ????
     a84:	37 01       	movw	r6, r14
     a86:	08 00       	.word	0x0008	; ????
     a88:	4a 01       	movw	r8, r20
     a8a:	f8 ff       	.word	0xfff8	; ????
     a8c:	72 01       	movw	r14, r4
     a8e:	08 00       	.word	0x0008	; ????
     a90:	88 01       	movw	r16, r16
     a92:	f8 ff       	.word	0xfff8	; ????
     a94:	0b 02       	muls	r16, r27
     a96:	08 00       	.word	0x0008	; ????
     a98:	ee 01       	movw	r28, r28
     a9a:	f8 ff       	.word	0xfff8	; ????
     a9c:	4a 01       	movw	r8, r20
     a9e:	08 00       	.word	0x0008	; ????
     aa0:	88 01       	movw	r16, r16
     aa2:	f8 ff       	.word	0xfff8	; ????
     aa4:	ee 01       	movw	r28, r28
     aa6:	08 00       	.word	0x0008	; ????
     aa8:	d2 01       	movw	r26, r4
     aaa:	02 00       	.word	0x0002	; ????
     aac:	b8 01       	movw	r22, r16
     aae:	f0 ff       	sbrs	r31, 0
     ab0:	88 01       	movw	r16, r16
     ab2:	f0 ff       	sbrs	r31, 0
     ab4:	4a 01       	movw	r8, r20
     ab6:	f0 ff       	sbrs	r31, 0
     ab8:	26 01       	movw	r4, r12
     aba:	f0 ff       	sbrs	r31, 0
     abc:	4a 01       	movw	r8, r20
     abe:	fc ff       	.word	0xfffc	; ????
     ac0:	00 00       	nop
     ac2:	04 00       	.word	0x0004	; ????
     ac4:	00 00       	nop
     ac6:	04 00       	.word	0x0004	; ????
     ac8:	93 02       	muls	r25, r19
     aca:	f8 ff       	.word	0xfff8	; ????
     acc:	4b 02       	muls	r20, r27
     ace:	08 00       	.word	0x0008	; ????
     ad0:	ee 01       	movw	r28, r28
     ad2:	f8 ff       	.word	0xfff8	; ????
     ad4:	b8 01       	movw	r22, r16
     ad6:	08 00       	.word	0x0008	; ????
     ad8:	88 01       	movw	r16, r16
     ada:	f8 ff       	.word	0xfff8	; ????
     adc:	4a 01       	movw	r8, r20
     ade:	f8 ff       	.word	0xfff8	; ????
     ae0:	d2 01       	movw	r26, r4
     ae2:	10 00       	.word	0x0010	; ????
     ae4:	b8 01       	movw	r22, r16
     ae6:	f8 ff       	.word	0xfff8	; ????
     ae8:	d2 01       	movw	r26, r4
     aea:	10 00       	.word	0x0010	; ????
     aec:	b8 01       	movw	r22, r16
     aee:	f8 ff       	.word	0xfff8	; ????
     af0:	d2 01       	movw	r26, r4
     af2:	10 00       	.word	0x0010	; ????
     af4:	b8 01       	movw	r22, r16
     af6:	f8 ff       	.word	0xfff8	; ????
     af8:	d2 01       	movw	r26, r4
     afa:	10 00       	.word	0x0010	; ????
     afc:	b8 01       	movw	r22, r16
     afe:	f8 ff       	.word	0xfff8	; ????
     b00:	88 01       	movw	r16, r16
     b02:	f0 ff       	sbrs	r31, 0
     b04:	4a 01       	movw	r8, r20
     b06:	f0 ff       	sbrs	r31, 0
     b08:	26 01       	movw	r4, r12
     b0a:	f0 ff       	sbrs	r31, 0
     b0c:	4a 01       	movw	r8, r20
     b0e:	10 00       	.word	0x0010	; ????
     b10:	4a 01       	movw	r8, r20
     b12:	10 00       	.word	0x0010	; ????
     b14:	4a 01       	movw	r8, r20
     b16:	02 00       	.word	0x0002	; ????
	...
     ce8:	00 00       	nop
     cea:	04 00       	.word	0x0004	; ????
     cec:	00 00       	nop
     cee:	08 00       	.word	0x0008	; ????
     cf0:	00 00       	nop
     cf2:	08 00       	.word	0x0008	; ????
     cf4:	00 00       	nop
     cf6:	08 00       	.word	0x0008	; ????
     cf8:	4a 01       	movw	r8, r20
     cfa:	08 00       	.word	0x0008	; ????
     cfc:	b8 01       	movw	r22, r16
     cfe:	08 00       	.word	0x0008	; ????
     d00:	0b 02       	muls	r16, r27
     d02:	08 00       	.word	0x0008	; ????
     d04:	ee 01       	movw	r28, r28
     d06:	08 00       	.word	0x0008	; ????
     d08:	b8 01       	movw	r22, r16
     d0a:	08 00       	.word	0x0008	; ????
     d0c:	0b 02       	muls	r16, r27
     d0e:	08 00       	.word	0x0008	; ????
     d10:	b8 01       	movw	r22, r16
     d12:	08 00       	.word	0x0008	; ????
     d14:	ee 01       	movw	r28, r28
     d16:	08 00       	.word	0x0008	; ????
     d18:	b8 01       	movw	r22, r16
     d1a:	08 00       	.word	0x0008	; ????
     d1c:	5d 01       	movw	r10, r26
     d1e:	08 00       	.word	0x0008	; ????
     d20:	88 01       	movw	r16, r16
     d22:	08 00       	.word	0x0008	; ????
     d24:	4a 01       	movw	r8, r20
     d26:	02 00       	.word	0x0002	; ????
     d28:	4a 01       	movw	r8, r20
     d2a:	08 00       	.word	0x0008	; ????
     d2c:	b8 01       	movw	r22, r16
     d2e:	08 00       	.word	0x0008	; ????
     d30:	0b 02       	muls	r16, r27
     d32:	08 00       	.word	0x0008	; ????
     d34:	ee 01       	movw	r28, r28
     d36:	08 00       	.word	0x0008	; ????
     d38:	b8 01       	movw	r22, r16
     d3a:	08 00       	.word	0x0008	; ????
     d3c:	0b 02       	muls	r16, r27
     d3e:	08 00       	.word	0x0008	; ????
     d40:	b8 01       	movw	r22, r16
     d42:	08 00       	.word	0x0008	; ????
     d44:	0b 02       	muls	r16, r27
     d46:	08 00       	.word	0x0008	; ????
     d48:	b8 01       	movw	r22, r16
     d4a:	08 00       	.word	0x0008	; ????
     d4c:	4a 01       	movw	r8, r20
     d4e:	08 00       	.word	0x0008	; ????
     d50:	37 01       	movw	r6, r14
     d52:	08 00       	.word	0x0008	; ????
     d54:	26 01       	movw	r4, r12
     d56:	02 00       	.word	0x0002	; ????
     d58:	26 01       	movw	r4, r12
     d5a:	08 00       	.word	0x0008	; ????
     d5c:	5d 01       	movw	r10, r26
     d5e:	08 00       	.word	0x0008	; ????
     d60:	9f 01       	movw	r18, r30
     d62:	08 00       	.word	0x0008	; ????
     d64:	ee 01       	movw	r28, r28
     d66:	02 00       	.word	0x0002	; ????
     d68:	26 01       	movw	r4, r12
     d6a:	08 00       	.word	0x0008	; ????
     d6c:	5d 01       	movw	r10, r26
     d6e:	08 00       	.word	0x0008	; ????
     d70:	9f 01       	movw	r18, r30
     d72:	08 00       	.word	0x0008	; ????
     d74:	b8 01       	movw	r22, r16
     d76:	02 00       	.word	0x0002	; ????
     d78:	06 01       	movw	r0, r12
     d7a:	08 00       	.word	0x0008	; ????
     d7c:	06 01       	movw	r0, r12
     d7e:	08 00       	.word	0x0008	; ????
     d80:	88 01       	movw	r16, r16
     d82:	08 00       	.word	0x0008	; ????
     d84:	5d 01       	movw	r10, r26
     d86:	08 00       	.word	0x0008	; ????
     d88:	4a 01       	movw	r8, r20
     d8a:	08 00       	.word	0x0008	; ????
     d8c:	88 01       	movw	r16, r16
     d8e:	08 00       	.word	0x0008	; ????
     d90:	5d 01       	movw	r10, r26
     d92:	08 00       	.word	0x0008	; ????
     d94:	5d 01       	movw	r10, r26
     d96:	08 00       	.word	0x0008	; ????
     d98:	4a 01       	movw	r8, r20
     d9a:	08 00       	.word	0x0008	; ????
     d9c:	4a 01       	movw	r8, r20
     d9e:	08 00       	.word	0x0008	; ????
     da0:	9f 01       	movw	r18, r30
     da2:	08 00       	.word	0x0008	; ????
     da4:	b8 01       	movw	r22, r16
     da6:	02 00       	.word	0x0002	; ????
     da8:	00 00       	nop
     daa:	08 00       	.word	0x0008	; ????
     dac:	b8 01       	movw	r22, r16
     dae:	08 00       	.word	0x0008	; ????
     db0:	b8 01       	movw	r22, r16
     db2:	08 00       	.word	0x0008	; ????
     db4:	9f 01       	movw	r18, r30
     db6:	08 00       	.word	0x0008	; ????
     db8:	88 01       	movw	r16, r16
     dba:	02 00       	.word	0x0002	; ????
     dbc:	ee 01       	movw	r28, r28
     dbe:	08 00       	.word	0x0008	; ????
     dc0:	b8 01       	movw	r22, r16
     dc2:	08 00       	.word	0x0008	; ????
     dc4:	5d 01       	movw	r10, r26
     dc6:	08 00       	.word	0x0008	; ????
     dc8:	4a 01       	movw	r8, r20
     dca:	02 00       	.word	0x0002	; ????
     dcc:	4a 01       	movw	r8, r20
     dce:	08 00       	.word	0x0008	; ????
     dd0:	88 01       	movw	r16, r16
     dd2:	08 00       	.word	0x0008	; ????
     dd4:	4a 01       	movw	r8, r20
     dd6:	08 00       	.word	0x0008	; ????
     dd8:	26 01       	movw	r4, r12
     dda:	02 00       	.word	0x0002	; ????
     ddc:	26 01       	movw	r4, r12
     dde:	08 00       	.word	0x0008	; ????
     de0:	26 01       	movw	r4, r12
     de2:	08 00       	.word	0x0008	; ????
     de4:	5d 01       	movw	r10, r26
     de6:	08 00       	.word	0x0008	; ????
     de8:	37 01       	movw	r6, r14
     dea:	08 00       	.word	0x0008	; ????
     dec:	4a 01       	movw	r8, r20
     dee:	02 00       	.word	0x0002	; ????
     df0:	00 00       	nop
     df2:	08 00       	.word	0x0008	; ????
     df4:	4a 01       	movw	r8, r20
     df6:	08 00       	.word	0x0008	; ????
     df8:	b8 01       	movw	r22, r16
     dfa:	08 00       	.word	0x0008	; ????
     dfc:	0b 02       	muls	r16, r27
     dfe:	08 00       	.word	0x0008	; ????
     e00:	ee 01       	movw	r28, r28
     e02:	08 00       	.word	0x0008	; ????
     e04:	b8 01       	movw	r22, r16
     e06:	08 00       	.word	0x0008	; ????
     e08:	0b 02       	muls	r16, r27
     e0a:	08 00       	.word	0x0008	; ????
     e0c:	b8 01       	movw	r22, r16
     e0e:	08 00       	.word	0x0008	; ????
     e10:	ee 01       	movw	r28, r28
     e12:	08 00       	.word	0x0008	; ????
     e14:	b8 01       	movw	r22, r16
     e16:	08 00       	.word	0x0008	; ????
     e18:	5d 01       	movw	r10, r26
     e1a:	08 00       	.word	0x0008	; ????
     e1c:	88 01       	movw	r16, r16
     e1e:	08 00       	.word	0x0008	; ????
     e20:	4a 01       	movw	r8, r20
     e22:	02 00       	.word	0x0002	; ????
     e24:	4a 01       	movw	r8, r20
     e26:	08 00       	.word	0x0008	; ????
     e28:	b8 01       	movw	r22, r16
     e2a:	08 00       	.word	0x0008	; ????
     e2c:	0b 02       	muls	r16, r27
     e2e:	08 00       	.word	0x0008	; ????
     e30:	ee 01       	movw	r28, r28
     e32:	08 00       	.word	0x0008	; ????
     e34:	b8 01       	movw	r22, r16
     e36:	08 00       	.word	0x0008	; ????
     e38:	0b 02       	muls	r16, r27
     e3a:	08 00       	.word	0x0008	; ????
     e3c:	b8 01       	movw	r22, r16
     e3e:	08 00       	.word	0x0008	; ????
     e40:	0b 02       	muls	r16, r27
     e42:	08 00       	.word	0x0008	; ????
     e44:	b8 01       	movw	r22, r16
     e46:	08 00       	.word	0x0008	; ????
     e48:	4a 01       	movw	r8, r20
     e4a:	08 00       	.word	0x0008	; ????
     e4c:	37 01       	movw	r6, r14
     e4e:	08 00       	.word	0x0008	; ????
     e50:	26 01       	movw	r4, r12
     e52:	02 00       	.word	0x0002	; ????
     e54:	26 01       	movw	r4, r12
     e56:	08 00       	.word	0x0008	; ????
     e58:	5d 01       	movw	r10, r26
     e5a:	08 00       	.word	0x0008	; ????
     e5c:	9f 01       	movw	r18, r30
     e5e:	08 00       	.word	0x0008	; ????
     e60:	ee 01       	movw	r28, r28
     e62:	02 00       	.word	0x0002	; ????
     e64:	26 01       	movw	r4, r12
     e66:	08 00       	.word	0x0008	; ????
     e68:	5d 01       	movw	r10, r26
     e6a:	08 00       	.word	0x0008	; ????
     e6c:	9f 01       	movw	r18, r30
     e6e:	08 00       	.word	0x0008	; ????
     e70:	b8 01       	movw	r22, r16
     e72:	02 00       	.word	0x0002	; ????
     e74:	06 01       	movw	r0, r12
     e76:	08 00       	.word	0x0008	; ????
     e78:	06 01       	movw	r0, r12
     e7a:	08 00       	.word	0x0008	; ????
     e7c:	88 01       	movw	r16, r16
     e7e:	08 00       	.word	0x0008	; ????
     e80:	5d 01       	movw	r10, r26
     e82:	08 00       	.word	0x0008	; ????
     e84:	4a 01       	movw	r8, r20
     e86:	08 00       	.word	0x0008	; ????
     e88:	88 01       	movw	r16, r16
     e8a:	08 00       	.word	0x0008	; ????
     e8c:	5d 01       	movw	r10, r26
     e8e:	08 00       	.word	0x0008	; ????
     e90:	5d 01       	movw	r10, r26
     e92:	08 00       	.word	0x0008	; ????
     e94:	4a 01       	movw	r8, r20
     e96:	08 00       	.word	0x0008	; ????
     e98:	4a 01       	movw	r8, r20
     e9a:	08 00       	.word	0x0008	; ????
     e9c:	9f 01       	movw	r18, r30
     e9e:	08 00       	.word	0x0008	; ????
     ea0:	b8 01       	movw	r22, r16
     ea2:	02 00       	.word	0x0002	; ????
     ea4:	00 00       	nop
     ea6:	08 00       	.word	0x0008	; ????
     ea8:	b8 01       	movw	r22, r16
     eaa:	08 00       	.word	0x0008	; ????
     eac:	b8 01       	movw	r22, r16
     eae:	08 00       	.word	0x0008	; ????
     eb0:	9f 01       	movw	r18, r30
     eb2:	08 00       	.word	0x0008	; ????
     eb4:	88 01       	movw	r16, r16
     eb6:	02 00       	.word	0x0002	; ????
     eb8:	ee 01       	movw	r28, r28
     eba:	08 00       	.word	0x0008	; ????
     ebc:	b8 01       	movw	r22, r16
     ebe:	08 00       	.word	0x0008	; ????
     ec0:	5d 01       	movw	r10, r26
     ec2:	08 00       	.word	0x0008	; ????
     ec4:	4a 01       	movw	r8, r20
     ec6:	02 00       	.word	0x0002	; ????
     ec8:	4a 01       	movw	r8, r20
     eca:	08 00       	.word	0x0008	; ????
     ecc:	88 01       	movw	r16, r16
     ece:	08 00       	.word	0x0008	; ????
     ed0:	4a 01       	movw	r8, r20
     ed2:	08 00       	.word	0x0008	; ????
     ed4:	26 01       	movw	r4, r12
     ed6:	02 00       	.word	0x0002	; ????
     ed8:	26 01       	movw	r4, r12
     eda:	08 00       	.word	0x0008	; ????
     edc:	26 01       	movw	r4, r12
     ede:	08 00       	.word	0x0008	; ????
     ee0:	5d 01       	movw	r10, r26
     ee2:	08 00       	.word	0x0008	; ????
     ee4:	37 01       	movw	r6, r14
     ee6:	08 00       	.word	0x0008	; ????
     ee8:	4a 01       	movw	r8, r20
     eea:	02 00       	.word	0x0002	; ????
	...

00001008 <__ctors_end>:
    1008:	11 24       	eor	r1, r1
    100a:	1f be       	out	0x3f, r1	; 63
    100c:	cf ef       	ldi	r28, 0xFF	; 255
    100e:	d8 e0       	ldi	r29, 0x08	; 8
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	cd bf       	out	0x3d, r28	; 61

00001014 <__do_copy_data>:
    1014:	11 e0       	ldi	r17, 0x01	; 1
    1016:	a0 e0       	ldi	r26, 0x00	; 0
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	e2 ed       	ldi	r30, 0xD2	; 210
    101c:	fa e2       	ldi	r31, 0x2A	; 42
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <__do_copy_data+0x10>
    1020:	05 90       	lpm	r0, Z+
    1022:	0d 92       	st	X+, r0
    1024:	ae 3d       	cpi	r26, 0xDE	; 222
    1026:	b1 07       	cpc	r27, r17
    1028:	d9 f7       	brne	.-10     	; 0x1020 <__do_copy_data+0xc>

0000102a <__do_clear_bss>:
    102a:	22 e0       	ldi	r18, 0x02	; 2
    102c:	ae ed       	ldi	r26, 0xDE	; 222
    102e:	b1 e0       	ldi	r27, 0x01	; 1
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <.do_clear_bss_start>

00001032 <.do_clear_bss_loop>:
    1032:	1d 92       	st	X+, r1

00001034 <.do_clear_bss_start>:
    1034:	ab 32       	cpi	r26, 0x2B	; 43
    1036:	b2 07       	cpc	r27, r18
    1038:	e1 f7       	brne	.-8      	; 0x1032 <.do_clear_bss_loop>
    103a:	0e 94 c8 12 	call	0x2590	; 0x2590 <main>
    103e:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <_exit>

00001042 <__bad_interrupt>:
    1042:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001046 <_Z7powerOfii>:
		return true;
	}
	else{
		return false;
	}
}
    1046:	9c 01       	movw	r18, r24
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	61 15       	cp	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	59 f0       	breq	.+22     	; 0x1068 <_Z7powerOfii+0x22>
    1052:	ac 01       	movw	r20, r24
    1054:	42 9f       	mul	r20, r18
    1056:	c0 01       	movw	r24, r0
    1058:	43 9f       	mul	r20, r19
    105a:	90 0d       	add	r25, r0
    105c:	52 9f       	mul	r21, r18
    105e:	90 0d       	add	r25, r0
    1060:	11 24       	eor	r1, r1
    1062:	61 50       	subi	r22, 0x01	; 1
    1064:	71 09       	sbc	r23, r1
    1066:	f2 cf       	rjmp	.-28     	; 0x104c <_Z7powerOfii+0x6>
    1068:	08 95       	ret

0000106a <_Z9ringAlarmi>:
void ringAlarm(int tone){
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	ec 01       	movw	r28, r24
	LCD_Clear();
    1070:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_Z9LCD_Clearv>
	LCD_String("RING!!");
    1074:	8b e8       	ldi	r24, 0x8B	; 139
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	play(tone);				//Trigger buzzer. Can be interrupted by the int1 button.
    107c:	ce 01       	movw	r24, r28
    107e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_Z4playi>
	//_delay_ms(2000);
}
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <_Z8setAlarmi>:
void setAlarm(int alarm_time){
	if (alarm_time<2400){
    1088:	80 36       	cpi	r24, 0x60	; 96
    108a:	29 e0       	ldi	r18, 0x09	; 9
    108c:	92 07       	cpc	r25, r18
    108e:	8c f4       	brge	.+34     	; 0x10b2 <_Z8setAlarmi+0x2a>
		alarmArray[numberOfAlarms] = alarm_time;
    1090:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <numberOfAlarms>
    1094:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <numberOfAlarms+0x1>
    1098:	f9 01       	movw	r30, r18
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	e7 50       	subi	r30, 0x07	; 7
    10a0:	fe 4f       	sbci	r31, 0xFE	; 254
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
		numberOfAlarms++;
    10a6:	2f 5f       	subi	r18, 0xFF	; 255
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <numberOfAlarms+0x1>
    10ae:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <numberOfAlarms>
    10b2:	08 95       	ret

000010b4 <_Z7setTonei>:
	}
}
void setTone(int t){
	toneArray[numberOfAlarms] = t;
    10b4:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <numberOfAlarms>
    10b8:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <numberOfAlarms+0x1>
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	eb 51       	subi	r30, 0x1B	; 27
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
    10c8:	08 95       	ret

000010ca <_Z16updateAlarmArrayi>:
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 91 0d 02 	lds	r20, 0x020D	; 0x80020d <numberOfAlarms>
    10d2:	50 91 0e 02 	lds	r21, 0x020E	; 0x80020e <numberOfAlarms+0x1>
    10d6:	24 17       	cp	r18, r20
    10d8:	35 07       	cpc	r19, r21
    10da:	14 f5       	brge	.+68     	; 0x1120 <_Z16updateAlarmArrayi+0x56>
		if (i<removeAlarm){
    10dc:	28 17       	cp	r18, r24
    10de:	39 07       	cpc	r19, r25
    10e0:	e4 f0       	brlt	.+56     	; 0x111a <_Z16updateAlarmArrayi+0x50>
			alarmArray[i] = alarmArray[i];
			toneArray[i] = toneArray[i];
		}
		else{
			alarmArray[i] = alarmArray[i+1];
    10e2:	a9 01       	movw	r20, r18
    10e4:	4f 5f       	subi	r20, 0xFF	; 255
    10e6:	5f 4f       	sbci	r21, 0xFF	; 255
    10e8:	44 0f       	add	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	fa 01       	movw	r30, r20
    10ee:	e7 50       	subi	r30, 0x07	; 7
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
    10f2:	a0 81       	ld	r26, Z
    10f4:	b1 81       	ldd	r27, Z+1	; 0x01
    10f6:	b9 01       	movw	r22, r18
    10f8:	66 0f       	add	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	fb 01       	movw	r30, r22
    10fe:	e7 50       	subi	r30, 0x07	; 7
    1100:	fe 4f       	sbci	r31, 0xFE	; 254
    1102:	b1 83       	std	Z+1, r27	; 0x01
    1104:	a0 83       	st	Z, r26
			toneArray[i] = toneArray[i+1];
    1106:	fa 01       	movw	r30, r20
    1108:	eb 51       	subi	r30, 0x1B	; 27
    110a:	fe 4f       	sbci	r31, 0xFE	; 254
    110c:	40 81       	ld	r20, Z
    110e:	51 81       	ldd	r21, Z+1	; 0x01
    1110:	fb 01       	movw	r30, r22
    1112:	eb 51       	subi	r30, 0x1B	; 27
    1114:	fe 4f       	sbci	r31, 0xFE	; 254
    1116:	51 83       	std	Z+1, r21	; 0x01
    1118:	40 83       	st	Z, r20
}
void setTone(int t){
	toneArray[numberOfAlarms] = t;
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
    111a:	2f 5f       	subi	r18, 0xFF	; 255
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	d7 cf       	rjmp	.-82     	; 0x10ce <_Z16updateAlarmArrayi+0x4>
    1120:	08 95       	ret

00001122 <_Z10checkAlarmv>:
			alarmArray[i] = alarmArray[i+1];
			toneArray[i] = toneArray[i+1];
		}
	}
}
void checkAlarm(){
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
	if (numberOfAlarms != 0){
    1132:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <numberOfAlarms>
    1136:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <numberOfAlarms+0x1>
    113a:	89 2b       	or	r24, r25
    113c:	09 f4       	brne	.+2      	; 0x1140 <_Z10checkAlarmv+0x1e>
    113e:	55 c0       	rjmp	.+170    	; 0x11ea <_Z10checkAlarmv+0xc8>
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
    1140:	0f 2e       	mov	r0, r31
    1142:	fe ed       	ldi	r31, 0xDE	; 222
    1144:	cf 2e       	mov	r12, r31
    1146:	f1 e0       	ldi	r31, 0x01	; 1
    1148:	df 2e       	mov	r13, r31
    114a:	f0 2d       	mov	r31, r0
    114c:	0f 2e       	mov	r0, r31
    114e:	ff ed       	ldi	r31, 0xDF	; 223
    1150:	ef 2e       	mov	r14, r31
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	ff 2e       	mov	r15, r31
    1156:	f0 2d       	mov	r31, r0
    1158:	00 ee       	ldi	r16, 0xE0	; 224
    115a:	11 e0       	ldi	r17, 0x01	; 1
    115c:	21 ee       	ldi	r18, 0xE1	; 225
    115e:	31 e0       	ldi	r19, 0x01	; 1
    1160:	42 ee       	ldi	r20, 0xE2	; 226
    1162:	51 e0       	ldi	r21, 0x01	; 1
    1164:	63 ee       	ldi	r22, 0xE3	; 227
    1166:	71 e0       	ldi	r23, 0x01	; 1
    1168:	84 ee       	ldi	r24, 0xE4	; 228
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 b1 11 	call	0x2362	; 0x2362 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
		for (int i = 0; i <= numberOfAlarms;i++){
    1170:	c0 e0       	ldi	r28, 0x00	; 0
    1172:	d0 e0       	ldi	r29, 0x00	; 0
    1174:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <numberOfAlarms>
    1178:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <numberOfAlarms+0x1>
    117c:	8c 17       	cp	r24, r28
    117e:	9d 07       	cpc	r25, r29
    1180:	a4 f1       	brlt	.+104    	; 0x11ea <_Z10checkAlarmv+0xc8>
			if (alarmArray[i]/100 == hour && alarmArray[i]%100 == minute){
    1182:	fe 01       	movw	r30, r28
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	e7 50       	subi	r30, 0x07	; 7
    118a:	fe 4f       	sbci	r31, 0xFE	; 254
    118c:	20 81       	ld	r18, Z
    118e:	31 81       	ldd	r19, Z+1	; 0x01
    1190:	c9 01       	movw	r24, r18
    1192:	64 e6       	ldi	r22, 0x64	; 100
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    119a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <hour>
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	68 17       	cp	r22, r24
    11a2:	79 07       	cpc	r23, r25
    11a4:	01 f5       	brne	.+64     	; 0x11e6 <_Z10checkAlarmv+0xc4>
    11a6:	c9 01       	movw	r24, r18
    11a8:	64 e6       	ldi	r22, 0x64	; 100
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    11b0:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <minute>
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	82 17       	cp	r24, r18
    11b8:	93 07       	cpc	r25, r19
    11ba:	a9 f4       	brne	.+42     	; 0x11e6 <_Z10checkAlarmv+0xc4>
				ringAlarm(toneArray[i]);
    11bc:	fe 01       	movw	r30, r28
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	eb 51       	subi	r30, 0x1B	; 27
    11c4:	fe 4f       	sbci	r31, 0xFE	; 254
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	0e 94 35 08 	call	0x106a	; 0x106a <_Z9ringAlarmi>
				updateAlarmArray(i);
    11ce:	ce 01       	movw	r24, r28
    11d0:	0e 94 65 08 	call	0x10ca	; 0x10ca <_Z16updateAlarmArrayi>
				numberOfAlarms--;
    11d4:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <numberOfAlarms>
    11d8:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <numberOfAlarms+0x1>
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <numberOfAlarms+0x1>
    11e2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <numberOfAlarms>
	}
}
void checkAlarm(){
	if (numberOfAlarms != 0){
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
		for (int i = 0; i <= numberOfAlarms;i++){
    11e6:	21 96       	adiw	r28, 0x01	; 1
    11e8:	c5 cf       	rjmp	.-118    	; 0x1174 <_Z10checkAlarmv+0x52>
				numberOfAlarms--;
			}
		}
		
	}
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	08 95       	ret

000011fc <_Z6getDayiii>:
	int s = clockTime[5];
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	ec 01       	movw	r28, r24
	int days = 0;
	for (int i = 1;i<=y;i++){
    1202:	21 e0       	ldi	r18, 0x01	; 1
    1204:	30 e0       	ldi	r19, 0x00	; 0
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
    1206:	e0 e0       	ldi	r30, 0x00	; 0
    1208:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 1;i<=y;i++){
    120a:	c2 17       	cp	r28, r18
    120c:	d3 07       	cpc	r29, r19
    120e:	6c f0       	brlt	.+26     	; 0x122a <_Z6getDayiii+0x2e>
		if (i%4 == 0){
    1210:	c9 01       	movw	r24, r18
    1212:	83 70       	andi	r24, 0x03	; 3
    1214:	99 27       	eor	r25, r25
    1216:	89 2b       	or	r24, r25
    1218:	19 f4       	brne	.+6      	; 0x1220 <_Z6getDayiii+0x24>
			days+= 366;
    121a:	e2 59       	subi	r30, 0x92	; 146
    121c:	fe 4f       	sbci	r31, 0xFE	; 254
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <_Z6getDayiii+0x28>
		}
		else{
			days+= 365;
    1220:	e3 59       	subi	r30, 0x93	; 147
    1222:	fe 4f       	sbci	r31, 0xFE	; 254
		ds1307_setdate(y, m, d, D, h, M, s);
	}
}
int getDay(int y, int m, int d){
	int days = 0;
	for (int i = 1;i<=y;i++){
    1224:	2f 5f       	subi	r18, 0xFF	; 255
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
    1228:	f0 cf       	rjmp	.-32     	; 0x120a <_Z6getDayiii+0xe>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
    122e:	db 01       	movw	r26, r22
    1230:	11 97       	sbiw	r26, 0x01	; 1
    1232:	2a 17       	cp	r18, r26
    1234:	3b 07       	cpc	r19, r27
    1236:	3c f5       	brge	.+78     	; 0x1286 <_Z6getDayiii+0x8a>
		if ((y%4==0) & (j == 1)){
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	de 01       	movw	r26, r28
    123c:	a3 70       	andi	r26, 0x03	; 3
    123e:	bb 27       	eor	r27, r27
    1240:	ab 2b       	or	r26, r27
    1242:	09 f0       	breq	.+2      	; 0x1246 <_Z6getDayiii+0x4a>
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	99 23       	and	r25, r25
    1248:	91 f0       	breq	.+36     	; 0x126e <_Z6getDayiii+0x72>
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	21 30       	cpi	r18, 0x01	; 1
    124e:	31 05       	cpc	r19, r1
    1250:	09 f0       	breq	.+2      	; 0x1254 <_Z6getDayiii+0x58>
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	99 23       	and	r25, r25
    1256:	59 f0       	breq	.+22     	; 0x126e <_Z6getDayiii+0x72>
			days+=monthsDays[j];
    1258:	d9 01       	movw	r26, r18
    125a:	aa 0f       	add	r26, r26
    125c:	bb 1f       	adc	r27, r27
    125e:	a0 50       	subi	r26, 0x00	; 0
    1260:	bf 4f       	sbci	r27, 0xFF	; 255
    1262:	8d 91       	ld	r24, X+
    1264:	9c 91       	ld	r25, X
    1266:	e8 0f       	add	r30, r24
    1268:	f9 1f       	adc	r31, r25
			days+=1;
    126a:	31 96       	adiw	r30, 0x01	; 1
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <_Z6getDayiii+0x84>
		}
		else{
			days +=monthsDays[j];
    126e:	d9 01       	movw	r26, r18
    1270:	aa 0f       	add	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	a0 50       	subi	r26, 0x00	; 0
    1276:	bf 4f       	sbci	r27, 0xFF	; 255
    1278:	8d 91       	ld	r24, X+
    127a:	9c 91       	ld	r25, X
    127c:	e8 0f       	add	r30, r24
    127e:	f9 1f       	adc	r31, r25
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
    1280:	2f 5f       	subi	r18, 0xFF	; 255
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	d4 cf       	rjmp	.-88     	; 0x122e <_Z6getDayiii+0x32>
		}
		else{
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
    1286:	4e 0f       	add	r20, r30
    1288:	5f 1f       	adc	r21, r31
    128a:	ca 01       	movw	r24, r20
    128c:	05 96       	adiw	r24, 0x05	; 5
    128e:	67 e0       	ldi	r22, 0x07	; 7
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
}
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <_Z12setClockTimePi>:
			}
		}
		
	}
}
void setClockTime(int clockTime[6]){
    129c:	6f 92       	push	r6
    129e:	7f 92       	push	r7
    12a0:	8f 92       	push	r8
    12a2:	9f 92       	push	r9
    12a4:	af 92       	push	r10
    12a6:	bf 92       	push	r11
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	ec 01       	movw	r28, r24
	int y = clockTime[0];
    12ba:	88 80       	ld	r8, Y
    12bc:	99 80       	ldd	r9, Y+1	; 0x01
	int m = clockTime[1];
    12be:	aa 80       	ldd	r10, Y+2	; 0x02
    12c0:	bb 80       	ldd	r11, Y+3	; 0x03
	int d = clockTime[2];
    12c2:	6c 80       	ldd	r6, Y+4	; 0x04
    12c4:	7d 80       	ldd	r7, Y+5	; 0x05
	int D = getDay(y,m,d);
    12c6:	a3 01       	movw	r20, r6
    12c8:	b5 01       	movw	r22, r10
    12ca:	c4 01       	movw	r24, r8
    12cc:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_Z6getDayiii>
	int h = clockTime[3];
    12d0:	0e 81       	ldd	r16, Y+6	; 0x06
    12d2:	1f 81       	ldd	r17, Y+7	; 0x07
	int M = clockTime[4];
    12d4:	e8 84       	ldd	r14, Y+8	; 0x08
    12d6:	f9 84       	ldd	r15, Y+9	; 0x09
	int s = clockTime[5];
    12d8:	ca 84       	ldd	r12, Y+10	; 0x0a
    12da:	db 84       	ldd	r13, Y+11	; 0x0b
	if ((0<y) & (y<99) & (0<m)&(m<13) & (0<d)&(d<32) & (0<=h)&(h<24) & (0<=M)&(M<60) & (0<=s)&(s<60)){
    12dc:	94 01       	movw	r18, r8
    12de:	21 50       	subi	r18, 0x01	; 1
    12e0:	31 09       	sbc	r19, r1
    12e2:	c1 e0       	ldi	r28, 0x01	; 1
    12e4:	22 36       	cpi	r18, 0x62	; 98
    12e6:	31 05       	cpc	r19, r1
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <_Z12setClockTimePi+0x50>
    12ea:	c0 e0       	ldi	r28, 0x00	; 0
    12ec:	21 e0       	ldi	r18, 0x01	; 1
    12ee:	1a 14       	cp	r1, r10
    12f0:	1b 04       	cpc	r1, r11
    12f2:	0c f0       	brlt	.+2      	; 0x12f6 <_Z12setClockTimePi+0x5a>
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	61 e0       	ldi	r22, 0x01	; 1
    12f8:	9d e0       	ldi	r25, 0x0D	; 13
    12fa:	a9 16       	cp	r10, r25
    12fc:	b1 04       	cpc	r11, r1
    12fe:	0c f0       	brlt	.+2      	; 0x1302 <_Z12setClockTimePi+0x66>
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	71 e0       	ldi	r23, 0x01	; 1
    1304:	16 14       	cp	r1, r6
    1306:	17 04       	cpc	r1, r7
    1308:	0c f0       	brlt	.+2      	; 0x130c <_Z12setClockTimePi+0x70>
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	51 e0       	ldi	r21, 0x01	; 1
    130e:	90 e2       	ldi	r25, 0x20	; 32
    1310:	69 16       	cp	r6, r25
    1312:	71 04       	cpc	r7, r1
    1314:	0c f0       	brlt	.+2      	; 0x1318 <_Z12setClockTimePi+0x7c>
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	31 2f       	mov	r19, r17
    131a:	30 95       	com	r19
    131c:	33 1f       	adc	r19, r19
    131e:	33 27       	eor	r19, r19
    1320:	33 1f       	adc	r19, r19
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	08 31       	cpi	r16, 0x18	; 24
    1326:	11 05       	cpc	r17, r1
    1328:	0c f0       	brlt	.+2      	; 0x132c <_Z12setClockTimePi+0x90>
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	af 2d       	mov	r26, r15
    132e:	a0 95       	com	r26
    1330:	aa 1f       	adc	r26, r26
    1332:	aa 27       	eor	r26, r26
    1334:	aa 1f       	adc	r26, r26
    1336:	b1 e0       	ldi	r27, 0x01	; 1
    1338:	9c e3       	ldi	r25, 0x3C	; 60
    133a:	e9 16       	cp	r14, r25
    133c:	f1 04       	cpc	r15, r1
    133e:	0c f0       	brlt	.+2      	; 0x1342 <_Z12setClockTimePi+0xa6>
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	9d 2d       	mov	r25, r13
    1344:	90 95       	com	r25
    1346:	e9 2f       	mov	r30, r25
    1348:	ee 1f       	adc	r30, r30
    134a:	ee 27       	eor	r30, r30
    134c:	ee 1f       	adc	r30, r30
    134e:	f1 e0       	ldi	r31, 0x01	; 1
    1350:	9c e3       	ldi	r25, 0x3C	; 60
    1352:	c9 16       	cp	r12, r25
    1354:	d1 04       	cpc	r13, r1
    1356:	0c f0       	brlt	.+2      	; 0x135a <_Z12setClockTimePi+0xbe>
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	2c 23       	and	r18, r28
    135c:	62 23       	and	r22, r18
    135e:	67 23       	and	r22, r23
    1360:	56 23       	and	r21, r22
    1362:	95 2f       	mov	r25, r21
    1364:	93 23       	and	r25, r19
    1366:	49 23       	and	r20, r25
    1368:	4a 23       	and	r20, r26
    136a:	94 2f       	mov	r25, r20
    136c:	9b 23       	and	r25, r27
    136e:	9e 23       	and	r25, r30
    1370:	41 f0       	breq	.+16     	; 0x1382 <_Z12setClockTimePi+0xe6>
    1372:	ff 23       	and	r31, r31
    1374:	31 f0       	breq	.+12     	; 0x1382 <_Z12setClockTimePi+0xe6>
		ds1307_setdate(y, m, d, D, h, M, s);
    1376:	28 2f       	mov	r18, r24
    1378:	46 2d       	mov	r20, r6
    137a:	6a 2d       	mov	r22, r10
    137c:	88 2d       	mov	r24, r8
    137e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <_Z14ds1307_setdatehhhhhhh>
	}
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	bf 90       	pop	r11
    1394:	af 90       	pop	r10
    1396:	9f 90       	pop	r9
    1398:	8f 90       	pop	r8
    139a:	7f 90       	pop	r7
    139c:	6f 90       	pop	r6
    139e:	08 95       	ret

000013a0 <_Z11displayZeroh>:
		}
	}
	return (days+d+5)%7;
}
void displayZero(uint8_t digit){
	if (digit<10){
    13a0:	8a 30       	cpi	r24, 0x0A	; 10
    13a2:	20 f4       	brcc	.+8      	; 0x13ac <_Z11displayZeroh+0xc>
		LCD_String("0");
    13a4:	86 e9       	ldi	r24, 0x96	; 150
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
    13ac:	08 95       	ret

000013ae <_Z11displayTimev>:
	}
}
void displayTime(){
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	ec 97       	sbiw	r28, 0x3c	; 60
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
	ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
    13ce:	0f 2e       	mov	r0, r31
    13d0:	fe ed       	ldi	r31, 0xDE	; 222
    13d2:	cf 2e       	mov	r12, r31
    13d4:	f1 e0       	ldi	r31, 0x01	; 1
    13d6:	df 2e       	mov	r13, r31
    13d8:	f0 2d       	mov	r31, r0
    13da:	0f 2e       	mov	r0, r31
    13dc:	ff ed       	ldi	r31, 0xDF	; 223
    13de:	ef 2e       	mov	r14, r31
    13e0:	f1 e0       	ldi	r31, 0x01	; 1
    13e2:	ff 2e       	mov	r15, r31
    13e4:	f0 2d       	mov	r31, r0
    13e6:	00 ee       	ldi	r16, 0xE0	; 224
    13e8:	11 e0       	ldi	r17, 0x01	; 1
    13ea:	21 ee       	ldi	r18, 0xE1	; 225
    13ec:	31 e0       	ldi	r19, 0x01	; 1
    13ee:	42 ee       	ldi	r20, 0xE2	; 226
    13f0:	51 e0       	ldi	r21, 0x01	; 1
    13f2:	63 ee       	ldi	r22, 0xE3	; 227
    13f4:	71 e0       	ldi	r23, 0x01	; 1
    13f6:	84 ee       	ldi	r24, 0xE4	; 228
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	0e 94 b1 11 	call	0x2362	; 0x2362 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
	char secondS[10];char minuteS[10];char hourS[10];char yearS[10];char monthS[10];char dayS[10];
	itoa(second,secondS,10);itoa(minute,minuteS,10);itoa(hour,hourS,10);itoa(year,yearS,10);itoa(month,monthS,10);itoa(day,dayS,10);
    13fe:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1402:	4a e0       	ldi	r20, 0x0A	; 10
    1404:	be 01       	movw	r22, r28
    1406:	6f 5f       	subi	r22, 0xFF	; 255
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__itoa_ncheck>
    1410:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <minute>
    1414:	4a e0       	ldi	r20, 0x0A	; 10
    1416:	be 01       	movw	r22, r28
    1418:	65 5f       	subi	r22, 0xF5	; 245
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__itoa_ncheck>
    1422:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <hour>
    1426:	4a e0       	ldi	r20, 0x0A	; 10
    1428:	be 01       	movw	r22, r28
    142a:	6b 5e       	subi	r22, 0xEB	; 235
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__itoa_ncheck>
    1434:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <year>
    1438:	4a e0       	ldi	r20, 0x0A	; 10
    143a:	be 01       	movw	r22, r28
    143c:	61 5e       	subi	r22, 0xE1	; 225
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__itoa_ncheck>
    1446:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <month>
    144a:	4a e0       	ldi	r20, 0x0A	; 10
    144c:	be 01       	movw	r22, r28
    144e:	67 5d       	subi	r22, 0xD7	; 215
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__itoa_ncheck>
    1458:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <day>
    145c:	4a e0       	ldi	r20, 0x0A	; 10
    145e:	be 01       	movw	r22, r28
    1460:	6d 5c       	subi	r22, 0xCD	; 205
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__itoa_ncheck>
	LCD_Home(0);LCD_String("   20");
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
    1472:	82 e9       	ldi	r24, 0x92	; 146
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	displayZero(year);LCD_String(yearS);LCD_String("-");
    147a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <year>
    147e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z11displayZeroh>
    1482:	ce 01       	movw	r24, r28
    1484:	4f 96       	adiw	r24, 0x1f	; 31
    1486:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
    148a:	88 e9       	ldi	r24, 0x98	; 152
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	displayZero(month);LCD_String(monthS);LCD_String("-");
    1492:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <month>
    1496:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z11displayZeroh>
    149a:	ce 01       	movw	r24, r28
    149c:	89 96       	adiw	r24, 0x29	; 41
    149e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
    14a2:	88 e9       	ldi	r24, 0x98	; 152
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	displayZero(day);LCD_String(dayS);
    14aa:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <day>
    14ae:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z11displayZeroh>
    14b2:	ce 01       	movw	r24, r28
    14b4:	c3 96       	adiw	r24, 0x33	; 51
    14b6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	LCD_Home(1);LCD_String("    ");
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
    14c2:	8a e9       	ldi	r24, 0x9A	; 154
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	displayZero(hour);
    14ca:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <hour>
    14ce:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z11displayZeroh>
	LCD_String(hourS);
    14d2:	ce 01       	movw	r24, r28
    14d4:	45 96       	adiw	r24, 0x15	; 21
    14d6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	LCD_String(":");
    14da:	8f e9       	ldi	r24, 0x9F	; 159
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	displayZero(minute);
    14e2:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <minute>
    14e6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z11displayZeroh>
	LCD_String(minuteS);
    14ea:	ce 01       	movw	r24, r28
    14ec:	0b 96       	adiw	r24, 0x0b	; 11
    14ee:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	LCD_String(":");
    14f2:	8f e9       	ldi	r24, 0x9F	; 159
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	displayZero(second);
    14fa:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
    14fe:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z11displayZeroh>
	LCD_String(secondS);
    1502:	ce 01       	movw	r24, r28
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	//_delay_ms(1);

    150a:	ec 96       	adiw	r28, 0x3c	; 60
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	08 95       	ret

00001528 <_Z11init_buzzerv>:
 
 volatile int sp = 1;    // This is a reference to stop the alarm with a button press
 
 void init_buzzer(){
	 // pins ports declaration
	 buzzer_DDR |= _BV(buzzer_PIN) ;			// make buzzer pin output
    1528:	8a b1       	in	r24, 0x0a	; 10
    152a:	84 60       	ori	r24, 0x04	; 4
    152c:	8a b9       	out	0x0a, r24	; 10
	 	
	 EICRA |= _BV(ISC11) | _BV(ISC10);		  // set rising edge method
    152e:	e9 e6       	ldi	r30, 0x69	; 105
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8c 60       	ori	r24, 0x0C	; 12
    1536:	80 83       	st	Z, r24
	 EIMSK |= _BV(INT1);					 // enable pin PD1 External interrupt
    1538:	8d b3       	in	r24, 0x1d	; 29
    153a:	82 60       	ori	r24, 0x02	; 2
    153c:	8d bb       	out	0x1d, r24	; 29
	 	
	 sei();								   //  this Enables the Global Interrupt Enable (I-bit) in the Status Register (SREG)
    153e:	78 94       	sei
    1540:	08 95       	ret

00001542 <_Z9Play_Noteff>:
	 
 }
 
 void Play_Note(float freq,float dur){
    1542:	4f 92       	push	r4
    1544:	5f 92       	push	r5
    1546:	6f 92       	push	r6
    1548:	7f 92       	push	r7
    154a:	8f 92       	push	r8
    154c:	9f 92       	push	r9
    154e:	af 92       	push	r10
    1550:	bf 92       	push	r11
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	00 d0       	rcall	.+0      	; 0x1560 <_Z9Play_Noteff+0x1e>
    1560:	00 d0       	rcall	.+0      	; 0x1562 <_Z9Play_Noteff+0x20>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	6b 01       	movw	r12, r22
    1568:	7c 01       	movw	r14, r24
    156a:	49 01       	movw	r8, r18
    156c:	5a 01       	movw	r10, r20
	 // variables
	 long int i,cycles;
	 float half_period,period;
	 
	 if (freq != 0){
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	a9 01       	movw	r20, r18
    1574:	0e 94 39 13 	call	0x2672	; 0x2672 <__cmpsf2>
    1578:	88 23       	and	r24, r24
    157a:	09 f4       	brne	.+2      	; 0x157e <_Z9Play_Noteff+0x3c>
    157c:	ad c0       	rjmp	.+346    	; 0x16d8 <_Z9Play_Noteff+0x196>
		 period=(1/freq)*1000;
    157e:	a7 01       	movw	r20, r14
    1580:	96 01       	movw	r18, r12
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	80 e8       	ldi	r24, 0x80	; 128
    1588:	9f e3       	ldi	r25, 0x3F	; 63
    158a:	0e 94 3e 13 	call	0x267c	; 0x267c <__divsf3>
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	4a e7       	ldi	r20, 0x7A	; 122
    1594:	54 e4       	ldi	r21, 0x44	; 68
    1596:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    159a:	6b 01       	movw	r12, r22
    159c:	7c 01       	movw	r14, r24
		 cycles=dur/period;
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
    15a2:	c5 01       	movw	r24, r10
    15a4:	b4 01       	movw	r22, r8
    15a6:	0e 94 3e 13 	call	0x267c	; 0x267c <__divsf3>
    15aa:	0e 94 b0 13 	call	0x2760	; 0x2760 <__fixsfsi>
    15ae:	2b 01       	movw	r4, r22
    15b0:	3c 01       	movw	r6, r24
		 half_period = period/2;
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	c7 01       	movw	r24, r14
    15bc:	b6 01       	movw	r22, r12
    15be:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    15c2:	69 83       	std	Y+1, r22	; 0x01
    15c4:	7a 83       	std	Y+2, r23	; 0x02
    15c6:	8b 83       	std	Y+3, r24	; 0x03
    15c8:	9c 83       	std	Y+4, r25	; 0x04

		 for (i=0;i<cycles;i++)
    15ca:	81 2c       	mov	r8, r1
    15cc:	91 2c       	mov	r9, r1
    15ce:	54 01       	movw	r10, r8
    15d0:	84 14       	cp	r8, r4
    15d2:	95 04       	cpc	r9, r5
    15d4:	a6 04       	cpc	r10, r6
    15d6:	b7 04       	cpc	r11, r7
    15d8:	0c f0       	brlt	.+2      	; 0x15dc <_Z9Play_Noteff+0x9a>
    15da:	b8 c0       	rjmp	.+368    	; 0x174c <_Z9Play_Noteff+0x20a>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a e7       	ldi	r20, 0x7A	; 122
    15e2:	53 e4       	ldi	r21, 0x43	; 67
    15e4:	69 81       	ldd	r22, Y+1	; 0x01
    15e6:	7a 81       	ldd	r23, Y+2	; 0x02
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    15f0:	6b 01       	movw	r12, r22
    15f2:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	0e 94 39 13 	call	0x2672	; 0x2672 <__cmpsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f1       	brlt	.+74     	; 0x164e <_Z9Play_Noteff+0x10c>
		__ticks = 1;
	else if (__tmp > 65535)
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	3f ef       	ldi	r19, 0xFF	; 255
    1608:	4f e7       	ldi	r20, 0x7F	; 127
    160a:	57 e4       	ldi	r21, 0x47	; 71
    160c:	c7 01       	movw	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	0e 94 98 14 	call	0x2930	; 0x2930 <__gesf2>
    1614:	18 16       	cp	r1, r24
    1616:	b4 f4       	brge	.+44     	; 0x1644 <_Z9Play_Noteff+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e2       	ldi	r20, 0x20	; 32
    161e:	51 e4       	ldi	r21, 0x41	; 65
    1620:	69 81       	ldd	r22, Y+1	; 0x01
    1622:	7a 81       	ldd	r23, Y+2	; 0x02
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    162c:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixunssfsi>
		while(__ticks)
    1630:	61 15       	cp	r22, r1
    1632:	71 05       	cpc	r23, r1
    1634:	89 f0       	breq	.+34     	; 0x1658 <_Z9Play_Noteff+0x116>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1636:	89 e1       	ldi	r24, 0x19	; 25
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <_Z9Play_Noteff+0xf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	61 50       	subi	r22, 0x01	; 1
    1640:	71 09       	sbc	r23, r1
    1642:	f6 cf       	rjmp	.-20     	; 0x1630 <_Z9Play_Noteff+0xee>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	c7 01       	movw	r24, r14
    1646:	b6 01       	movw	r22, r12
    1648:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixunssfsi>
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <_Z9Play_Noteff+0x110>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	cb 01       	movw	r24, r22
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <_Z9Play_Noteff+0x112>
		 {
			 //50% duty cycle
			 _delay_ms(half_period);
			 buzzer_PORT |= _BV(buzzer_PIN);
    1658:	8b b1       	in	r24, 0x0b	; 11
    165a:	84 60       	ori	r24, 0x04	; 4
    165c:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e8       	ldi	r20, 0x80	; 128
    1664:	5f e3       	ldi	r21, 0x3F	; 63
    1666:	c7 01       	movw	r24, r14
    1668:	b6 01       	movw	r22, r12
    166a:	0e 94 39 13 	call	0x2672	; 0x2672 <__cmpsf2>
    166e:	88 23       	and	r24, r24
    1670:	2c f1       	brlt	.+74     	; 0x16bc <_Z9Play_Noteff+0x17a>
		__ticks = 1;
	else if (__tmp > 65535)
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	c7 01       	movw	r24, r14
    167c:	b6 01       	movw	r22, r12
    167e:	0e 94 98 14 	call	0x2930	; 0x2930 <__gesf2>
    1682:	18 16       	cp	r1, r24
    1684:	b4 f4       	brge	.+44     	; 0x16b2 <_Z9Play_Noteff+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	69 81       	ldd	r22, Y+1	; 0x01
    1690:	7a 81       	ldd	r23, Y+2	; 0x02
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    169a:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixunssfsi>
		while(__ticks)
    169e:	61 15       	cp	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	89 f0       	breq	.+34     	; 0x16c6 <_Z9Play_Noteff+0x184>
    16a4:	89 e1       	ldi	r24, 0x19	; 25
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <_Z9Play_Noteff+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ac:	61 50       	subi	r22, 0x01	; 1
    16ae:	71 09       	sbc	r23, r1
    16b0:	f6 cf       	rjmp	.-20     	; 0x169e <_Z9Play_Noteff+0x15c>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	c7 01       	movw	r24, r14
    16b4:	b6 01       	movw	r22, r12
    16b6:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixunssfsi>
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <_Z9Play_Noteff+0x17e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	cb 01       	movw	r24, r22
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <_Z9Play_Noteff+0x180>
			 _delay_ms(half_period);
			 buzzer_PORT &= ~ _BV(buzzer_PIN);
    16c6:	8b b1       	in	r24, 0x0b	; 11
    16c8:	8b 7f       	andi	r24, 0xFB	; 251
    16ca:	8b b9       	out	0x0b, r24	; 11
	 if (freq != 0){
		 period=(1/freq)*1000;
		 cycles=dur/period;
		 half_period = period/2;

		 for (i=0;i<cycles;i++)
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	88 1a       	sub	r8, r24
    16d0:	98 0a       	sbc	r9, r24
    16d2:	a8 0a       	sbc	r10, r24
    16d4:	b8 0a       	sbc	r11, r24
    16d6:	7c cf       	rjmp	.-264    	; 0x15d0 <_Z9Play_Noteff+0x8e>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a e7       	ldi	r20, 0x7A	; 122
    16de:	53 e4       	ldi	r21, 0x43	; 67
    16e0:	c5 01       	movw	r24, r10
    16e2:	b4 01       	movw	r22, r8
    16e4:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    16e8:	6b 01       	movw	r12, r22
    16ea:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 39 13 	call	0x2672	; 0x2672 <__cmpsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	1c f1       	brlt	.+70     	; 0x1742 <_Z9Play_Noteff+0x200>
		__ticks = 1;
	else if (__tmp > 65535)
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	c7 01       	movw	r24, r14
    1706:	b6 01       	movw	r22, r12
    1708:	0e 94 98 14 	call	0x2930	; 0x2930 <__gesf2>
    170c:	18 16       	cp	r1, r24
    170e:	a4 f4       	brge	.+40     	; 0x1738 <_Z9Play_Noteff+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	c5 01       	movw	r24, r10
    171a:	b4 01       	movw	r22, r8
    171c:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    1720:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixunssfsi>
		while(__ticks)
    1724:	61 15       	cp	r22, r1
    1726:	71 05       	cpc	r23, r1
    1728:	89 f0       	breq	.+34     	; 0x174c <_Z9Play_Noteff+0x20a>
    172a:	89 e1       	ldi	r24, 0x19	; 25
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <_Z9Play_Noteff+0x1ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1732:	61 50       	subi	r22, 0x01	; 1
    1734:	71 09       	sbc	r23, r1
    1736:	f6 cf       	rjmp	.-20     	; 0x1724 <_Z9Play_Noteff+0x1e2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	c7 01       	movw	r24, r14
    173a:	b6 01       	movw	r22, r12
    173c:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixunssfsi>
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <_Z9Play_Noteff+0x204>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	cb 01       	movw	r24, r22
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <_Z9Play_Noteff+0x206>
	 }
	 else {
		 _delay_ms(dur);   // rest
	 }
	 return;
 }
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	df 90       	pop	r13
    175e:	cf 90       	pop	r12
    1760:	bf 90       	pop	r11
    1762:	af 90       	pop	r10
    1764:	9f 90       	pop	r9
    1766:	8f 90       	pop	r8
    1768:	7f 90       	pop	r7
    176a:	6f 90       	pop	r6
    176c:	5f 90       	pop	r5
    176e:	4f 90       	pop	r4
    1770:	08 95       	ret

00001772 <__vector_2>:
 
 /** External interrupt for INT0 (PD2) pin ISR function
 We will use this to stop currently playing melody **/

 ISR (INT1_vect)          //External interrupt Stop button ISR
 {
    1772:	1f 92       	push	r1
    1774:	0f 92       	push	r0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	0f 92       	push	r0
    177a:	11 24       	eor	r1, r1
    177c:	8f 93       	push	r24
    177e:	9f 93       	push	r25
	 sp=0;
    1780:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <sp+0x1>
    1784:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <sp>
    1788:	88 ea       	ldi	r24, 0xA8	; 168
    178a:	91 e6       	ldi	r25, 0x61	; 97
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <__vector_2+0x1a>
	 _delay_ms(100);
 }
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <_Z11tempochoosei>:

int tempochoose(int number){
	if (number==0){return tempos[0];}
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	41 f0       	breq	.+16     	; 0x17b2 <_Z11tempochoosei+0x14>
	else if (number==1){return tempos[1];}
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	91 05       	cpc	r25, r1
    17a6:	41 f0       	breq	.+16     	; 0x17b8 <_Z11tempochoosei+0x1a>
	else if (number==2){return tempos[2];}
    17a8:	02 97       	sbiw	r24, 0x02	; 2
    17aa:	49 f4       	brne	.+18     	; 0x17be <_Z11tempochoosei+0x20>
    17ac:	85 e5       	ldi	r24, 0x55	; 85
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	08 95       	ret
	 sp=0;
	 _delay_ms(100);
 }

int tempochoose(int number){
	if (number==0){return tempos[0];}
    17b2:	81 ee       	ldi	r24, 0xE1	; 225
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	08 95       	ret
	else if (number==1){return tempos[1];}
    17b8:	88 e7       	ldi	r24, 0x78	; 120
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	08 95       	ret
	else if (number==2){return tempos[2];}
	else{return tempos[3];}
    17be:	88 e7       	ldi	r24, 0x78	; 120
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	08 95       	ret

000017c4 <_Z4playi>:
		 _delay_ms(dur);   // rest
	 }
	 return;
 }
 
 void play(int number){
    17c4:	2f 92       	push	r2
    17c6:	3f 92       	push	r3
    17c8:	4f 92       	push	r4
    17ca:	5f 92       	push	r5
    17cc:	6f 92       	push	r6
    17ce:	7f 92       	push	r7
    17d0:	8f 92       	push	r8
    17d2:	9f 92       	push	r9
    17d4:	af 92       	push	r10
    17d6:	bf 92       	push	r11
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <_Z4playi+0x26>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <_Z4playi+0x28>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	1c 01       	movw	r2, r24
	 int tempo=tempochoose(number); // choose the right tempo from the list using the function
    17f2:	0e 94 cf 0b 	call	0x179e	; 0x179e <_Z11tempochoosei>
	 int notes = sizeof(melody0[number])/sizeof(melody0[number][0])/2;
	 int wholenote = (60000 * 2.5) / tempo;
    17f6:	bc 01       	movw	r22, r24
    17f8:	99 0f       	add	r25, r25
    17fa:	88 0b       	sbc	r24, r24
    17fc:	99 0b       	sbc	r25, r25
    17fe:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
    1802:	9b 01       	movw	r18, r22
    1804:	ac 01       	movw	r20, r24
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	7c e7       	ldi	r23, 0x7C	; 124
    180a:	82 e1       	ldi	r24, 0x12	; 18
    180c:	98 e4       	ldi	r25, 0x48	; 72
    180e:	0e 94 3e 13 	call	0x267c	; 0x267c <__divsf3>
    1812:	0e 94 b0 13 	call	0x2760	; 0x2760 <__fixsfsi>
    1816:	7a 83       	std	Y+2, r23	; 0x02
    1818:	69 83       	std	Y+1, r22	; 0x01
	 int divider = 0;
	 int noteDuration = 0;
	 
	 for (int thisNote = 0; thisNote < notes *2 ; thisNote = thisNote + 2) {
    181a:	1c 82       	std	Y+4, r1	; 0x04
    181c:	1b 82       	std	Y+3, r1	; 0x03
 void play(int number){
	 int tempo=tempochoose(number); // choose the right tempo from the list using the function
	 int notes = sizeof(melody0[number])/sizeof(melody0[number][0])/2;
	 int wholenote = (60000 * 2.5) / tempo;
	 int divider = 0;
	 int noteDuration = 0;
    181e:	e1 2c       	mov	r14, r1
    1820:	f1 2c       	mov	r15, r1
	 
	 for (int thisNote = 0; thisNote < notes *2 ; thisNote = thisNote + 2) {
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	80 39       	cpi	r24, 0x90	; 144
    1828:	91 40       	sbci	r25, 0x01	; 1
    182a:	0c f0       	brlt	.+2      	; 0x182e <_Z4playi+0x6a>
    182c:	ad c0       	rjmp	.+346    	; 0x1988 <_Z4playi+0x1c4>
		 if (sp==1){
    182e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sp>
    1832:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <sp+0x1>
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	09 f0       	breq	.+2      	; 0x183c <_Z4playi+0x78>
    183a:	a2 c0       	rjmp	.+324    	; 0x1980 <_Z4playi+0x1bc>
			 divider = pgm_read_word_near(melody0[number]+thisNote + 1);
    183c:	80 e2       	ldi	r24, 0x20	; 32
    183e:	93 e0       	ldi	r25, 0x03	; 3
    1840:	28 9e       	mul	r2, r24
    1842:	80 01       	movw	r16, r0
    1844:	29 9e       	mul	r2, r25
    1846:	10 0d       	add	r17, r0
    1848:	38 9e       	mul	r3, r24
    184a:	10 0d       	add	r17, r0
    184c:	11 24       	eor	r1, r1
    184e:	08 59       	subi	r16, 0x98	; 152
    1850:	1f 4f       	sbci	r17, 0xFF	; 255
    1852:	cb 80       	ldd	r12, Y+3	; 0x03
    1854:	dc 80       	ldd	r13, Y+4	; 0x04
    1856:	f6 01       	movw	r30, r12
    1858:	31 96       	adiw	r30, 0x01	; 1
    185a:	ee 0f       	add	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	e0 0f       	add	r30, r16
    1860:	f1 1f       	adc	r31, r17
    1862:	65 91       	lpm	r22, Z+
    1864:	74 91       	lpm	r23, Z
			 
			 if (divider > 0) { //positive divider ( positive duration)
    1866:	16 16       	cp	r1, r22
    1868:	17 06       	cpc	r1, r23
    186a:	34 f4       	brge	.+12     	; 0x1878 <_Z4playi+0xb4>
				 // it is a regular note
			 noteDuration = (wholenote) / divider;}
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    1874:	7b 01       	movw	r14, r22
    1876:	1c c0       	rjmp	.+56     	; 0x18b0 <_Z4playi+0xec>
			 
			 else if (divider<0){
    1878:	77 23       	and	r23, r23
    187a:	bc f4       	brge	.+46     	; 0x18aa <_Z4playi+0xe6>
				 noteDuration=(wholenote)/(divider);// negative durations need to be increased and made positive
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
				 noteDuration=noteDuration*1.5;
    1884:	07 2e       	mov	r0, r23
    1886:	00 0c       	add	r0, r0
    1888:	88 0b       	sbc	r24, r24
    188a:	99 0b       	sbc	r25, r25
    188c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 ec       	ldi	r20, 0xC0	; 192
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    189c:	0e 94 b0 13 	call	0x2760	; 0x2760 <__fixsfsi>
				 noteDuration=-noteDuration;
    18a0:	ee 24       	eor	r14, r14
    18a2:	ff 24       	eor	r15, r15
    18a4:	e6 1a       	sub	r14, r22
    18a6:	f7 0a       	sbc	r15, r23
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <_Z4playi+0xec>
			 }
			 else if(divider==0){return;} // this will be used to stop playing
    18aa:	67 2b       	or	r22, r23
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <_Z4playi+0xec>
    18ae:	6c c0       	rjmp	.+216    	; 0x1988 <_Z4playi+0x1c4>
			 Play_Note((pgm_read_word_near(melody0[number]+thisNote)), noteDuration*0.9 ); // play the selected pitch
    18b0:	b7 01       	movw	r22, r14
    18b2:	0f 2c       	mov	r0, r15
    18b4:	00 0c       	add	r0, r0
    18b6:	88 0b       	sbc	r24, r24
    18b8:	99 0b       	sbc	r25, r25
    18ba:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
    18be:	2b 01       	movw	r4, r22
    18c0:	3c 01       	movw	r6, r24
    18c2:	26 e6       	ldi	r18, 0x66	; 102
    18c4:	36 e6       	ldi	r19, 0x66	; 102
    18c6:	46 e6       	ldi	r20, 0x66	; 102
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    18ce:	4b 01       	movw	r8, r22
    18d0:	5c 01       	movw	r10, r24
    18d2:	f6 01       	movw	r30, r12
    18d4:	ee 0f       	add	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	e0 0f       	add	r30, r16
    18da:	f1 1f       	adc	r31, r17
    18dc:	65 91       	lpm	r22, Z+
    18de:	74 91       	lpm	r23, Z
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__floatunsisf>
    18e8:	a5 01       	movw	r20, r10
    18ea:	94 01       	movw	r18, r8
    18ec:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z9Play_Noteff>
			 _delay_ms(noteDuration*0.5);
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	c3 01       	movw	r24, r6
    18fa:	b2 01       	movw	r22, r4
    18fc:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    1900:	2b 01       	movw	r4, r22
    1902:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a e7       	ldi	r20, 0x7A	; 122
    190a:	53 e4       	ldi	r21, 0x43	; 67
    190c:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    1910:	4b 01       	movw	r8, r22
    1912:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e8       	ldi	r20, 0x80	; 128
    191a:	5f e3       	ldi	r21, 0x3F	; 63
    191c:	0e 94 39 13 	call	0x2672	; 0x2672 <__cmpsf2>
    1920:	88 23       	and	r24, r24
    1922:	1c f1       	brlt	.+70     	; 0x196a <_Z4playi+0x1a6>
		__ticks = 1;
	else if (__tmp > 65535)
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	c5 01       	movw	r24, r10
    192e:	b4 01       	movw	r22, r8
    1930:	0e 94 98 14 	call	0x2930	; 0x2930 <__gesf2>
    1934:	18 16       	cp	r1, r24
    1936:	a4 f4       	brge	.+40     	; 0x1960 <_Z4playi+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	c3 01       	movw	r24, r6
    1942:	b2 01       	movw	r22, r4
    1944:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulsf3>
    1948:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixunssfsi>
		while(__ticks)
    194c:	61 15       	cp	r22, r1
    194e:	71 05       	cpc	r23, r1
    1950:	89 f0       	breq	.+34     	; 0x1974 <_Z4playi+0x1b0>
    1952:	89 e1       	ldi	r24, 0x19	; 25
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <_Z4playi+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195a:	61 50       	subi	r22, 0x01	; 1
    195c:	71 09       	sbc	r23, r1
    195e:	f6 cf       	rjmp	.-20     	; 0x194c <_Z4playi+0x188>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1960:	c5 01       	movw	r24, r10
    1962:	b4 01       	movw	r22, r8
    1964:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixunssfsi>
    1968:	02 c0       	rjmp	.+4      	; 0x196e <_Z4playi+0x1aa>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	cb 01       	movw	r24, r22
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <_Z4playi+0x1ac>
	 int notes = sizeof(melody0[number])/sizeof(melody0[number][0])/2;
	 int wholenote = (60000 * 2.5) / tempo;
	 int divider = 0;
	 int noteDuration = 0;
	 
	 for (int thisNote = 0; thisNote < notes *2 ; thisNote = thisNote + 2) {
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	02 96       	adiw	r24, 0x02	; 2
    197a:	9c 83       	std	Y+4, r25	; 0x04
    197c:	8b 83       	std	Y+3, r24	; 0x03
    197e:	51 cf       	rjmp	.-350    	; 0x1822 <_Z4playi+0x5e>
			 else if(divider==0){return;} // this will be used to stop playing
			 Play_Note((pgm_read_word_near(melody0[number]+thisNote)), noteDuration*0.9 ); // play the selected pitch
			 _delay_ms(noteDuration*0.5);
		 }
		 else{
			 sp=0;
    1980:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <sp+0x1>
    1984:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <sp>
			 break;
		 }
	 }
 }
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
    19a0:	bf 90       	pop	r11
    19a2:	af 90       	pop	r10
    19a4:	9f 90       	pop	r9
    19a6:	8f 90       	pop	r8
    19a8:	7f 90       	pop	r7
    19aa:	6f 90       	pop	r6
    19ac:	5f 90       	pop	r5
    19ae:	4f 90       	pop	r4
    19b0:	3f 90       	pop	r3
    19b2:	2f 90       	pop	r2
    19b4:	08 95       	ret

000019b6 <_Z11LCD_Commandh>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
    19b6:	9b b1       	in	r25, 0x0b	; 11
    19b8:	9f 70       	andi	r25, 0x0F	; 15
    19ba:	28 2f       	mov	r18, r24
    19bc:	20 7f       	andi	r18, 0xF0	; 240
    19be:	92 2b       	or	r25, r18
    19c0:	9b b9       	out	0x0b, r25	; 11
    19c2:	9b b1       	in	r25, 0x0b	; 11
    19c4:	9e 7f       	andi	r25, 0xFE	; 254
    19c6:	9b b9       	out	0x0b, r25	; 11
    19c8:	9b b1       	in	r25, 0x0b	; 11
    19ca:	92 60       	ori	r25, 0x02	; 2
    19cc:	9b b9       	out	0x0b, r25	; 11
    19ce:	00 00       	nop
    19d0:	9b b1       	in	r25, 0x0b	; 11
    19d2:	9d 7f       	andi	r25, 0xFD	; 253
    19d4:	9b b9       	out	0x0b, r25	; 11
    19d6:	32 e4       	ldi	r19, 0x42	; 66
    19d8:	3a 95       	dec	r19
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <_Z11LCD_Commandh+0x22>
    19dc:	00 c0       	rjmp	.+0      	; 0x19de <_Z11LCD_Commandh+0x28>
    19de:	2b b1       	in	r18, 0x0b	; 11
    19e0:	30 e1       	ldi	r19, 0x10	; 16
    19e2:	83 9f       	mul	r24, r19
    19e4:	c0 01       	movw	r24, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	92 2f       	mov	r25, r18
    19ea:	9f 70       	andi	r25, 0x0F	; 15
    19ec:	89 2b       	or	r24, r25
    19ee:	8b b9       	out	0x0b, r24	; 11
    19f0:	8b b1       	in	r24, 0x0b	; 11
    19f2:	82 60       	ori	r24, 0x02	; 2
    19f4:	8b b9       	out	0x0b, r24	; 11
    19f6:	00 00       	nop
    19f8:	8b b1       	in	r24, 0x0b	; 11
    19fa:	8d 7f       	andi	r24, 0xFD	; 253
    19fc:	8b b9       	out	0x0b, r24	; 11
    19fe:	83 ef       	ldi	r24, 0xF3	; 243
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <_Z11LCD_Commandh+0x4c>
    1a06:	00 c0       	rjmp	.+0      	; 0x1a08 <_Z11LCD_Commandh+0x52>
    1a08:	00 00       	nop
    1a0a:	08 95       	ret

00001a0c <_Z8LCD_Charh>:
    1a0c:	9b b1       	in	r25, 0x0b	; 11
    1a0e:	9f 70       	andi	r25, 0x0F	; 15
    1a10:	28 2f       	mov	r18, r24
    1a12:	20 7f       	andi	r18, 0xF0	; 240
    1a14:	92 2b       	or	r25, r18
    1a16:	9b b9       	out	0x0b, r25	; 11
    1a18:	9b b1       	in	r25, 0x0b	; 11
    1a1a:	91 60       	ori	r25, 0x01	; 1
    1a1c:	9b b9       	out	0x0b, r25	; 11
    1a1e:	9b b1       	in	r25, 0x0b	; 11
    1a20:	92 60       	ori	r25, 0x02	; 2
    1a22:	9b b9       	out	0x0b, r25	; 11
    1a24:	00 00       	nop
    1a26:	9b b1       	in	r25, 0x0b	; 11
    1a28:	9d 7f       	andi	r25, 0xFD	; 253
    1a2a:	9b b9       	out	0x0b, r25	; 11
    1a2c:	32 e4       	ldi	r19, 0x42	; 66
    1a2e:	3a 95       	dec	r19
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <_Z8LCD_Charh+0x22>
    1a32:	00 c0       	rjmp	.+0      	; 0x1a34 <_Z8LCD_Charh+0x28>
    1a34:	2b b1       	in	r18, 0x0b	; 11
    1a36:	30 e1       	ldi	r19, 0x10	; 16
    1a38:	83 9f       	mul	r24, r19
    1a3a:	c0 01       	movw	r24, r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	92 2f       	mov	r25, r18
    1a40:	9f 70       	andi	r25, 0x0F	; 15
    1a42:	89 2b       	or	r24, r25
    1a44:	8b b9       	out	0x0b, r24	; 11
    1a46:	8b b1       	in	r24, 0x0b	; 11
    1a48:	82 60       	ori	r24, 0x02	; 2
    1a4a:	8b b9       	out	0x0b, r24	; 11
    1a4c:	00 00       	nop
    1a4e:	8b b1       	in	r24, 0x0b	; 11
    1a50:	8d 7f       	andi	r24, 0xFD	; 253
    1a52:	8b b9       	out	0x0b, r24	; 11
    1a54:	83 ef       	ldi	r24, 0xF3	; 243
    1a56:	91 e0       	ldi	r25, 0x01	; 1
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <_Z8LCD_Charh+0x4c>
    1a5c:	00 c0       	rjmp	.+0      	; 0x1a5e <_Z8LCD_Charh+0x52>
    1a5e:	00 00       	nop
    1a60:	08 95       	ret

00001a62 <_Z8LCD_Initv>:
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	8a b9       	out	0x0a, r24	; 10
    1a66:	87 e8       	ldi	r24, 0x87	; 135
    1a68:	93 e1       	ldi	r25, 0x13	; 19
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <_Z8LCD_Initv+0x8>
    1a6e:	00 c0       	rjmp	.+0      	; 0x1a70 <_Z8LCD_Initv+0xe>
    1a70:	00 00       	nop
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z11LCD_Commandh>
    1a78:	88 e2       	ldi	r24, 0x28	; 40
    1a7a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z11LCD_Commandh>
    1a7e:	8c e0       	ldi	r24, 0x0C	; 12
    1a80:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z11LCD_Commandh>
    1a84:	86 e0       	ldi	r24, 0x06	; 6
    1a86:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z11LCD_Commandh>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z11LCD_Commandh>
    1a90:	83 ef       	ldi	r24, 0xF3	; 243
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <_Z8LCD_Initv+0x32>
    1a98:	00 c0       	rjmp	.+0      	; 0x1a9a <_Z8LCD_Initv+0x38>
    1a9a:	00 00       	nop
    1a9c:	08 95       	ret

00001a9e <_Z10LCD_StringPc>:
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	8c 01       	movw	r16, r24
    1aa8:	c0 e0       	ldi	r28, 0x00	; 0
    1aaa:	d0 e0       	ldi	r29, 0x00	; 0
    1aac:	f8 01       	movw	r30, r16
    1aae:	ec 0f       	add	r30, r28
    1ab0:	fd 1f       	adc	r31, r29
    1ab2:	80 81       	ld	r24, Z
    1ab4:	88 23       	and	r24, r24
    1ab6:	21 f0       	breq	.+8      	; 0x1ac0 <_Z10LCD_StringPc+0x22>
    1ab8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <_Z8LCD_Charh>
    1abc:	21 96       	adiw	r28, 0x01	; 1
    1abe:	f6 cf       	rjmp	.-20     	; 0x1aac <_Z10LCD_StringPc+0xe>
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

00001aca <_Z9LCD_Clearv>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z11LCD_Commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ad0:	83 ef       	ldi	r24, 0xF3	; 243
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <_Z9LCD_Clearv+0xa>
    1ad8:	00 c0       	rjmp	.+0      	; 0x1ada <_Z9LCD_Clearv+0x10>
    1ada:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    1adc:	80 e8       	ldi	r24, 0x80	; 128
    1ade:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z11LCD_Commandh>
    1ae2:	08 95       	ret

00001ae4 <_Z8LCD_Homei>:
}
void LCD_Home(int r){
	if(r==0){
    1ae4:	89 2b       	or	r24, r25
    1ae6:	21 f4       	brne	.+8      	; 0x1af0 <_Z8LCD_Homei+0xc>
		LCD_Command (0x80);
    1ae8:	80 e8       	ldi	r24, 0x80	; 128
    1aea:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z11LCD_Commandh>
    1aee:	08 95       	ret
	}
	else{
		LCD_Command (0xC0);
    1af0:	80 ec       	ldi	r24, 0xC0	; 192
    1af2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z11LCD_Commandh>
    1af6:	08 95       	ret

00001af8 <_Z9LCD_BlinkPc>:
	}
}
int blink_var=0;
void LCD_Blink(char ch[10]){
	if (blink_var==0){
    1af8:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <blink_var>
    1afc:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <blink_var+0x1>
    1b00:	23 2b       	or	r18, r19
    1b02:	79 f4       	brne	.+30     	; 0x1b22 <_Z9LCD_BlinkPc+0x2a>
		LCD_String(ch);
    1b04:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		blink_var=1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <blink_var+0x1>
    1b10:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <blink_var>
    1b14:	87 ea       	ldi	r24, 0xA7	; 167
    1b16:	91 e6       	ldi	r25, 0x61	; 97
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <_Z9LCD_BlinkPc+0x20>
    1b1c:	00 c0       	rjmp	.+0      	; 0x1b1e <_Z9LCD_BlinkPc+0x26>
    1b1e:	00 00       	nop
    1b20:	08 95       	ret
		_delay_ms(100);
	}
	else{
		LCD_String(" ");
    1b22:	8d e9       	ldi	r24, 0x9D	; 157
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		blink_var=0;
    1b2a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <blink_var+0x1>
    1b2e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <blink_var>
    1b32:	87 ea       	ldi	r24, 0xA7	; 167
    1b34:	91 e6       	ldi	r25, 0x61	; 97
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <_Z9LCD_BlinkPc+0x3e>
    1b3a:	00 c0       	rjmp	.+0      	; 0x1b3c <_Z9LCD_BlinkPc+0x44>
    1b3c:	00 00       	nop
    1b3e:	08 95       	ret

00001b40 <_Z13displayTypingii>:
		_delay_ms(100);
	}
}
void displayTyping(int val,int pos){
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <_Z13displayTypingii+0xe>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <_Z13displayTypingii+0x10>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	8b 01       	movw	r16, r22
	char val0S[2];char val1S[2];
	itoa(val/10,val0S,10);itoa(val%10,val1S,10);
    1b56:	6a e0       	ldi	r22, 0x0A	; 10
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    1b5e:	9b 01       	movw	r18, r22
    1b60:	7c 01       	movw	r14, r24
    1b62:	4a e0       	ldi	r20, 0x0A	; 10
    1b64:	be 01       	movw	r22, r28
    1b66:	6f 5f       	subi	r22, 0xFF	; 255
    1b68:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6a:	c9 01       	movw	r24, r18
    1b6c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__itoa_ncheck>
    1b70:	4a e0       	ldi	r20, 0x0A	; 10
    1b72:	be 01       	movw	r22, r28
    1b74:	6d 5f       	subi	r22, 0xFD	; 253
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
    1b78:	c7 01       	movw	r24, r14
    1b7a:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__itoa_ncheck>
	if (pos==0){
    1b7e:	01 15       	cp	r16, r1
    1b80:	11 05       	cpc	r17, r1
    1b82:	49 f4       	brne	.+18     	; 0x1b96 <_Z13displayTypingii+0x56>
		LCD_Blink(val0S);
    1b84:	ce 01       	movw	r24, r28
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_Z9LCD_BlinkPc>
		LCD_String(val1S);
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	03 96       	adiw	r24, 0x03	; 3
    1b90:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <_Z13displayTypingii+0x7e>
	}
	else if (pos==1){
    1b96:	01 30       	cpi	r16, 0x01	; 1
    1b98:	11 05       	cpc	r17, r1
    1b9a:	49 f4       	brne	.+18     	; 0x1bae <_Z13displayTypingii+0x6e>
		LCD_String(val0S);
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		LCD_Blink(val1S);
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	03 96       	adiw	r24, 0x03	; 3
    1ba8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_Z9LCD_BlinkPc>
    1bac:	08 c0       	rjmp	.+16     	; 0x1bbe <_Z13displayTypingii+0x7e>
	}
	else{
		LCD_String(val0S);LCD_String(val1S);
    1bae:	ce 01       	movw	r24, r28
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	03 96       	adiw	r24, 0x03	; 3
    1bba:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	}
}
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	08 95       	ret

00001bd4 <_Z11LCD_SetDateii>:
int clockTime[6];
int ClockState = 0;
int temp = 0;
int data = 0;
char dataS[10];
void LCD_SetDate(int key, int state){
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	8c 01       	movw	r16, r24
    1be2:	7b 01       	movw	r14, r22
	LCD_Home(0);
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
	LCD_String("   20");
    1bec:	82 e9       	ldi	r24, 0x92	; 146
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	for (int i=0;i<6;i++){
    1bf4:	c0 e0       	ldi	r28, 0x00	; 0
    1bf6:	d0 e0       	ldi	r29, 0x00	; 0
    1bf8:	c6 30       	cpi	r28, 0x06	; 6
    1bfa:	d1 05       	cpc	r29, r1
    1bfc:	f4 f5       	brge	.+124    	; 0x1c7a <_Z11LCD_SetDateii+0xa6>
		if (i==3){
    1bfe:	c3 30       	cpi	r28, 0x03	; 3
    1c00:	d1 05       	cpc	r29, r1
    1c02:	41 f4       	brne	.+16     	; 0x1c14 <_Z11LCD_SetDateii+0x40>
			LCD_Home(1);
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
			LCD_String("    ");
    1c0c:	8a e9       	ldi	r24, 0x9A	; 154
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		}
		if ((i!=3) & (i!=0)){
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	c3 30       	cpi	r28, 0x03	; 3
    1c18:	d1 05       	cpc	r29, r1
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <_Z11LCD_SetDateii+0x4a>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	88 23       	and	r24, r24
    1c20:	51 f0       	breq	.+20     	; 0x1c36 <_Z11LCD_SetDateii+0x62>
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	20 97       	sbiw	r28, 0x00	; 0
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <_Z11LCD_SetDateii+0x56>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	88 23       	and	r24, r24
    1c2c:	21 f0       	breq	.+8      	; 0x1c36 <_Z11LCD_SetDateii+0x62>
			LCD_String(":");
    1c2e:	8f e9       	ldi	r24, 0x9F	; 159
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		}
		if (i==ClockState){
    1c36:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ClockState>
    1c3a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <ClockState+0x1>
    1c3e:	c8 17       	cp	r28, r24
    1c40:	d9 07       	cpc	r29, r25
    1c42:	71 f4       	brne	.+28     	; 0x1c60 <_Z11LCD_SetDateii+0x8c>
			displayTyping(clockTime[i],temp);
    1c44:	fe 01       	movw	r30, r28
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	e7 5e       	subi	r30, 0xE7	; 231
    1c4c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4e:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <temp>
    1c52:	70 91 16 02 	lds	r23, 0x0216	; 0x800216 <temp+0x1>
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_Z13displayTypingii>
    1c5e:	0b c0       	rjmp	.+22     	; 0x1c76 <_Z11LCD_SetDateii+0xa2>
		}
		else{
			displayTyping(clockTime[i],3);
    1c60:	fe 01       	movw	r30, r28
    1c62:	ee 0f       	add	r30, r30
    1c64:	ff 1f       	adc	r31, r31
    1c66:	e7 5e       	subi	r30, 0xE7	; 231
    1c68:	fd 4f       	sbci	r31, 0xFD	; 253
    1c6a:	63 e0       	ldi	r22, 0x03	; 3
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	91 81       	ldd	r25, Z+1	; 0x01
    1c72:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_Z13displayTypingii>
int data = 0;
char dataS[10];
void LCD_SetDate(int key, int state){
	LCD_Home(0);
	LCD_String("   20");
	for (int i=0;i<6;i++){
    1c76:	21 96       	adiw	r28, 0x01	; 1
    1c78:	bf cf       	rjmp	.-130    	; 0x1bf8 <_Z11LCD_SetDateii+0x24>
		}
		else{
			displayTyping(clockTime[i],3);
		}
	}
	if (int(key)>47 & int(key)<58 & state ==2){
    1c7a:	21 e0       	ldi	r18, 0x01	; 1
    1c7c:	c8 01       	movw	r24, r16
    1c7e:	c0 97       	sbiw	r24, 0x30	; 48
    1c80:	0a 97       	sbiw	r24, 0x0a	; 10
    1c82:	08 f0       	brcs	.+2      	; 0x1c86 <_Z11LCD_SetDateii+0xb2>
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	92 e0       	ldi	r25, 0x02	; 2
    1c8a:	e9 16       	cp	r14, r25
    1c8c:	f1 04       	cpc	r15, r1
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <_Z11LCD_SetDateii+0xbe>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	22 23       	and	r18, r18
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <_Z11LCD_SetDateii+0xc4>
    1c96:	5e c0       	rjmp	.+188    	; 0x1d54 <_Z11LCD_SetDateii+0x180>
    1c98:	88 23       	and	r24, r24
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <_Z11LCD_SetDateii+0xca>
    1c9c:	5b c0       	rjmp	.+182    	; 0x1d54 <_Z11LCD_SetDateii+0x180>
		data+=(int(key)-48);
    1c9e:	00 53       	subi	r16, 0x30	; 48
    1ca0:	11 09       	sbc	r17, r1
    1ca2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <data>
    1ca6:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <data+0x1>
    1caa:	08 0f       	add	r16, r24
    1cac:	19 1f       	adc	r17, r25
    1cae:	10 93 14 02 	sts	0x0214, r17	; 0x800214 <data+0x1>
    1cb2:	00 93 13 02 	sts	0x0213, r16	; 0x800213 <data>
    1cb6:	2f ef       	ldi	r18, 0xFF	; 255
    1cb8:	80 e7       	ldi	r24, 0x70	; 112
    1cba:	92 e0       	ldi	r25, 0x02	; 2
    1cbc:	21 50       	subi	r18, 0x01	; 1
    1cbe:	80 40       	sbci	r24, 0x00	; 0
    1cc0:	90 40       	sbci	r25, 0x00	; 0
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <_Z11LCD_SetDateii+0xe8>
    1cc4:	00 c0       	rjmp	.+0      	; 0x1cc6 <_Z11LCD_SetDateii+0xf2>
    1cc6:	00 00       	nop
		_delay_ms(800);
		if (temp == 0){
    1cc8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <temp>
    1ccc:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <temp+0x1>
    1cd0:	89 2b       	or	r24, r25
    1cd2:	21 f5       	brne	.+72     	; 0x1d1c <_Z11LCD_SetDateii+0x148>
			data*=10;
    1cd4:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <data>
    1cd8:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <data+0x1>
    1cdc:	c9 01       	movw	r24, r18
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	22 0f       	add	r18, r18
    1cec:	33 1f       	adc	r19, r19
    1cee:	82 0f       	add	r24, r18
    1cf0:	93 1f       	adc	r25, r19
    1cf2:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <data+0x1>
    1cf6:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <data>
			temp = 1;
    1cfa:	21 e0       	ldi	r18, 0x01	; 1
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	30 93 16 02 	sts	0x0216, r19	; 0x800216 <temp+0x1>
    1d02:	20 93 15 02 	sts	0x0215, r18	; 0x800215 <temp>
			clockTime[ClockState] = data;
    1d06:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <ClockState>
    1d0a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <ClockState+0x1>
    1d0e:	ee 0f       	add	r30, r30
    1d10:	ff 1f       	adc	r31, r31
    1d12:	e7 5e       	subi	r30, 0xE7	; 231
    1d14:	fd 4f       	sbci	r31, 0xFD	; 253
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	80 83       	st	Z, r24
    1d1a:	1c c0       	rjmp	.+56     	; 0x1d54 <_Z11LCD_SetDateii+0x180>
		}
		else{
			clockTime[ClockState] = data;
    1d1c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ClockState>
    1d20:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <ClockState+0x1>
    1d24:	fc 01       	movw	r30, r24
    1d26:	ee 0f       	add	r30, r30
    1d28:	ff 1f       	adc	r31, r31
    1d2a:	e7 5e       	subi	r30, 0xE7	; 231
    1d2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d2e:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <data>
    1d32:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <data+0x1>
    1d36:	31 83       	std	Z+1, r19	; 0x01
    1d38:	20 83       	st	Z, r18
			ClockState++;
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <ClockState+0x1>
    1d40:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ClockState>
			data=0;
    1d44:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <data+0x1>
    1d48:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <data>
			temp = 0;
    1d4c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <temp+0x1>
    1d50:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <temp>
		}
	}
	if (ClockState == 6 & state==3){
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <ClockState>
    1d5a:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <ClockState+0x1>
    1d5e:	26 30       	cpi	r18, 0x06	; 6
    1d60:	31 05       	cpc	r19, r1
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <_Z11LCD_SetDateii+0x192>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	88 23       	and	r24, r24
    1d68:	29 f1       	breq	.+74     	; 0x1db4 <_Z11LCD_SetDateii+0x1e0>
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	23 e0       	ldi	r18, 0x03	; 3
    1d6e:	e2 16       	cp	r14, r18
    1d70:	f1 04       	cpc	r15, r1
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <_Z11LCD_SetDateii+0x1a2>
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	88 23       	and	r24, r24
    1d78:	e9 f0       	breq	.+58     	; 0x1db4 <_Z11LCD_SetDateii+0x1e0>
		setClockTime(clockTime);
    1d7a:	89 e1       	ldi	r24, 0x19	; 25
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	0e 94 4e 09 	call	0x129c	; 0x129c <_Z12setClockTimePi>
		ClockState = 0;
    1d82:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ClockState+0x1>
    1d86:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ClockState>
		LCD_Home(0);LCD_Clear();
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
    1d92:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_Z9LCD_Clearv>
		LCD_String("      DONE!");
    1d96:	81 ea       	ldi	r24, 0xA1	; 161
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
    1d9e:	8f e7       	ldi	r24, 0x7F	; 127
    1da0:	9a e1       	ldi	r25, 0x1A	; 26
    1da2:	26 e0       	ldi	r18, 0x06	; 6
    1da4:	81 50       	subi	r24, 0x01	; 1
    1da6:	90 40       	sbci	r25, 0x00	; 0
    1da8:	20 40       	sbci	r18, 0x00	; 0
    1daa:	e1 f7       	brne	.-8      	; 0x1da4 <_Z11LCD_SetDateii+0x1d0>
    1dac:	00 c0       	rjmp	.+0      	; 0x1dae <_Z11LCD_SetDateii+0x1da>
    1dae:	00 00       	nop
		_delay_ms(2000);
		LCD_Clear();
    1db0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_Z9LCD_Clearv>
	}
}
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	08 95       	ret

00001dc2 <_Z8LCD_Toneci>:
char tone_List[5][10] = {"DOOM     ","STAR WARS","GOT      ","PANTHER  ","GODFATHER"};
int tone_Var = 0;
void LCD_Tone(char key,int state){
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	18 2f       	mov	r17, r24
    1dca:	eb 01       	movw	r28, r22
	LCD_Home(0);
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
	if (key=='8' & state==2){
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	c2 30       	cpi	r28, 0x02	; 2
    1dd8:	d1 05       	cpc	r29, r1
    1dda:	09 f0       	breq	.+2      	; 0x1dde <_Z8LCD_Toneci+0x1c>
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	18 33       	cpi	r17, 0x38	; 56
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <_Z8LCD_Toneci+0x24>
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	99 23       	and	r25, r25
    1de8:	a9 f0       	breq	.+42     	; 0x1e14 <_Z8LCD_Toneci+0x52>
    1dea:	88 23       	and	r24, r24
    1dec:	99 f0       	breq	.+38     	; 0x1e14 <_Z8LCD_Toneci+0x52>
		tone_Var++;
    1dee:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <tone_Var>
    1df2:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <tone_Var+0x1>
    1df6:	2f 5f       	subi	r18, 0xFF	; 255
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	30 93 12 02 	sts	0x0212, r19	; 0x800212 <tone_Var+0x1>
    1dfe:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <tone_Var>
    1e02:	2f ef       	ldi	r18, 0xFF	; 255
    1e04:	30 e7       	ldi	r19, 0x70	; 112
    1e06:	92 e0       	ldi	r25, 0x02	; 2
    1e08:	21 50       	subi	r18, 0x01	; 1
    1e0a:	30 40       	sbci	r19, 0x00	; 0
    1e0c:	90 40       	sbci	r25, 0x00	; 0
    1e0e:	e1 f7       	brne	.-8      	; 0x1e08 <_Z8LCD_Toneci+0x46>
    1e10:	00 c0       	rjmp	.+0      	; 0x1e12 <_Z8LCD_Toneci+0x50>
    1e12:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (key=='2' & state ==2){
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	12 33       	cpi	r17, 0x32	; 50
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <_Z8LCD_Toneci+0x5a>
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	99 23       	and	r25, r25
    1e1e:	a1 f0       	breq	.+40     	; 0x1e48 <_Z8LCD_Toneci+0x86>
    1e20:	88 23       	and	r24, r24
    1e22:	91 f0       	breq	.+36     	; 0x1e48 <_Z8LCD_Toneci+0x86>
		tone_Var--;
    1e24:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <tone_Var>
    1e28:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <tone_Var+0x1>
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <tone_Var+0x1>
    1e32:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <tone_Var>
    1e36:	2f ef       	ldi	r18, 0xFF	; 255
    1e38:	30 e7       	ldi	r19, 0x70	; 112
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	21 50       	subi	r18, 0x01	; 1
    1e3e:	30 40       	sbci	r19, 0x00	; 0
    1e40:	80 40       	sbci	r24, 0x00	; 0
    1e42:	e1 f7       	brne	.-8      	; 0x1e3c <_Z8LCD_Toneci+0x7a>
    1e44:	00 c0       	rjmp	.+0      	; 0x1e46 <_Z8LCD_Toneci+0x84>
    1e46:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (tone_Var>4){
    1e48:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <tone_Var>
    1e4c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <tone_Var+0x1>
    1e50:	05 97       	sbiw	r24, 0x05	; 5
    1e52:	24 f0       	brlt	.+8      	; 0x1e5c <_Z8LCD_Toneci+0x9a>
		tone_Var=0;
    1e54:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <tone_Var+0x1>
    1e58:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <tone_Var>
	}
	if (tone_Var<0){
    1e5c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <tone_Var>
    1e60:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <tone_Var+0x1>
    1e64:	99 23       	and	r25, r25
    1e66:	34 f4       	brge	.+12     	; 0x1e74 <_Z8LCD_Toneci+0xb2>
		tone_Var=4;
    1e68:	84 e0       	ldi	r24, 0x04	; 4
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <tone_Var+0x1>
    1e70:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <tone_Var>
	}
	if (state==2){
    1e74:	c2 30       	cpi	r28, 0x02	; 2
    1e76:	d1 05       	cpc	r29, r1
    1e78:	f9 f4       	brne	.+62     	; 0x1eb8 <_Z8LCD_Toneci+0xf6>
		LCD_Home(0);LCD_String(">>");
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
    1e82:	8d ea       	ldi	r24, 0xAD	; 173
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		LCD_String(tone_List[tone_Var%5]);
    1e8a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <tone_Var>
    1e8e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <tone_Var+0x1>
    1e92:	65 e0       	ldi	r22, 0x05	; 5
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	22 0f       	add	r18, r18
    1e9e:	33 1f       	adc	r19, r19
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	82 0f       	add	r24, r18
    1eae:	93 1f       	adc	r25, r19
    1eb0:	88 5c       	subi	r24, 0xC8	; 200
    1eb2:	9e 4f       	sbci	r25, 0xFE	; 254
    1eb4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		// 	LCD_Home(1);
		// 	LCD_String(menu_List[(menu_Var+1)%3]);
	}
	 if (state==3){
    1eb8:	23 97       	sbiw	r28, 0x03	; 3
    1eba:	31 f4       	brne	.+12     	; 0x1ec8 <_Z8LCD_Toneci+0x106>
		 setTone(tone_Var);
    1ebc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <tone_Var>
    1ec0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <tone_Var+0x1>
    1ec4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_Z7setTonei>
	 }

}
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	08 95       	ret

00001ed0 <_Z12LCD_SetAlarmci>:
	}
}
int clkTime = 0;
int num = 0;
signed int p = 3;
void LCD_SetAlarm(char key,int state){
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	18 2f       	mov	r17, r24
    1edc:	eb 01       	movw	r28, r22
	if (p!=-1){
    1ede:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    1ee2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	91 f1       	breq	.+100    	; 0x1f4e <_Z12LCD_SetAlarmci+0x7e>
		LCD_Home(0);
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
		displayTyping(clkTime/100,3-p);
    1ef2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    1ef6:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    1efa:	23 e0       	ldi	r18, 0x03	; 3
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	28 1b       	sub	r18, r24
    1f00:	39 0b       	sbc	r19, r25
    1f02:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <clkTime>
    1f06:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <clkTime+0x1>
    1f0a:	0f 2e       	mov	r0, r31
    1f0c:	f4 e6       	ldi	r31, 0x64	; 100
    1f0e:	ef 2e       	mov	r14, r31
    1f10:	f1 2c       	mov	r15, r1
    1f12:	f0 2d       	mov	r31, r0
    1f14:	b7 01       	movw	r22, r14
    1f16:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_Z13displayTypingii>
		LCD_String(":");
    1f22:	8f e9       	ldi	r24, 0x9F	; 159
    1f24:	91 e0       	ldi	r25, 0x01	; 1
    1f26:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		displayTyping(clkTime%100,1-p);
    1f2a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    1f2e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    1f32:	21 e0       	ldi	r18, 0x01	; 1
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	28 1b       	sub	r18, r24
    1f38:	39 0b       	sbc	r19, r25
    1f3a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <clkTime>
    1f3e:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <clkTime+0x1>
    1f42:	b7 01       	movw	r22, r14
    1f44:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    1f48:	b9 01       	movw	r22, r18
    1f4a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_Z13displayTypingii>
	}
	//LCD_String("0000");
	if (int(key)>47 & int(key)<58 & state ==2 & p!=-1){
    1f4e:	21 e0       	ldi	r18, 0x01	; 1
    1f50:	90 ed       	ldi	r25, 0xD0	; 208
    1f52:	91 0f       	add	r25, r17
    1f54:	9a 30       	cpi	r25, 0x0A	; 10
    1f56:	08 f0       	brcs	.+2      	; 0x1f5a <_Z12LCD_SetAlarmci+0x8a>
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	c2 30       	cpi	r28, 0x02	; 2
    1f5e:	d1 05       	cpc	r29, r1
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <_Z12LCD_SetAlarmci+0x94>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <p>
    1f68:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <p+0x1>
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	6f 3f       	cpi	r22, 0xFF	; 255
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	73 07       	cpc	r23, r19
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <_Z12LCD_SetAlarmci+0xa8>
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	82 23       	and	r24, r18
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <_Z12LCD_SetAlarmci+0xae>
    1f7c:	77 c0       	rjmp	.+238    	; 0x206c <_Z12LCD_SetAlarmci+0x19c>
    1f7e:	99 23       	and	r25, r25
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <_Z12LCD_SetAlarmci+0xb4>
    1f82:	74 c0       	rjmp	.+232    	; 0x206c <_Z12LCD_SetAlarmci+0x19c>
		clkTime += (int(key)-48)*powerOf(10,p);
    1f84:	e1 2e       	mov	r14, r17
    1f86:	f1 2c       	mov	r15, r1
    1f88:	80 e3       	ldi	r24, 0x30	; 48
    1f8a:	e8 1a       	sub	r14, r24
    1f8c:	f1 08       	sbc	r15, r1
    1f8e:	8a e0       	ldi	r24, 0x0A	; 10
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 23 08 	call	0x1046	; 0x1046 <_Z7powerOfii>
    1f96:	9c 01       	movw	r18, r24
    1f98:	e2 9e       	mul	r14, r18
    1f9a:	c0 01       	movw	r24, r0
    1f9c:	e3 9e       	mul	r14, r19
    1f9e:	90 0d       	add	r25, r0
    1fa0:	f2 9e       	mul	r15, r18
    1fa2:	90 0d       	add	r25, r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <clkTime>
    1faa:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <clkTime+0x1>
    1fae:	82 0f       	add	r24, r18
    1fb0:	93 1f       	adc	r25, r19
    1fb2:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <clkTime+0x1>
    1fb6:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <clkTime>
		p--;
    1fba:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    1fbe:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <p+0x1>
    1fc8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <p>
    1fcc:	3f eb       	ldi	r19, 0xBF	; 191
    1fce:	84 ed       	ldi	r24, 0xD4	; 212
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	31 50       	subi	r19, 0x01	; 1
    1fd4:	80 40       	sbci	r24, 0x00	; 0
    1fd6:	90 40       	sbci	r25, 0x00	; 0
    1fd8:	e1 f7       	brne	.-8      	; 0x1fd2 <_Z12LCD_SetAlarmci+0x102>
    1fda:	00 c0       	rjmp	.+0      	; 0x1fdc <_Z12LCD_SetAlarmci+0x10c>
    1fdc:	00 00       	nop
		_delay_ms(600);
		if (p==-1){
    1fde:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    1fe2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <_Z12LCD_SetAlarmci+0x11c>
    1fea:	40 c0       	rjmp	.+128    	; 0x206c <_Z12LCD_SetAlarmci+0x19c>
			LCD_Home(0);
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
			displayTyping(clkTime/100,3);LCD_String(":");displayTyping(clkTime%100,3);
    1ff4:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <clkTime>
    1ff8:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <clkTime+0x1>
    1ffc:	0f 2e       	mov	r0, r31
    1ffe:	f4 e6       	ldi	r31, 0x64	; 100
    2000:	ef 2e       	mov	r14, r31
    2002:	f1 2c       	mov	r15, r1
    2004:	f0 2d       	mov	r31, r0
    2006:	b7 01       	movw	r22, r14
    2008:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    200c:	cb 01       	movw	r24, r22
    200e:	63 e0       	ldi	r22, 0x03	; 3
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_Z13displayTypingii>
    2016:	8f e9       	ldi	r24, 0x9F	; 159
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
    201e:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <clkTime>
    2022:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <clkTime+0x1>
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    202c:	63 e0       	ldi	r22, 0x03	; 3
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_Z13displayTypingii>
    2034:	3f e3       	ldi	r19, 0x3F	; 63
    2036:	8d e0       	ldi	r24, 0x0D	; 13
    2038:	93 e0       	ldi	r25, 0x03	; 3
    203a:	31 50       	subi	r19, 0x01	; 1
    203c:	80 40       	sbci	r24, 0x00	; 0
    203e:	90 40       	sbci	r25, 0x00	; 0
    2040:	e1 f7       	brne	.-8      	; 0x203a <_Z12LCD_SetAlarmci+0x16a>
    2042:	00 c0       	rjmp	.+0      	; 0x2044 <_Z12LCD_SetAlarmci+0x174>
    2044:	00 00       	nop
			_delay_ms(1000);
			LCD_Home(0);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
			LCD_String("SELECT THE TONE");
    204e:	80 eb       	ldi	r24, 0xB0	; 176
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
    2056:	2f e7       	ldi	r18, 0x7F	; 127
    2058:	3a e1       	ldi	r19, 0x1A	; 26
    205a:	86 e0       	ldi	r24, 0x06	; 6
    205c:	21 50       	subi	r18, 0x01	; 1
    205e:	30 40       	sbci	r19, 0x00	; 0
    2060:	80 40       	sbci	r24, 0x00	; 0
    2062:	e1 f7       	brne	.-8      	; 0x205c <_Z12LCD_SetAlarmci+0x18c>
    2064:	00 c0       	rjmp	.+0      	; 0x2066 <_Z12LCD_SetAlarmci+0x196>
    2066:	00 00       	nop
			_delay_ms(2000);
			LCD_Clear();
    2068:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_Z9LCD_Clearv>
		}
	}
	if (p==-1){
    206c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <p>
    2070:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <p+0x1>
    2074:	01 96       	adiw	r24, 0x01	; 1
    2076:	21 f4       	brne	.+8      	; 0x2080 <_Z12LCD_SetAlarmci+0x1b0>
		LCD_Tone(key,state);
    2078:	be 01       	movw	r22, r28
    207a:	81 2f       	mov	r24, r17
    207c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_Z8LCD_Toneci>
	}
	if (state==3){
    2080:	23 97       	sbiw	r28, 0x03	; 3
    2082:	09 f0       	breq	.+2      	; 0x2086 <_Z12LCD_SetAlarmci+0x1b6>
    2084:	48 c0       	rjmp	.+144    	; 0x2116 <_Z12LCD_SetAlarmci+0x246>
		setAlarm(clkTime);
    2086:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <clkTime>
    208a:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <clkTime+0x1>
    208e:	0e 94 44 08 	call	0x1088	; 0x1088 <_Z8setAlarmi>
		LCD_Home(0);
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
		LCD_String("ALARM IS SET TO");
    209a:	80 ec       	ldi	r24, 0xC0	; 192
    209c:	91 e0       	ldi	r25, 0x01	; 1
    209e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		LCD_Home(1);
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
		displayTyping(clkTime/100,3);LCD_String(":");displayTyping(clkTime%100,3);
    20aa:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <clkTime>
    20ae:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <clkTime+0x1>
    20b2:	c4 e6       	ldi	r28, 0x64	; 100
    20b4:	d0 e0       	ldi	r29, 0x00	; 0
    20b6:	be 01       	movw	r22, r28
    20b8:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    20bc:	cb 01       	movw	r24, r22
    20be:	63 e0       	ldi	r22, 0x03	; 3
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_Z13displayTypingii>
    20c6:	8f e9       	ldi	r24, 0x9F	; 159
    20c8:	91 e0       	ldi	r25, 0x01	; 1
    20ca:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
    20ce:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <clkTime>
    20d2:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <clkTime+0x1>
    20d6:	be 01       	movw	r22, r28
    20d8:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    20dc:	63 e0       	ldi	r22, 0x03	; 3
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_Z13displayTypingii>
		clkTime=0;num=0;p=3;
    20e4:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <clkTime+0x1>
    20e8:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <clkTime>
    20ec:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <num+0x1>
    20f0:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <num>
    20f4:	83 e0       	ldi	r24, 0x03	; 3
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <p+0x1>
    20fc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <p>
    2100:	3f e7       	ldi	r19, 0x7F	; 127
    2102:	8a e1       	ldi	r24, 0x1A	; 26
    2104:	96 e0       	ldi	r25, 0x06	; 6
    2106:	31 50       	subi	r19, 0x01	; 1
    2108:	80 40       	sbci	r24, 0x00	; 0
    210a:	90 40       	sbci	r25, 0x00	; 0
    210c:	e1 f7       	brne	.-8      	; 0x2106 <_Z12LCD_SetAlarmci+0x236>
    210e:	00 c0       	rjmp	.+0      	; 0x2110 <_Z12LCD_SetAlarmci+0x240>
    2110:	00 00       	nop
		_delay_ms(2000);
		LCD_Clear();
    2112:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_Z9LCD_Clearv>
	}
}
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	08 95       	ret

00002122 <_Z8LCD_Menuci>:
	 }

}
char menu_List[3][10] = {"SET ALARM","SET TIME ","SET TONE "};
int menu_Var = 0;
void LCD_Menu(char key,int state){
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	18 2f       	mov	r17, r24
    212c:	eb 01       	movw	r28, r22
	LCD_Home(0);
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
	if (key=='8' & state==1){
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	c1 30       	cpi	r28, 0x01	; 1
    213a:	d1 05       	cpc	r29, r1
    213c:	09 f0       	breq	.+2      	; 0x2140 <_Z8LCD_Menuci+0x1e>
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	18 33       	cpi	r17, 0x38	; 56
    2144:	09 f0       	breq	.+2      	; 0x2148 <_Z8LCD_Menuci+0x26>
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	99 23       	and	r25, r25
    214a:	a9 f0       	breq	.+42     	; 0x2176 <_Z8LCD_Menuci+0x54>
    214c:	88 23       	and	r24, r24
    214e:	99 f0       	breq	.+38     	; 0x2176 <_Z8LCD_Menuci+0x54>
		menu_Var++;
    2150:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <menu_Var>
    2154:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <menu_Var+0x1>
    2158:	2f 5f       	subi	r18, 0xFF	; 255
    215a:	3f 4f       	sbci	r19, 0xFF	; 255
    215c:	30 93 10 02 	sts	0x0210, r19	; 0x800210 <menu_Var+0x1>
    2160:	20 93 0f 02 	sts	0x020F, r18	; 0x80020f <menu_Var>
    2164:	2f ef       	ldi	r18, 0xFF	; 255
    2166:	30 e7       	ldi	r19, 0x70	; 112
    2168:	92 e0       	ldi	r25, 0x02	; 2
    216a:	21 50       	subi	r18, 0x01	; 1
    216c:	30 40       	sbci	r19, 0x00	; 0
    216e:	90 40       	sbci	r25, 0x00	; 0
    2170:	e1 f7       	brne	.-8      	; 0x216a <_Z8LCD_Menuci+0x48>
    2172:	00 c0       	rjmp	.+0      	; 0x2174 <_Z8LCD_Menuci+0x52>
    2174:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (key=='2' & state ==1){
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	12 33       	cpi	r17, 0x32	; 50
    217a:	09 f0       	breq	.+2      	; 0x217e <_Z8LCD_Menuci+0x5c>
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	99 23       	and	r25, r25
    2180:	a1 f0       	breq	.+40     	; 0x21aa <_Z8LCD_Menuci+0x88>
    2182:	88 23       	and	r24, r24
    2184:	91 f0       	breq	.+36     	; 0x21aa <_Z8LCD_Menuci+0x88>
		menu_Var--;
    2186:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <menu_Var>
    218a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <menu_Var+0x1>
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <menu_Var+0x1>
    2194:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <menu_Var>
    2198:	2f ef       	ldi	r18, 0xFF	; 255
    219a:	30 e7       	ldi	r19, 0x70	; 112
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	21 50       	subi	r18, 0x01	; 1
    21a0:	30 40       	sbci	r19, 0x00	; 0
    21a2:	80 40       	sbci	r24, 0x00	; 0
    21a4:	e1 f7       	brne	.-8      	; 0x219e <_Z8LCD_Menuci+0x7c>
    21a6:	00 c0       	rjmp	.+0      	; 0x21a8 <_Z8LCD_Menuci+0x86>
    21a8:	00 00       	nop
		//LCD_Clear();
		_delay_ms(800);
	}
	if (menu_Var>2){
    21aa:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <menu_Var>
    21ae:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <menu_Var+0x1>
    21b2:	03 97       	sbiw	r24, 0x03	; 3
    21b4:	24 f0       	brlt	.+8      	; 0x21be <_Z8LCD_Menuci+0x9c>
		menu_Var=0;
    21b6:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <menu_Var+0x1>
    21ba:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <menu_Var>
	}
	if (menu_Var<0){
    21be:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <menu_Var>
    21c2:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <menu_Var+0x1>
    21c6:	99 23       	and	r25, r25
    21c8:	34 f4       	brge	.+12     	; 0x21d6 <_Z8LCD_Menuci+0xb4>
		menu_Var=2;
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <menu_Var+0x1>
    21d2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <menu_Var>
	}
	if (state==1){
    21d6:	c1 30       	cpi	r28, 0x01	; 1
    21d8:	d1 05       	cpc	r29, r1
    21da:	f9 f4       	brne	.+62     	; 0x221a <_Z8LCD_Menuci+0xf8>
		LCD_Home(0);LCD_String(">>");
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_Z8LCD_Homei>
    21e4:	8d ea       	ldi	r24, 0xAD	; 173
    21e6:	91 e0       	ldi	r25, 0x01	; 1
    21e8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
		LCD_String(menu_List[menu_Var%3]);
    21ec:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <menu_Var>
    21f0:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <menu_Var+0x1>
    21f4:	63 e0       	ldi	r22, 0x03	; 3
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__divmodhi4>
    21fc:	9c 01       	movw	r18, r24
    21fe:	22 0f       	add	r18, r18
    2200:	33 1f       	adc	r19, r19
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	86 5e       	subi	r24, 0xE6	; 230
    2214:	9e 4f       	sbci	r25, 0xFE	; 254
    2216:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	// 	LCD_Home(1);
	// 	LCD_String(menu_List[(menu_Var+1)%3]);
	}
	if ((state >1) & (menu_Var==0)){
    221a:	01 e0       	ldi	r16, 0x01	; 1
    221c:	c2 30       	cpi	r28, 0x02	; 2
    221e:	d1 05       	cpc	r29, r1
    2220:	0c f4       	brge	.+2      	; 0x2224 <_Z8LCD_Menuci+0x102>
    2222:	00 e0       	ldi	r16, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <menu_Var>
    222a:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <menu_Var+0x1>
    222e:	23 2b       	or	r18, r19
    2230:	09 f0       	breq	.+2      	; 0x2234 <_Z8LCD_Menuci+0x112>
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	88 23       	and	r24, r24
    2236:	31 f0       	breq	.+12     	; 0x2244 <_Z8LCD_Menuci+0x122>
    2238:	00 23       	and	r16, r16
    223a:	21 f0       	breq	.+8      	; 0x2244 <_Z8LCD_Menuci+0x122>
		LCD_SetAlarm(key,state);
    223c:	be 01       	movw	r22, r28
    223e:	81 2f       	mov	r24, r17
    2240:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <_Z12LCD_SetAlarmci>
	}
	if ((state >1) & (menu_Var==1)){
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <menu_Var>
    224a:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <menu_Var+0x1>
    224e:	21 30       	cpi	r18, 0x01	; 1
    2250:	31 05       	cpc	r19, r1
    2252:	09 f0       	breq	.+2      	; 0x2256 <_Z8LCD_Menuci+0x134>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	88 23       	and	r24, r24
    2258:	39 f0       	breq	.+14     	; 0x2268 <_Z8LCD_Menuci+0x146>
    225a:	00 23       	and	r16, r16
    225c:	29 f0       	breq	.+10     	; 0x2268 <_Z8LCD_Menuci+0x146>
		LCD_SetDate(key,state);
    225e:	be 01       	movw	r22, r28
    2260:	81 2f       	mov	r24, r17
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_Z11LCD_SetDateii>
	}
	if ((state >1) & (menu_Var==2)){
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <menu_Var>
    226e:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <menu_Var+0x1>
    2272:	22 30       	cpi	r18, 0x02	; 2
    2274:	31 05       	cpc	r19, r1
    2276:	09 f0       	breq	.+2      	; 0x227a <_Z8LCD_Menuci+0x158>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	88 23       	and	r24, r24
    227c:	31 f0       	breq	.+12     	; 0x228a <_Z8LCD_Menuci+0x168>
    227e:	00 23       	and	r16, r16
    2280:	21 f0       	breq	.+8      	; 0x228a <_Z8LCD_Menuci+0x168>
		LCD_Tone(key,state);
    2282:	be 01       	movw	r22, r28
    2284:	81 2f       	mov	r24, r17
    2286:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_Z8LCD_Toneci>
	}
}
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	1f 91       	pop	r17
    2290:	0f 91       	pop	r16
    2292:	08 95       	ret

00002294 <_Z14ds1307_dec2bcdh>:
#define F_CPU 1000000UL
#endif


uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
    2294:	9d ec       	ldi	r25, 0xCD	; 205
    2296:	89 9f       	mul	r24, r25
    2298:	91 2d       	mov	r25, r1
    229a:	11 24       	eor	r1, r1
    229c:	96 95       	lsr	r25
    229e:	96 95       	lsr	r25
    22a0:	96 95       	lsr	r25
    22a2:	29 2f       	mov	r18, r25
    22a4:	22 0f       	add	r18, r18
    22a6:	92 0f       	add	r25, r18
    22a8:	29 2f       	mov	r18, r25
    22aa:	22 0f       	add	r18, r18
}
    22ac:	82 0f       	add	r24, r18
    22ae:	08 95       	ret

000022b0 <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	35 95       	asr	r19
    22b6:	27 95       	ror	r18
    22b8:	35 95       	asr	r19
    22ba:	27 95       	ror	r18
    22bc:	35 95       	asr	r19
    22be:	27 95       	ror	r18
    22c0:	35 95       	asr	r19
    22c2:	27 95       	ror	r18
    22c4:	92 2f       	mov	r25, r18
    22c6:	99 0f       	add	r25, r25
    22c8:	29 0f       	add	r18, r25
    22ca:	92 2f       	mov	r25, r18
    22cc:	99 0f       	add	r25, r25
}
    22ce:	89 1b       	sub	r24, r25
    22d0:	08 95       	ret

000022d2 <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
    22d2:	0e 94 09 12 	call	0x2412	; 0x2412 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	8a 95       	dec	r24
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <_Z11ds1307_initv+0x6>
    22dc:	00 00       	nop
    22de:	08 95       	ret

000022e0 <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
    22e0:	cf 92       	push	r12
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	c8 2f       	mov	r28, r24
    22f0:	d6 2f       	mov	r29, r22
    22f2:	14 2f       	mov	r17, r20
    22f4:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
    22f6:	80 ed       	ldi	r24, 0xD0	; 208
    22f8:	0e 94 35 12 	call	0x246a	; 0x246a <_Z14i2c_start_waith>
	i2c_write(0x00);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
    2302:	8c 2d       	mov	r24, r12
    2304:	0e 94 4a 11 	call	0x2294	; 0x2294 <_Z14ds1307_dec2bcdh>
    2308:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
    230c:	8e 2d       	mov	r24, r14
    230e:	0e 94 4a 11 	call	0x2294	; 0x2294 <_Z14ds1307_dec2bcdh>
    2312:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
    2316:	80 2f       	mov	r24, r16
    2318:	0e 94 4a 11 	call	0x2294	; 0x2294 <_Z14ds1307_dec2bcdh>
    231c:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
    2320:	8f 2d       	mov	r24, r15
    2322:	0e 94 4a 11 	call	0x2294	; 0x2294 <_Z14ds1307_dec2bcdh>
    2326:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
    232a:	81 2f       	mov	r24, r17
    232c:	0e 94 4a 11 	call	0x2294	; 0x2294 <_Z14ds1307_dec2bcdh>
    2330:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
    2334:	8d 2f       	mov	r24, r29
    2336:	0e 94 4a 11 	call	0x2294	; 0x2294 <_Z14ds1307_dec2bcdh>
    233a:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
    233e:	8c 2f       	mov	r24, r28
    2340:	0e 94 4a 11 	call	0x2294	; 0x2294 <_Z14ds1307_dec2bcdh>
    2344:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_write(0x00);
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_stop();
    234e:	0e 94 5f 12 	call	0x24be	; 0x24be <_Z8i2c_stopv>
}
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	ef 90       	pop	r14
    235e:	cf 90       	pop	r12
    2360:	08 95       	ret

00002362 <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
    2362:	6f 92       	push	r6
    2364:	7f 92       	push	r7
    2366:	8f 92       	push	r8
    2368:	9f 92       	push	r9
    236a:	af 92       	push	r10
    236c:	bf 92       	push	r11
    236e:	cf 92       	push	r12
    2370:	df 92       	push	r13
    2372:	ef 92       	push	r14
    2374:	ff 92       	push	r15
    2376:	0f 93       	push	r16
    2378:	1f 93       	push	r17
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	ec 01       	movw	r28, r24
    2380:	3b 01       	movw	r6, r22
    2382:	5a 01       	movw	r10, r20
    2384:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
    2386:	80 ed       	ldi	r24, 0xD0	; 208
    2388:	0e 94 35 12 	call	0x246a	; 0x246a <_Z14i2c_start_waith>
	i2c_write(0x00);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z9i2c_writeh>
	i2c_stop();
    2392:	0e 94 5f 12 	call	0x24be	; 0x24be <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
    2396:	81 ed       	ldi	r24, 0xD1	; 209
    2398:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
    239c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_Z11i2c_readAckv>
    23a0:	8f 77       	andi	r24, 0x7F	; 127
    23a2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_Z14ds1307_bcd2dech>
    23a6:	f6 01       	movw	r30, r12
    23a8:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
    23aa:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_Z11i2c_readAckv>
    23ae:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_Z14ds1307_bcd2dech>
    23b2:	f7 01       	movw	r30, r14
    23b4:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
    23b6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_Z11i2c_readAckv>
    23ba:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_Z14ds1307_bcd2dech>
    23be:	f8 01       	movw	r30, r16
    23c0:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
    23c2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_Z11i2c_readAckv>
    23c6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_Z14ds1307_bcd2dech>
    23ca:	f4 01       	movw	r30, r8
    23cc:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
    23ce:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_Z11i2c_readAckv>
    23d2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_Z14ds1307_bcd2dech>
    23d6:	f5 01       	movw	r30, r10
    23d8:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
    23da:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_Z11i2c_readAckv>
    23de:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_Z14ds1307_bcd2dech>
    23e2:	f3 01       	movw	r30, r6
    23e4:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
    23e6:	0e 94 83 12 	call	0x2506	; 0x2506 <_Z11i2c_readNakv>
    23ea:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_Z14ds1307_bcd2dech>
    23ee:	88 83       	st	Y, r24
	i2c_stop();
    23f0:	0e 94 5f 12 	call	0x24be	; 0x24be <_Z8i2c_stopv>
}
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
    23fc:	ff 90       	pop	r15
    23fe:	ef 90       	pop	r14
    2400:	df 90       	pop	r13
    2402:	cf 90       	pop	r12
    2404:	bf 90       	pop	r11
    2406:	af 90       	pop	r10
    2408:	9f 90       	pop	r9
    240a:	8f 90       	pop	r8
    240c:	7f 90       	pop	r7
    240e:	6f 90       	pop	r6
    2410:	08 95       	ret

00002412 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    2412:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2416:	8d ef       	ldi	r24, 0xFD	; 253
    2418:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    241c:	08 95       	ret

0000241e <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    241e:	94 ea       	ldi	r25, 0xA4	; 164
    2420:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2424:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2428:	99 23       	and	r25, r25
    242a:	e4 f7       	brge	.-8      	; 0x2424 <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    242c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2430:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2432:	98 30       	cpi	r25, 0x08	; 8
    2434:	11 f0       	breq	.+4      	; 0x243a <_Z9i2c_starth+0x1c>
    2436:	90 31       	cpi	r25, 0x10	; 16
    2438:	91 f4       	brne	.+36     	; 0x245e <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
    243a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    243e:	84 e8       	ldi	r24, 0x84	; 132
    2440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2444:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2448:	88 23       	and	r24, r24
    244a:	e4 f7       	brge	.-8      	; 0x2444 <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    244c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    2450:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2452:	88 31       	cpi	r24, 0x18	; 24
    2454:	31 f0       	breq	.+12     	; 0x2462 <_Z9i2c_starth+0x44>
    2456:	80 34       	cpi	r24, 0x40	; 64
    2458:	31 f4       	brne	.+12     	; 0x2466 <_Z9i2c_starth+0x48>

	return 0;
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    2468:	08 95       	ret

0000246a <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    246a:	94 ea       	ldi	r25, 0xA4	; 164
    246c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2470:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2474:	99 23       	and	r25, r25
    2476:	e4 f7       	brge	.-8      	; 0x2470 <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2478:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    247c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    247e:	98 30       	cpi	r25, 0x08	; 8
    2480:	11 f0       	breq	.+4      	; 0x2486 <_Z14i2c_start_waith+0x1c>
    2482:	90 31       	cpi	r25, 0x10	; 16
    2484:	91 f7       	brne	.-28     	; 0x246a <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
    2486:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
    248a:	94 e8       	ldi	r25, 0x84	; 132
    248c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2490:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2494:	99 23       	and	r25, r25
    2496:	e4 f7       	brge	.-8      	; 0x2490 <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2498:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    249c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    249e:	90 32       	cpi	r25, 0x20	; 32
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <_Z14i2c_start_waith+0x3c>
    24a2:	98 35       	cpi	r25, 0x58	; 88
    24a4:	41 f4       	brne	.+16     	; 0x24b6 <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    24a6:	94 e9       	ldi	r25, 0x94	; 148
    24a8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    24ac:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    24b0:	94 fd       	sbrc	r25, 4
    24b2:	fc cf       	rjmp	.-8      	; 0x24ac <_Z14i2c_start_waith+0x42>
    24b4:	da cf       	rjmp	.-76     	; 0x246a <_Z14i2c_start_waith>
    24b6:	08 95       	ret

000024b8 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    24b8:	0e 94 0f 12 	call	0x241e	; 0x241e <_Z9i2c_starth>

}/* i2c_rep_start */
    24bc:	08 95       	ret

000024be <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    24be:	84 e9       	ldi	r24, 0x94	; 148
    24c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    24c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    24c8:	84 fd       	sbrc	r24, 4
    24ca:	fc cf       	rjmp	.-8      	; 0x24c4 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    24cc:	08 95       	ret

000024ce <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    24ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    24d2:	84 e8       	ldi	r24, 0x84	; 132
    24d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    24d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    24dc:	88 23       	and	r24, r24
    24de:	e4 f7       	brge	.-8      	; 0x24d8 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    24e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    24e4:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    24e6:	88 32       	cpi	r24, 0x28	; 40
    24e8:	11 f0       	breq	.+4      	; 0x24ee <_Z9i2c_writeh+0x20>
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	08 95       	ret
	return 0;
    24ee:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    24f0:	08 95       	ret

000024f2 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    24f2:	84 ec       	ldi	r24, 0xC4	; 196
    24f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
    24f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    24fc:	88 23       	and	r24, r24
    24fe:	e4 f7       	brge	.-8      	; 0x24f8 <_Z11i2c_readAckv+0x6>

    return TWDR;
    2500:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
    2504:	08 95       	ret

00002506 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2506:	84 e8       	ldi	r24, 0x84	; 132
    2508:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
    250c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2510:	88 23       	and	r24, r24
    2512:	e4 f7       	brge	.-8      	; 0x250c <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    2514:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
    2518:	08 95       	ret

0000251a <_Z8btnPressv>:
{
} //~Keypad


char btnPress(){
	keyDir = 0x0F;
    251a:	8f e0       	ldi	r24, 0x0F	; 15
    251c:	87 b9       	out	0x07, r24	; 7
	for (int i=0;i<4;i++){
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	64 30       	cpi	r22, 0x04	; 4
    2524:	71 05       	cpc	r23, r1
    2526:	94 f5       	brge	.+100    	; 0x258c <_Z8btnPressv+0x72>
		keyPort = 1<<row[i];
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	fb 01       	movw	r30, r22
    252e:	e1 59       	subi	r30, 0x91	; 145
    2530:	fe 4f       	sbci	r31, 0xFE	; 254
    2532:	00 80       	ld	r0, Z
    2534:	02 c0       	rjmp	.+4      	; 0x253a <_Z8btnPressv+0x20>
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	0a 94       	dec	r0
    253c:	e2 f7       	brpl	.-8      	; 0x2536 <_Z8btnPressv+0x1c>
    253e:	88 b9       	out	0x08, r24	; 8
		for (int j = 0;j<3;j++){
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	83 30       	cpi	r24, 0x03	; 3
    2546:	91 05       	cpc	r25, r1
    2548:	f4 f4       	brge	.+60     	; 0x2586 <_Z8btnPressv+0x6c>
			if (keyPin==(1<<colomn[j])){
    254a:	43 b1       	in	r20, 0x03	; 3
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	21 e0       	ldi	r18, 0x01	; 1
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	fc 01       	movw	r30, r24
    2554:	e4 59       	subi	r30, 0x94	; 148
    2556:	fe 4f       	sbci	r31, 0xFE	; 254
    2558:	00 80       	ld	r0, Z
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <_Z8btnPressv+0x46>
    255c:	22 0f       	add	r18, r18
    255e:	33 1f       	adc	r19, r19
    2560:	0a 94       	dec	r0
    2562:	e2 f7       	brpl	.-8      	; 0x255c <_Z8btnPressv+0x42>
    2564:	42 17       	cp	r20, r18
    2566:	53 07       	cpc	r21, r19
    2568:	61 f4       	brne	.+24     	; 0x2582 <_Z8btnPressv+0x68>
				//_delay_ms(100);
				return keys[i][j];
    256a:	9b 01       	movw	r18, r22
    256c:	22 0f       	add	r18, r18
    256e:	33 1f       	adc	r19, r19
    2570:	62 0f       	add	r22, r18
    2572:	73 1f       	adc	r23, r19
    2574:	6d 58       	subi	r22, 0x8D	; 141
    2576:	7e 4f       	sbci	r23, 0xFE	; 254
    2578:	fb 01       	movw	r30, r22
    257a:	e8 0f       	add	r30, r24
    257c:	f9 1f       	adc	r31, r25
    257e:	80 81       	ld	r24, Z
    2580:	08 95       	ret

char btnPress(){
	keyDir = 0x0F;
	for (int i=0;i<4;i++){
		keyPort = 1<<row[i];
		for (int j = 0;j<3;j++){
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	df cf       	rjmp	.-66     	; 0x2544 <_Z8btnPressv+0x2a>
} //~Keypad


char btnPress(){
	keyDir = 0x0F;
	for (int i=0;i<4;i++){
    2586:	6f 5f       	subi	r22, 0xFF	; 255
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	cb cf       	rjmp	.-106    	; 0x2522 <_Z8btnPressv+0x8>
				//_delay_ms(100);
				return keys[i][j];
			}
		}
	}
	return '&';
    258c:	86 e2       	ldi	r24, 0x26	; 38
    258e:	08 95       	ret

00002590 <main>:

#ifndef F_CPU
#define F_CPU 1000000UL
#endif
int main()
{
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	2c 97       	sbiw	r28, 0x0c	; 12
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
	init_buzzer();		// Initialize pins used for buzzer and Interrupt button
    25a4:	0e 94 94 0a 	call	0x1528	; 0x1528 <_Z11init_buzzerv>
	LCD_Init();			/* Initialization of LCD*/
    25a8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_Z8LCD_Initv>
	LCD_String("   WELCOME!!!");
    25ac:	80 ed       	ldi	r24, 0xD0	; 208
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z10LCD_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25b4:	2f e3       	ldi	r18, 0x3F	; 63
    25b6:	8d e0       	ldi	r24, 0x0D	; 13
    25b8:	93 e0       	ldi	r25, 0x03	; 3
    25ba:	21 50       	subi	r18, 0x01	; 1
    25bc:	80 40       	sbci	r24, 0x00	; 0
    25be:	90 40       	sbci	r25, 0x00	; 0
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <main+0x2a>
    25c2:	00 c0       	rjmp	.+0      	; 0x25c4 <main+0x34>
    25c4:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
    25c6:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_Z9LCD_Clearv>
	ds1307_init();
    25ca:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_Z11ds1307_initv>
	int clocktime[6] = {21,05,4,12,8,35};
    25ce:	8c e0       	ldi	r24, 0x0C	; 12
    25d0:	ef e7       	ldi	r30, 0x7F	; 127
    25d2:	f1 e0       	ldi	r31, 0x01	; 1
    25d4:	de 01       	movw	r26, r28
    25d6:	11 96       	adiw	r26, 0x01	; 1
    25d8:	01 90       	ld	r0, Z+
    25da:	0d 92       	st	X+, r0
    25dc:	8a 95       	dec	r24
    25de:	e1 f7       	brne	.-8      	; 0x25d8 <main+0x48>
	setClockTime(clocktime);
    25e0:	ce 01       	movw	r24, r28
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	0e 94 4e 09 	call	0x129c	; 0x129c <_Z12setClockTimePi>
	//setAlarm(1209);
	int menu = 0;
    25e8:	00 e0       	ldi	r16, 0x00	; 0
    25ea:	10 e0       	ldi	r17, 0x00	; 0
	char key;
	while(1){
		checkAlarm();
    25ec:	0e 94 91 08 	call	0x1122	; 0x1122 <_Z10checkAlarmv>
		key = btnPress();
    25f0:	0e 94 8d 12 	call	0x251a	; 0x251a <_Z8btnPressv>
    25f4:	f8 2e       	mov	r15, r24
		if (menu==0){
    25f6:	01 15       	cp	r16, r1
    25f8:	11 05       	cpc	r17, r1
    25fa:	11 f4       	brne	.+4      	; 0x2600 <main+0x70>
			displayTime();
    25fc:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_Z11displayTimev>
		}
		if (key=='*'){
    2600:	2a e2       	ldi	r18, 0x2A	; 42
    2602:	f2 12       	cpse	r15, r18
    2604:	0d c0       	rjmp	.+26     	; 0x2620 <main+0x90>
    2606:	8f e7       	ldi	r24, 0x7F	; 127
    2608:	98 e3       	ldi	r25, 0x38	; 56
    260a:	21 e0       	ldi	r18, 0x01	; 1
    260c:	81 50       	subi	r24, 0x01	; 1
    260e:	90 40       	sbci	r25, 0x00	; 0
    2610:	20 40       	sbci	r18, 0x00	; 0
    2612:	e1 f7       	brne	.-8      	; 0x260c <main+0x7c>
    2614:	00 c0       	rjmp	.+0      	; 0x2616 <main+0x86>
    2616:	00 00       	nop
			_delay_ms(400);
			menu ++;
    2618:	0f 5f       	subi	r16, 0xFF	; 255
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
			LCD_Clear();
    261c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_Z9LCD_Clearv>
		}
		if (menu>0){
    2620:	10 16       	cp	r1, r16
    2622:	11 06       	cpc	r1, r17
    2624:	24 f4       	brge	.+8      	; 0x262e <main+0x9e>
			LCD_Menu(key,menu);
    2626:	b8 01       	movw	r22, r16
    2628:	8f 2d       	mov	r24, r15
    262a:	0e 94 91 10 	call	0x2122	; 0x2122 <_Z8LCD_Menuci>
		}
		if (menu==3 | menu==-1){
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	03 30       	cpi	r16, 0x03	; 3
    2632:	11 05       	cpc	r17, r1
    2634:	09 f0       	breq	.+2      	; 0x2638 <main+0xa8>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	81 11       	cpse	r24, r1
    263a:	08 c0       	rjmp	.+16     	; 0x264c <main+0xbc>
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	0f 3f       	cpi	r16, 0xFF	; 255
    2640:	9f ef       	ldi	r25, 0xFF	; 255
    2642:	19 07       	cpc	r17, r25
    2644:	09 f0       	breq	.+2      	; 0x2648 <main+0xb8>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	88 23       	and	r24, r24
    264a:	11 f0       	breq	.+4      	; 0x2650 <main+0xc0>
			menu = 0;
    264c:	00 e0       	ldi	r16, 0x00	; 0
    264e:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (key=='#'){
    2650:	23 e2       	ldi	r18, 0x23	; 35
    2652:	f2 12       	cpse	r15, r18
    2654:	cb cf       	rjmp	.-106    	; 0x25ec <main+0x5c>
    2656:	8f e7       	ldi	r24, 0x7F	; 127
    2658:	98 e3       	ldi	r25, 0x38	; 56
    265a:	21 e0       	ldi	r18, 0x01	; 1
    265c:	81 50       	subi	r24, 0x01	; 1
    265e:	90 40       	sbci	r25, 0x00	; 0
    2660:	20 40       	sbci	r18, 0x00	; 0
    2662:	e1 f7       	brne	.-8      	; 0x265c <main+0xcc>
    2664:	00 c0       	rjmp	.+0      	; 0x2666 <main+0xd6>
    2666:	00 00       	nop
			_delay_ms(400);
			menu --;
    2668:	01 50       	subi	r16, 0x01	; 1
    266a:	11 09       	sbc	r17, r1
			LCD_Clear();
    266c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_Z9LCD_Clearv>
    2670:	bd cf       	rjmp	.-134    	; 0x25ec <main+0x5c>

00002672 <__cmpsf2>:
    2672:	0e 94 23 14 	call	0x2846	; 0x2846 <__fp_cmp>
    2676:	08 f4       	brcc	.+2      	; 0x267a <__cmpsf2+0x8>
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	08 95       	ret

0000267c <__divsf3>:
    267c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__divsf3x>
    2680:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__fp_round>
    2684:	0e 94 57 14 	call	0x28ae	; 0x28ae <__fp_pscB>
    2688:	58 f0       	brcs	.+22     	; 0x26a0 <__divsf3+0x24>
    268a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__fp_pscA>
    268e:	40 f0       	brcs	.+16     	; 0x26a0 <__divsf3+0x24>
    2690:	29 f4       	brne	.+10     	; 0x269c <__divsf3+0x20>
    2692:	5f 3f       	cpi	r21, 0xFF	; 255
    2694:	29 f0       	breq	.+10     	; 0x26a0 <__divsf3+0x24>
    2696:	0c 94 47 14 	jmp	0x288e	; 0x288e <__fp_inf>
    269a:	51 11       	cpse	r21, r1
    269c:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__fp_szero>
    26a0:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__fp_nan>

000026a4 <__divsf3x>:
    26a4:	0e 94 6f 14 	call	0x28de	; 0x28de <__fp_split3>
    26a8:	68 f3       	brcs	.-38     	; 0x2684 <__divsf3+0x8>

000026aa <__divsf3_pse>:
    26aa:	99 23       	and	r25, r25
    26ac:	b1 f3       	breq	.-20     	; 0x269a <__divsf3+0x1e>
    26ae:	55 23       	and	r21, r21
    26b0:	91 f3       	breq	.-28     	; 0x2696 <__divsf3+0x1a>
    26b2:	95 1b       	sub	r25, r21
    26b4:	55 0b       	sbc	r21, r21
    26b6:	bb 27       	eor	r27, r27
    26b8:	aa 27       	eor	r26, r26
    26ba:	62 17       	cp	r22, r18
    26bc:	73 07       	cpc	r23, r19
    26be:	84 07       	cpc	r24, r20
    26c0:	38 f0       	brcs	.+14     	; 0x26d0 <__divsf3_pse+0x26>
    26c2:	9f 5f       	subi	r25, 0xFF	; 255
    26c4:	5f 4f       	sbci	r21, 0xFF	; 255
    26c6:	22 0f       	add	r18, r18
    26c8:	33 1f       	adc	r19, r19
    26ca:	44 1f       	adc	r20, r20
    26cc:	aa 1f       	adc	r26, r26
    26ce:	a9 f3       	breq	.-22     	; 0x26ba <__divsf3_pse+0x10>
    26d0:	35 d0       	rcall	.+106    	; 0x273c <__divsf3_pse+0x92>
    26d2:	0e 2e       	mov	r0, r30
    26d4:	3a f0       	brmi	.+14     	; 0x26e4 <__divsf3_pse+0x3a>
    26d6:	e0 e8       	ldi	r30, 0x80	; 128
    26d8:	32 d0       	rcall	.+100    	; 0x273e <__divsf3_pse+0x94>
    26da:	91 50       	subi	r25, 0x01	; 1
    26dc:	50 40       	sbci	r21, 0x00	; 0
    26de:	e6 95       	lsr	r30
    26e0:	00 1c       	adc	r0, r0
    26e2:	ca f7       	brpl	.-14     	; 0x26d6 <__divsf3_pse+0x2c>
    26e4:	2b d0       	rcall	.+86     	; 0x273c <__divsf3_pse+0x92>
    26e6:	fe 2f       	mov	r31, r30
    26e8:	29 d0       	rcall	.+82     	; 0x273c <__divsf3_pse+0x92>
    26ea:	66 0f       	add	r22, r22
    26ec:	77 1f       	adc	r23, r23
    26ee:	88 1f       	adc	r24, r24
    26f0:	bb 1f       	adc	r27, r27
    26f2:	26 17       	cp	r18, r22
    26f4:	37 07       	cpc	r19, r23
    26f6:	48 07       	cpc	r20, r24
    26f8:	ab 07       	cpc	r26, r27
    26fa:	b0 e8       	ldi	r27, 0x80	; 128
    26fc:	09 f0       	breq	.+2      	; 0x2700 <__divsf3_pse+0x56>
    26fe:	bb 0b       	sbc	r27, r27
    2700:	80 2d       	mov	r24, r0
    2702:	bf 01       	movw	r22, r30
    2704:	ff 27       	eor	r31, r31
    2706:	93 58       	subi	r25, 0x83	; 131
    2708:	5f 4f       	sbci	r21, 0xFF	; 255
    270a:	3a f0       	brmi	.+14     	; 0x271a <__divsf3_pse+0x70>
    270c:	9e 3f       	cpi	r25, 0xFE	; 254
    270e:	51 05       	cpc	r21, r1
    2710:	78 f0       	brcs	.+30     	; 0x2730 <__divsf3_pse+0x86>
    2712:	0c 94 47 14 	jmp	0x288e	; 0x288e <__fp_inf>
    2716:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__fp_szero>
    271a:	5f 3f       	cpi	r21, 0xFF	; 255
    271c:	e4 f3       	brlt	.-8      	; 0x2716 <__divsf3_pse+0x6c>
    271e:	98 3e       	cpi	r25, 0xE8	; 232
    2720:	d4 f3       	brlt	.-12     	; 0x2716 <__divsf3_pse+0x6c>
    2722:	86 95       	lsr	r24
    2724:	77 95       	ror	r23
    2726:	67 95       	ror	r22
    2728:	b7 95       	ror	r27
    272a:	f7 95       	ror	r31
    272c:	9f 5f       	subi	r25, 0xFF	; 255
    272e:	c9 f7       	brne	.-14     	; 0x2722 <__divsf3_pse+0x78>
    2730:	88 0f       	add	r24, r24
    2732:	91 1d       	adc	r25, r1
    2734:	96 95       	lsr	r25
    2736:	87 95       	ror	r24
    2738:	97 f9       	bld	r25, 7
    273a:	08 95       	ret
    273c:	e1 e0       	ldi	r30, 0x01	; 1
    273e:	66 0f       	add	r22, r22
    2740:	77 1f       	adc	r23, r23
    2742:	88 1f       	adc	r24, r24
    2744:	bb 1f       	adc	r27, r27
    2746:	62 17       	cp	r22, r18
    2748:	73 07       	cpc	r23, r19
    274a:	84 07       	cpc	r24, r20
    274c:	ba 07       	cpc	r27, r26
    274e:	20 f0       	brcs	.+8      	; 0x2758 <__divsf3_pse+0xae>
    2750:	62 1b       	sub	r22, r18
    2752:	73 0b       	sbc	r23, r19
    2754:	84 0b       	sbc	r24, r20
    2756:	ba 0b       	sbc	r27, r26
    2758:	ee 1f       	adc	r30, r30
    275a:	88 f7       	brcc	.-30     	; 0x273e <__divsf3_pse+0x94>
    275c:	e0 95       	com	r30
    275e:	08 95       	ret

00002760 <__fixsfsi>:
    2760:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixunssfsi>
    2764:	68 94       	set
    2766:	b1 11       	cpse	r27, r1
    2768:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__fp_szero>
    276c:	08 95       	ret

0000276e <__fixunssfsi>:
    276e:	0e 94 77 14 	call	0x28ee	; 0x28ee <__fp_splitA>
    2772:	88 f0       	brcs	.+34     	; 0x2796 <__fixunssfsi+0x28>
    2774:	9f 57       	subi	r25, 0x7F	; 127
    2776:	98 f0       	brcs	.+38     	; 0x279e <__fixunssfsi+0x30>
    2778:	b9 2f       	mov	r27, r25
    277a:	99 27       	eor	r25, r25
    277c:	b7 51       	subi	r27, 0x17	; 23
    277e:	b0 f0       	brcs	.+44     	; 0x27ac <__fixunssfsi+0x3e>
    2780:	e1 f0       	breq	.+56     	; 0x27ba <__fixunssfsi+0x4c>
    2782:	66 0f       	add	r22, r22
    2784:	77 1f       	adc	r23, r23
    2786:	88 1f       	adc	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	1a f0       	brmi	.+6      	; 0x2792 <__fixunssfsi+0x24>
    278c:	ba 95       	dec	r27
    278e:	c9 f7       	brne	.-14     	; 0x2782 <__fixunssfsi+0x14>
    2790:	14 c0       	rjmp	.+40     	; 0x27ba <__fixunssfsi+0x4c>
    2792:	b1 30       	cpi	r27, 0x01	; 1
    2794:	91 f0       	breq	.+36     	; 0x27ba <__fixunssfsi+0x4c>
    2796:	0e 94 91 14 	call	0x2922	; 0x2922 <__fp_zero>
    279a:	b1 e0       	ldi	r27, 0x01	; 1
    279c:	08 95       	ret
    279e:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__fp_zero>
    27a2:	67 2f       	mov	r22, r23
    27a4:	78 2f       	mov	r23, r24
    27a6:	88 27       	eor	r24, r24
    27a8:	b8 5f       	subi	r27, 0xF8	; 248
    27aa:	39 f0       	breq	.+14     	; 0x27ba <__fixunssfsi+0x4c>
    27ac:	b9 3f       	cpi	r27, 0xF9	; 249
    27ae:	cc f3       	brlt	.-14     	; 0x27a2 <__fixunssfsi+0x34>
    27b0:	86 95       	lsr	r24
    27b2:	77 95       	ror	r23
    27b4:	67 95       	ror	r22
    27b6:	b3 95       	inc	r27
    27b8:	d9 f7       	brne	.-10     	; 0x27b0 <__fixunssfsi+0x42>
    27ba:	3e f4       	brtc	.+14     	; 0x27ca <__fixunssfsi+0x5c>
    27bc:	90 95       	com	r25
    27be:	80 95       	com	r24
    27c0:	70 95       	com	r23
    27c2:	61 95       	neg	r22
    27c4:	7f 4f       	sbci	r23, 0xFF	; 255
    27c6:	8f 4f       	sbci	r24, 0xFF	; 255
    27c8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ca:	08 95       	ret

000027cc <__floatunsisf>:
    27cc:	e8 94       	clt
    27ce:	09 c0       	rjmp	.+18     	; 0x27e2 <__floatsisf+0x12>

000027d0 <__floatsisf>:
    27d0:	97 fb       	bst	r25, 7
    27d2:	3e f4       	brtc	.+14     	; 0x27e2 <__floatsisf+0x12>
    27d4:	90 95       	com	r25
    27d6:	80 95       	com	r24
    27d8:	70 95       	com	r23
    27da:	61 95       	neg	r22
    27dc:	7f 4f       	sbci	r23, 0xFF	; 255
    27de:	8f 4f       	sbci	r24, 0xFF	; 255
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	99 23       	and	r25, r25
    27e4:	a9 f0       	breq	.+42     	; 0x2810 <__floatsisf+0x40>
    27e6:	f9 2f       	mov	r31, r25
    27e8:	96 e9       	ldi	r25, 0x96	; 150
    27ea:	bb 27       	eor	r27, r27
    27ec:	93 95       	inc	r25
    27ee:	f6 95       	lsr	r31
    27f0:	87 95       	ror	r24
    27f2:	77 95       	ror	r23
    27f4:	67 95       	ror	r22
    27f6:	b7 95       	ror	r27
    27f8:	f1 11       	cpse	r31, r1
    27fa:	f8 cf       	rjmp	.-16     	; 0x27ec <__floatsisf+0x1c>
    27fc:	fa f4       	brpl	.+62     	; 0x283c <__floatsisf+0x6c>
    27fe:	bb 0f       	add	r27, r27
    2800:	11 f4       	brne	.+4      	; 0x2806 <__floatsisf+0x36>
    2802:	60 ff       	sbrs	r22, 0
    2804:	1b c0       	rjmp	.+54     	; 0x283c <__floatsisf+0x6c>
    2806:	6f 5f       	subi	r22, 0xFF	; 255
    2808:	7f 4f       	sbci	r23, 0xFF	; 255
    280a:	8f 4f       	sbci	r24, 0xFF	; 255
    280c:	9f 4f       	sbci	r25, 0xFF	; 255
    280e:	16 c0       	rjmp	.+44     	; 0x283c <__floatsisf+0x6c>
    2810:	88 23       	and	r24, r24
    2812:	11 f0       	breq	.+4      	; 0x2818 <__floatsisf+0x48>
    2814:	96 e9       	ldi	r25, 0x96	; 150
    2816:	11 c0       	rjmp	.+34     	; 0x283a <__floatsisf+0x6a>
    2818:	77 23       	and	r23, r23
    281a:	21 f0       	breq	.+8      	; 0x2824 <__floatsisf+0x54>
    281c:	9e e8       	ldi	r25, 0x8E	; 142
    281e:	87 2f       	mov	r24, r23
    2820:	76 2f       	mov	r23, r22
    2822:	05 c0       	rjmp	.+10     	; 0x282e <__floatsisf+0x5e>
    2824:	66 23       	and	r22, r22
    2826:	71 f0       	breq	.+28     	; 0x2844 <__floatsisf+0x74>
    2828:	96 e8       	ldi	r25, 0x86	; 134
    282a:	86 2f       	mov	r24, r22
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	2a f0       	brmi	.+10     	; 0x283c <__floatsisf+0x6c>
    2832:	9a 95       	dec	r25
    2834:	66 0f       	add	r22, r22
    2836:	77 1f       	adc	r23, r23
    2838:	88 1f       	adc	r24, r24
    283a:	da f7       	brpl	.-10     	; 0x2832 <__floatsisf+0x62>
    283c:	88 0f       	add	r24, r24
    283e:	96 95       	lsr	r25
    2840:	87 95       	ror	r24
    2842:	97 f9       	bld	r25, 7
    2844:	08 95       	ret

00002846 <__fp_cmp>:
    2846:	99 0f       	add	r25, r25
    2848:	00 08       	sbc	r0, r0
    284a:	55 0f       	add	r21, r21
    284c:	aa 0b       	sbc	r26, r26
    284e:	e0 e8       	ldi	r30, 0x80	; 128
    2850:	fe ef       	ldi	r31, 0xFE	; 254
    2852:	16 16       	cp	r1, r22
    2854:	17 06       	cpc	r1, r23
    2856:	e8 07       	cpc	r30, r24
    2858:	f9 07       	cpc	r31, r25
    285a:	c0 f0       	brcs	.+48     	; 0x288c <__fp_cmp+0x46>
    285c:	12 16       	cp	r1, r18
    285e:	13 06       	cpc	r1, r19
    2860:	e4 07       	cpc	r30, r20
    2862:	f5 07       	cpc	r31, r21
    2864:	98 f0       	brcs	.+38     	; 0x288c <__fp_cmp+0x46>
    2866:	62 1b       	sub	r22, r18
    2868:	73 0b       	sbc	r23, r19
    286a:	84 0b       	sbc	r24, r20
    286c:	95 0b       	sbc	r25, r21
    286e:	39 f4       	brne	.+14     	; 0x287e <__fp_cmp+0x38>
    2870:	0a 26       	eor	r0, r26
    2872:	61 f0       	breq	.+24     	; 0x288c <__fp_cmp+0x46>
    2874:	23 2b       	or	r18, r19
    2876:	24 2b       	or	r18, r20
    2878:	25 2b       	or	r18, r21
    287a:	21 f4       	brne	.+8      	; 0x2884 <__fp_cmp+0x3e>
    287c:	08 95       	ret
    287e:	0a 26       	eor	r0, r26
    2880:	09 f4       	brne	.+2      	; 0x2884 <__fp_cmp+0x3e>
    2882:	a1 40       	sbci	r26, 0x01	; 1
    2884:	a6 95       	lsr	r26
    2886:	8f ef       	ldi	r24, 0xFF	; 255
    2888:	81 1d       	adc	r24, r1
    288a:	81 1d       	adc	r24, r1
    288c:	08 95       	ret

0000288e <__fp_inf>:
    288e:	97 f9       	bld	r25, 7
    2890:	9f 67       	ori	r25, 0x7F	; 127
    2892:	80 e8       	ldi	r24, 0x80	; 128
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	60 e0       	ldi	r22, 0x00	; 0
    2898:	08 95       	ret

0000289a <__fp_nan>:
    289a:	9f ef       	ldi	r25, 0xFF	; 255
    289c:	80 ec       	ldi	r24, 0xC0	; 192
    289e:	08 95       	ret

000028a0 <__fp_pscA>:
    28a0:	00 24       	eor	r0, r0
    28a2:	0a 94       	dec	r0
    28a4:	16 16       	cp	r1, r22
    28a6:	17 06       	cpc	r1, r23
    28a8:	18 06       	cpc	r1, r24
    28aa:	09 06       	cpc	r0, r25
    28ac:	08 95       	ret

000028ae <__fp_pscB>:
    28ae:	00 24       	eor	r0, r0
    28b0:	0a 94       	dec	r0
    28b2:	12 16       	cp	r1, r18
    28b4:	13 06       	cpc	r1, r19
    28b6:	14 06       	cpc	r1, r20
    28b8:	05 06       	cpc	r0, r21
    28ba:	08 95       	ret

000028bc <__fp_round>:
    28bc:	09 2e       	mov	r0, r25
    28be:	03 94       	inc	r0
    28c0:	00 0c       	add	r0, r0
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <__fp_round+0xc>
    28c4:	88 23       	and	r24, r24
    28c6:	52 f0       	brmi	.+20     	; 0x28dc <__fp_round+0x20>
    28c8:	bb 0f       	add	r27, r27
    28ca:	40 f4       	brcc	.+16     	; 0x28dc <__fp_round+0x20>
    28cc:	bf 2b       	or	r27, r31
    28ce:	11 f4       	brne	.+4      	; 0x28d4 <__fp_round+0x18>
    28d0:	60 ff       	sbrs	r22, 0
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <__fp_round+0x20>
    28d4:	6f 5f       	subi	r22, 0xFF	; 255
    28d6:	7f 4f       	sbci	r23, 0xFF	; 255
    28d8:	8f 4f       	sbci	r24, 0xFF	; 255
    28da:	9f 4f       	sbci	r25, 0xFF	; 255
    28dc:	08 95       	ret

000028de <__fp_split3>:
    28de:	57 fd       	sbrc	r21, 7
    28e0:	90 58       	subi	r25, 0x80	; 128
    28e2:	44 0f       	add	r20, r20
    28e4:	55 1f       	adc	r21, r21
    28e6:	59 f0       	breq	.+22     	; 0x28fe <__fp_splitA+0x10>
    28e8:	5f 3f       	cpi	r21, 0xFF	; 255
    28ea:	71 f0       	breq	.+28     	; 0x2908 <__fp_splitA+0x1a>
    28ec:	47 95       	ror	r20

000028ee <__fp_splitA>:
    28ee:	88 0f       	add	r24, r24
    28f0:	97 fb       	bst	r25, 7
    28f2:	99 1f       	adc	r25, r25
    28f4:	61 f0       	breq	.+24     	; 0x290e <__fp_splitA+0x20>
    28f6:	9f 3f       	cpi	r25, 0xFF	; 255
    28f8:	79 f0       	breq	.+30     	; 0x2918 <__fp_splitA+0x2a>
    28fa:	87 95       	ror	r24
    28fc:	08 95       	ret
    28fe:	12 16       	cp	r1, r18
    2900:	13 06       	cpc	r1, r19
    2902:	14 06       	cpc	r1, r20
    2904:	55 1f       	adc	r21, r21
    2906:	f2 cf       	rjmp	.-28     	; 0x28ec <__fp_split3+0xe>
    2908:	46 95       	lsr	r20
    290a:	f1 df       	rcall	.-30     	; 0x28ee <__fp_splitA>
    290c:	08 c0       	rjmp	.+16     	; 0x291e <__fp_splitA+0x30>
    290e:	16 16       	cp	r1, r22
    2910:	17 06       	cpc	r1, r23
    2912:	18 06       	cpc	r1, r24
    2914:	99 1f       	adc	r25, r25
    2916:	f1 cf       	rjmp	.-30     	; 0x28fa <__fp_splitA+0xc>
    2918:	86 95       	lsr	r24
    291a:	71 05       	cpc	r23, r1
    291c:	61 05       	cpc	r22, r1
    291e:	08 94       	sec
    2920:	08 95       	ret

00002922 <__fp_zero>:
    2922:	e8 94       	clt

00002924 <__fp_szero>:
    2924:	bb 27       	eor	r27, r27
    2926:	66 27       	eor	r22, r22
    2928:	77 27       	eor	r23, r23
    292a:	cb 01       	movw	r24, r22
    292c:	97 f9       	bld	r25, 7
    292e:	08 95       	ret

00002930 <__gesf2>:
    2930:	0e 94 23 14 	call	0x2846	; 0x2846 <__fp_cmp>
    2934:	08 f4       	brcc	.+2      	; 0x2938 <__gesf2+0x8>
    2936:	8f ef       	ldi	r24, 0xFF	; 255
    2938:	08 95       	ret

0000293a <__mulsf3>:
    293a:	0e 94 b0 14 	call	0x2960	; 0x2960 <__mulsf3x>
    293e:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__fp_round>
    2942:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__fp_pscA>
    2946:	38 f0       	brcs	.+14     	; 0x2956 <__mulsf3+0x1c>
    2948:	0e 94 57 14 	call	0x28ae	; 0x28ae <__fp_pscB>
    294c:	20 f0       	brcs	.+8      	; 0x2956 <__mulsf3+0x1c>
    294e:	95 23       	and	r25, r21
    2950:	11 f0       	breq	.+4      	; 0x2956 <__mulsf3+0x1c>
    2952:	0c 94 47 14 	jmp	0x288e	; 0x288e <__fp_inf>
    2956:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__fp_nan>
    295a:	11 24       	eor	r1, r1
    295c:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__fp_szero>

00002960 <__mulsf3x>:
    2960:	0e 94 6f 14 	call	0x28de	; 0x28de <__fp_split3>
    2964:	70 f3       	brcs	.-36     	; 0x2942 <__mulsf3+0x8>

00002966 <__mulsf3_pse>:
    2966:	95 9f       	mul	r25, r21
    2968:	c1 f3       	breq	.-16     	; 0x295a <__mulsf3+0x20>
    296a:	95 0f       	add	r25, r21
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	55 1f       	adc	r21, r21
    2970:	62 9f       	mul	r22, r18
    2972:	f0 01       	movw	r30, r0
    2974:	72 9f       	mul	r23, r18
    2976:	bb 27       	eor	r27, r27
    2978:	f0 0d       	add	r31, r0
    297a:	b1 1d       	adc	r27, r1
    297c:	63 9f       	mul	r22, r19
    297e:	aa 27       	eor	r26, r26
    2980:	f0 0d       	add	r31, r0
    2982:	b1 1d       	adc	r27, r1
    2984:	aa 1f       	adc	r26, r26
    2986:	64 9f       	mul	r22, r20
    2988:	66 27       	eor	r22, r22
    298a:	b0 0d       	add	r27, r0
    298c:	a1 1d       	adc	r26, r1
    298e:	66 1f       	adc	r22, r22
    2990:	82 9f       	mul	r24, r18
    2992:	22 27       	eor	r18, r18
    2994:	b0 0d       	add	r27, r0
    2996:	a1 1d       	adc	r26, r1
    2998:	62 1f       	adc	r22, r18
    299a:	73 9f       	mul	r23, r19
    299c:	b0 0d       	add	r27, r0
    299e:	a1 1d       	adc	r26, r1
    29a0:	62 1f       	adc	r22, r18
    29a2:	83 9f       	mul	r24, r19
    29a4:	a0 0d       	add	r26, r0
    29a6:	61 1d       	adc	r22, r1
    29a8:	22 1f       	adc	r18, r18
    29aa:	74 9f       	mul	r23, r20
    29ac:	33 27       	eor	r19, r19
    29ae:	a0 0d       	add	r26, r0
    29b0:	61 1d       	adc	r22, r1
    29b2:	23 1f       	adc	r18, r19
    29b4:	84 9f       	mul	r24, r20
    29b6:	60 0d       	add	r22, r0
    29b8:	21 1d       	adc	r18, r1
    29ba:	82 2f       	mov	r24, r18
    29bc:	76 2f       	mov	r23, r22
    29be:	6a 2f       	mov	r22, r26
    29c0:	11 24       	eor	r1, r1
    29c2:	9f 57       	subi	r25, 0x7F	; 127
    29c4:	50 40       	sbci	r21, 0x00	; 0
    29c6:	9a f0       	brmi	.+38     	; 0x29ee <__mulsf3_pse+0x88>
    29c8:	f1 f0       	breq	.+60     	; 0x2a06 <__mulsf3_pse+0xa0>
    29ca:	88 23       	and	r24, r24
    29cc:	4a f0       	brmi	.+18     	; 0x29e0 <__mulsf3_pse+0x7a>
    29ce:	ee 0f       	add	r30, r30
    29d0:	ff 1f       	adc	r31, r31
    29d2:	bb 1f       	adc	r27, r27
    29d4:	66 1f       	adc	r22, r22
    29d6:	77 1f       	adc	r23, r23
    29d8:	88 1f       	adc	r24, r24
    29da:	91 50       	subi	r25, 0x01	; 1
    29dc:	50 40       	sbci	r21, 0x00	; 0
    29de:	a9 f7       	brne	.-22     	; 0x29ca <__mulsf3_pse+0x64>
    29e0:	9e 3f       	cpi	r25, 0xFE	; 254
    29e2:	51 05       	cpc	r21, r1
    29e4:	80 f0       	brcs	.+32     	; 0x2a06 <__mulsf3_pse+0xa0>
    29e6:	0c 94 47 14 	jmp	0x288e	; 0x288e <__fp_inf>
    29ea:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__fp_szero>
    29ee:	5f 3f       	cpi	r21, 0xFF	; 255
    29f0:	e4 f3       	brlt	.-8      	; 0x29ea <__mulsf3_pse+0x84>
    29f2:	98 3e       	cpi	r25, 0xE8	; 232
    29f4:	d4 f3       	brlt	.-12     	; 0x29ea <__mulsf3_pse+0x84>
    29f6:	86 95       	lsr	r24
    29f8:	77 95       	ror	r23
    29fa:	67 95       	ror	r22
    29fc:	b7 95       	ror	r27
    29fe:	f7 95       	ror	r31
    2a00:	e7 95       	ror	r30
    2a02:	9f 5f       	subi	r25, 0xFF	; 255
    2a04:	c1 f7       	brne	.-16     	; 0x29f6 <__mulsf3_pse+0x90>
    2a06:	fe 2b       	or	r31, r30
    2a08:	88 0f       	add	r24, r24
    2a0a:	91 1d       	adc	r25, r1
    2a0c:	96 95       	lsr	r25
    2a0e:	87 95       	ror	r24
    2a10:	97 f9       	bld	r25, 7
    2a12:	08 95       	ret

00002a14 <__divmodhi4>:
    2a14:	97 fb       	bst	r25, 7
    2a16:	07 2e       	mov	r0, r23
    2a18:	16 f4       	brtc	.+4      	; 0x2a1e <__divmodhi4+0xa>
    2a1a:	00 94       	com	r0
    2a1c:	07 d0       	rcall	.+14     	; 0x2a2c <__divmodhi4_neg1>
    2a1e:	77 fd       	sbrc	r23, 7
    2a20:	09 d0       	rcall	.+18     	; 0x2a34 <__divmodhi4_neg2>
    2a22:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__udivmodhi4>
    2a26:	07 fc       	sbrc	r0, 7
    2a28:	05 d0       	rcall	.+10     	; 0x2a34 <__divmodhi4_neg2>
    2a2a:	3e f4       	brtc	.+14     	; 0x2a3a <__divmodhi4_exit>

00002a2c <__divmodhi4_neg1>:
    2a2c:	90 95       	com	r25
    2a2e:	81 95       	neg	r24
    2a30:	9f 4f       	sbci	r25, 0xFF	; 255
    2a32:	08 95       	ret

00002a34 <__divmodhi4_neg2>:
    2a34:	70 95       	com	r23
    2a36:	61 95       	neg	r22
    2a38:	7f 4f       	sbci	r23, 0xFF	; 255

00002a3a <__divmodhi4_exit>:
    2a3a:	08 95       	ret

00002a3c <__udivmodhi4>:
    2a3c:	aa 1b       	sub	r26, r26
    2a3e:	bb 1b       	sub	r27, r27
    2a40:	51 e1       	ldi	r21, 0x11	; 17
    2a42:	07 c0       	rjmp	.+14     	; 0x2a52 <__udivmodhi4_ep>

00002a44 <__udivmodhi4_loop>:
    2a44:	aa 1f       	adc	r26, r26
    2a46:	bb 1f       	adc	r27, r27
    2a48:	a6 17       	cp	r26, r22
    2a4a:	b7 07       	cpc	r27, r23
    2a4c:	10 f0       	brcs	.+4      	; 0x2a52 <__udivmodhi4_ep>
    2a4e:	a6 1b       	sub	r26, r22
    2a50:	b7 0b       	sbc	r27, r23

00002a52 <__udivmodhi4_ep>:
    2a52:	88 1f       	adc	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	5a 95       	dec	r21
    2a58:	a9 f7       	brne	.-22     	; 0x2a44 <__udivmodhi4_loop>
    2a5a:	80 95       	com	r24
    2a5c:	90 95       	com	r25
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	08 95       	ret

00002a64 <__itoa_ncheck>:
    2a64:	bb 27       	eor	r27, r27
    2a66:	4a 30       	cpi	r20, 0x0A	; 10
    2a68:	31 f4       	brne	.+12     	; 0x2a76 <__itoa_ncheck+0x12>
    2a6a:	99 23       	and	r25, r25
    2a6c:	22 f4       	brpl	.+8      	; 0x2a76 <__itoa_ncheck+0x12>
    2a6e:	bd e2       	ldi	r27, 0x2D	; 45
    2a70:	90 95       	com	r25
    2a72:	81 95       	neg	r24
    2a74:	9f 4f       	sbci	r25, 0xFF	; 255
    2a76:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <__utoa_common>

00002a7a <__utoa_ncheck>:
    2a7a:	bb 27       	eor	r27, r27

00002a7c <__utoa_common>:
    2a7c:	fb 01       	movw	r30, r22
    2a7e:	55 27       	eor	r21, r21
    2a80:	aa 27       	eor	r26, r26
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	aa 1f       	adc	r26, r26
    2a88:	a4 17       	cp	r26, r20
    2a8a:	10 f0       	brcs	.+4      	; 0x2a90 <__utoa_common+0x14>
    2a8c:	a4 1b       	sub	r26, r20
    2a8e:	83 95       	inc	r24
    2a90:	50 51       	subi	r21, 0x10	; 16
    2a92:	b9 f7       	brne	.-18     	; 0x2a82 <__utoa_common+0x6>
    2a94:	a0 5d       	subi	r26, 0xD0	; 208
    2a96:	aa 33       	cpi	r26, 0x3A	; 58
    2a98:	08 f0       	brcs	.+2      	; 0x2a9c <__utoa_common+0x20>
    2a9a:	a9 5d       	subi	r26, 0xD9	; 217
    2a9c:	a1 93       	st	Z+, r26
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	79 f7       	brne	.-34     	; 0x2a80 <__utoa_common+0x4>
    2aa2:	b1 11       	cpse	r27, r1
    2aa4:	b1 93       	st	Z+, r27
    2aa6:	11 92       	st	Z+, r1
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <strrev>

00002aae <strrev>:
    2aae:	dc 01       	movw	r26, r24
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	67 2f       	mov	r22, r23
    2ab4:	71 91       	ld	r23, Z+
    2ab6:	77 23       	and	r23, r23
    2ab8:	e1 f7       	brne	.-8      	; 0x2ab2 <strrev+0x4>
    2aba:	32 97       	sbiw	r30, 0x02	; 2
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <strrev+0x18>
    2abe:	7c 91       	ld	r23, X
    2ac0:	6d 93       	st	X+, r22
    2ac2:	70 83       	st	Z, r23
    2ac4:	62 91       	ld	r22, -Z
    2ac6:	ae 17       	cp	r26, r30
    2ac8:	bf 07       	cpc	r27, r31
    2aca:	c8 f3       	brcs	.-14     	; 0x2abe <strrev+0x10>
    2acc:	08 95       	ret

00002ace <_exit>:
    2ace:	f8 94       	cli

00002ad0 <__stop_program>:
    2ad0:	ff cf       	rjmp	.-2      	; 0x2ad0 <__stop_program>
